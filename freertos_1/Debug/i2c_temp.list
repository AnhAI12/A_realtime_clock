
i2c_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab40  0800ab40  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab40  0800ab40  0001ab40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab48  0800ab48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab48  0800ab48  0001ab48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab4c  0800ab4c  0001ab4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ab50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000860  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197e8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004642  00000000  00000000  000398a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268c4  00000000  00000000  000404a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cbe3  00000000  00000000  00066d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca4d  00000000  00000000  0008394f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015039c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005278  00000000  00000000  001503ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aad0 	.word	0x0800aad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800aad0 	.word	0x0800aad0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC3   ------> I2S2_SD
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b69      	ldr	r3, [pc, #420]	; (800068c <MX_GPIO_Init+0x1c0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a68      	ldr	r2, [pc, #416]	; (800068c <MX_GPIO_Init+0x1c0>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b66      	ldr	r3, [pc, #408]	; (800068c <MX_GPIO_Init+0x1c0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b62      	ldr	r3, [pc, #392]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a61      	ldr	r2, [pc, #388]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b5f      	ldr	r3, [pc, #380]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b5b      	ldr	r3, [pc, #364]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a5a      	ldr	r2, [pc, #360]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b58      	ldr	r3, [pc, #352]	; (800068c <MX_GPIO_Init+0x1c0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b54      	ldr	r3, [pc, #336]	; (800068c <MX_GPIO_Init+0x1c0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a53      	ldr	r2, [pc, #332]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b51      	ldr	r3, [pc, #324]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a4c      	ldr	r2, [pc, #304]	; (800068c <MX_GPIO_Init+0x1c0>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a45      	ldr	r2, [pc, #276]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_GPIO_Init+0x1c0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	4840      	ldr	r0, [pc, #256]	; (8000690 <MX_GPIO_Init+0x1c4>)
 8000590:	f000 ff7e 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	483e      	ldr	r0, [pc, #248]	; (8000694 <MX_GPIO_Init+0x1c8>)
 800059a:	f000 ff79 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	483c      	ldr	r0, [pc, #240]	; (8000698 <MX_GPIO_Init+0x1cc>)
 80005a6:	f000 ff73 	bl	8001490 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4833      	ldr	r0, [pc, #204]	; (8000690 <MX_GPIO_Init+0x1c4>)
 80005c2:	f000 fdc9 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	482d      	ldr	r0, [pc, #180]	; (8000694 <MX_GPIO_Init+0x1c8>)
 80005de:	f000 fdbb 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4825      	ldr	r0, [pc, #148]	; (8000694 <MX_GPIO_Init+0x1c8>)
 80005fe:	f000 fdab 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <MX_GPIO_Init+0x1d0>)
 8000618:	f000 fd9e 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <MX_GPIO_Init+0x1d4>)
 8000630:	f000 fd92 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000634:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000638:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_GPIO_Init+0x1cc>)
 800064e:	f000 fd83 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000652:	2320      	movs	r3, #32
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_GPIO_Init+0x1cc>)
 8000666:	f000 fd77 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800066e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0x1c4>)
 8000680:	f000 fd6a 	bl	8001158 <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3730      	adds	r7, #48	; 0x30
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40021000 	.word	0x40021000
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f002 faf9 	bl	8002cd8 <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f9f6 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C2_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_I2C2_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C2_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_I2C2_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C2_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_I2C2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2C2_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_I2C2_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_I2C2_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_I2C2_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_I2C2_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C2_Init+0x50>)
 800073e:	f002 facb 	bl	8002cd8 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f9c8 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000100 	.word	0x20000100
 8000754:	40005800 	.word	0x40005800
 8000758:	000186a0 	.word	0x000186a0

0800075c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_I2C_MspInit+0x10c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d13d      	bne.n	80007fa <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a39      	ldr	r2, [pc, #228]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800079a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a0:	2312      	movs	r3, #18
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ac:	2304      	movs	r3, #4
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	482e      	ldr	r0, [pc, #184]	; (8000870 <HAL_I2C_MspInit+0x114>)
 80007b8:	f000 fcce 	bl	8001158 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	4b2a      	ldr	r3, [pc, #168]	; (800086c <HAL_I2C_MspInit+0x110>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a29      	ldr	r2, [pc, #164]	; (800086c <HAL_I2C_MspInit+0x110>)
 80007c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <HAL_I2C_MspInit+0x110>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	201f      	movs	r0, #31
 80007de:	f000 fc54 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007e2:	201f      	movs	r0, #31
 80007e4:	f000 fc6d 	bl	80010c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2020      	movs	r0, #32
 80007ee:	f000 fc4c 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007f2:	2020      	movs	r0, #32
 80007f4:	f000 fc65 	bl	80010c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007f8:	e031      	b.n	800085e <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <HAL_I2C_MspInit+0x118>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d12c      	bne.n	800085e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_I2C_MspInit+0x110>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_I2C_MspInit+0x110>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000820:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000832:	2304      	movs	r3, #4
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <HAL_I2C_MspInit+0x114>)
 800083e:	f000 fc8b 	bl	8001158 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_I2C_MspInit+0x110>)
 800084c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_I2C_MspInit+0x110>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40005400 	.word	0x40005400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40005800 	.word	0x40005800

08000878 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_I2S3_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_I2S3_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MX_I2S3_Init+0x5c>)
 80008a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b8:	f004 fe7e 	bl	80055b8 <HAL_I2S_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008c2:	f000 f90b 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000154 	.word	0x20000154
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	00017700 	.word	0x00017700

080008d8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <HAL_I2S_MspInit+0xf0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d15a      	bne.n	80009be <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000908:	2301      	movs	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800090c:	23c0      	movs	r3, #192	; 0xc0
 800090e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4618      	mov	r0, r3
 800091a:	f005 ff71 	bl	8006800 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000924:	f000 f8da 	bl	8000adc <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_I2S_MspInit+0xf4>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800097c:	2310      	movs	r3, #16
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <HAL_I2S_MspInit+0xf8>)
 8000998:	f000 fbde 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800099c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <HAL_I2S_MspInit+0xfc>)
 80009ba:	f000 fbcd 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009be:	bf00      	nop
 80009c0:	3738      	adds	r7, #56	; 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 f9e4 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f812 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fd72 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e8:	f7ff fe5c 	bl	80006a4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009ec:	f7ff ff44 	bl	8000878 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009f0:	f000 f87a 	bl	8000ae8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009f4:	f009 fc20 	bl	800a238 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80009f8:	f7ff fe82 	bl	8000700 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009fc:	f009 fc42 	bl	800a284 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    alt_main();
 8000a00:	f009 fbb8 	bl	800a174 <alt_main>
    MX_USB_HOST_Process();
 8000a04:	e7fa      	b.n	80009fc <main+0x24>
	...

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 ff54 	bl	800a8c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fa32 	bl	8005ef8 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a9a:	f000 f81f 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aaa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2105      	movs	r1, #5
 8000abc:	4618      	mov	r0, r3
 8000abe:	f005 fc93 	bl	80063e8 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac8:	f000 f808 	bl	8000adc <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <MX_SPI1_Init+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b34:	220a      	movs	r2, #10
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_SPI1_Init+0x64>)
 8000b3a:	f005 ffa1 	bl	8006a80 <HAL_SPI_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b44:	f7ff ffca 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000019c 	.word	0x2000019c
 8000b50:	40013000 	.word	0x40013000

08000b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fac5 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fa26 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f8e4 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <I2C1_EV_IRQHandler+0x10>)
 8000c8e:	f002 fc8b 	bl	80035a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000ac 	.word	0x200000ac

08000c9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <I2C1_ER_IRQHandler+0x10>)
 8000ca2:	f002 fdf2 	bl	800388a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000ac 	.word	0x200000ac

08000cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <OTG_FS_IRQHandler+0x10>)
 8000cb6:	f000 fe6f 	bl	8001998 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200005dc 	.word	0x200005dc

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f009 fdac 	bl	800a850 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200001f4 	.word	0x200001f4
 8000d2c:	200008f0 	.word	0x200008f0

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f009 fd6b 	bl	800a85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fe27 	bl	80009d8 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d98:	0800ab50 	.word	0x0800ab50
  ldr r2, =_sbss
 8000d9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000da0:	200008f0 	.word	0x200008f0

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f94f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff ff02 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f967 	bl	80010de <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f92f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200001f8 	.word	0x200001f8

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200001f8 	.word	0x200001f8

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d004      	beq.n	8001114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2205      	movs	r2, #5
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	; (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_GPIO_Init+0x334>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c4:	b08f      	sub	sp, #60	; 0x3c
 80014c6:	af0a      	add	r7, sp, #40	; 0x28
 80014c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e054      	b.n	800157e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f008 ff00 	bl	800a2f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fbaf 	bl	8006c76 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	687e      	ldr	r6, [r7, #4]
 8001520:	466d      	mov	r5, sp
 8001522:	f106 0410 	add.w	r4, r6, #16
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	1d33      	adds	r3, r6, #4
 8001538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153a:	6838      	ldr	r0, [r7, #0]
 800153c:	f005 fb29 	bl	8006b92 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fba6 	bl	8006c98 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	687e      	ldr	r6, [r7, #4]
 8001554:	466d      	mov	r5, sp
 8001556:	f106 0410 	add.w	r4, r6, #16
 800155a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001566:	e885 0003 	stmia.w	r5, {r0, r1}
 800156a:	1d33      	adds	r3, r6, #4
 800156c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f005 fd2e 	bl	8006fd0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001586 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b089      	sub	sp, #36	; 0x24
 800158a:	af04      	add	r7, sp, #16
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	4608      	mov	r0, r1
 8001590:	4611      	mov	r1, r2
 8001592:	461a      	mov	r2, r3
 8001594:	4603      	mov	r3, r0
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	460b      	mov	r3, r1
 800159a:	70bb      	strb	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_HCD_HC_Init+0x28>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e076      	b.n	800169c <HAL_HCD_HC_Init+0x116>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	333d      	adds	r3, #61	; 0x3d
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	212c      	movs	r1, #44	; 0x2c
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	3338      	adds	r3, #56	; 0x38
 80015d6:	787a      	ldrb	r2, [r7, #1]
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3340      	adds	r3, #64	; 0x40
 80015e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	212c      	movs	r1, #44	; 0x2c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	3339      	adds	r3, #57	; 0x39
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	333f      	adds	r3, #63	; 0x3f
 800160c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001610:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	78ba      	ldrb	r2, [r7, #2]
 8001616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800161a:	b2d0      	uxtb	r0, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	212c      	movs	r1, #44	; 0x2c
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	333a      	adds	r3, #58	; 0x3a
 8001628:	4602      	mov	r2, r0
 800162a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800162c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da09      	bge.n	8001648 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	333b      	adds	r3, #59	; 0x3b
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e008      	b.n	800165a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	333b      	adds	r3, #59	; 0x3b
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	333c      	adds	r3, #60	; 0x3c
 8001668:	f897 2020 	ldrb.w	r2, [r7, #32]
 800166c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	787c      	ldrb	r4, [r7, #1]
 8001674:	78ba      	ldrb	r2, [r7, #2]
 8001676:	78f9      	ldrb	r1, [r7, #3]
 8001678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4623      	mov	r3, r4
 800168a:	f005 fe27 	bl	80072dc <USB_HC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}

080016a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_HCD_HC_Halt+0x1e>
 80016be:	2302      	movs	r3, #2
 80016c0:	e00f      	b.n	80016e2 <HAL_HCD_HC_Halt+0x3e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 f877 	bl	80077c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	70fb      	strb	r3, [r7, #3]
 80016fe:	460b      	mov	r3, r1
 8001700:	70bb      	strb	r3, [r7, #2]
 8001702:	4613      	mov	r3, r2
 8001704:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	212c      	movs	r1, #44	; 0x2c
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	333b      	adds	r3, #59	; 0x3b
 8001714:	78ba      	ldrb	r2, [r7, #2]
 8001716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	333f      	adds	r3, #63	; 0x3f
 8001726:	787a      	ldrb	r2, [r7, #1]
 8001728:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d112      	bne.n	8001756 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3342      	adds	r3, #66	; 0x42
 800173e:	2203      	movs	r2, #3
 8001740:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	333d      	adds	r3, #61	; 0x3d
 8001750:	7f3a      	ldrb	r2, [r7, #28]
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e008      	b.n	8001768 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b03      	cmp	r3, #3
 800176c:	f200 80c6 	bhi.w	80018fc <HAL_HCD_HC_SubmitRequest+0x210>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	080018e9 	.word	0x080018e9
 8001780:	080017ed 	.word	0x080017ed
 8001784:	0800186b 	.word	0x0800186b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001788:	7c3b      	ldrb	r3, [r7, #16]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 80b8 	bne.w	8001900 <HAL_HCD_HC_SubmitRequest+0x214>
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 80b4 	bne.w	8001900 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001798:	8b3b      	ldrh	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3355      	adds	r3, #85	; 0x55
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3355      	adds	r3, #85	; 0x55
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017d6:	e093      	b.n	8001900 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e089      	b.n	8001900 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11d      	bne.n	800182e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3355      	adds	r3, #85	; 0x55
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3342      	adds	r3, #66	; 0x42
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001818:	e073      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3342      	adds	r3, #66	; 0x42
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
      break;
 800182c:	e069      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3354      	adds	r3, #84	; 0x54
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e055      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e04b      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800186a:	78bb      	ldrb	r3, [r7, #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11d      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3355      	adds	r3, #85	; 0x55
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3342      	adds	r3, #66	; 0x42
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001896:	e034      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e02a      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3354      	adds	r3, #84	; 0x54
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
      break;
 80018d2:	e016      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e00c      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	212c      	movs	r1, #44	; 0x2c
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4413      	add	r3, r2
 80018f4:	3342      	adds	r3, #66	; 0x42
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
      break;
 80018fa:	e002      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018fc:	bf00      	nop
 80018fe:	e000      	b.n	8001902 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001900:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3344      	adds	r3, #68	; 0x44
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	8b3a      	ldrh	r2, [r7, #24]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	202c      	movs	r0, #44	; 0x2c
 800191c:	fb00 f303 	mul.w	r3, r0, r3
 8001920:	440b      	add	r3, r1
 8001922:	334c      	adds	r3, #76	; 0x4c
 8001924:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3360      	adds	r3, #96	; 0x60
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3350      	adds	r3, #80	; 0x50
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3339      	adds	r3, #57	; 0x39
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3361      	adds	r3, #97	; 0x61
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	222c      	movs	r2, #44	; 0x2c
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	3338      	adds	r3, #56	; 0x38
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	18d1      	adds	r1, r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	f005 fdca 	bl	8007520 <USB_HC_StartXfer>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 facb 	bl	8006f4a <USB_GetMode>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 80f6 	bne.w	8001ba8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 faaf 	bl	8006f24 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80ec 	beq.w	8001ba6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f005 faa6 	bl	8006f24 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019e2:	d104      	bne.n	80019ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f005 fa96 	bl	8006f24 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a02:	d104      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fa86 	bl	8006f24 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a22:	d104      	bne.n	8001a2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fa76 	bl	8006f24 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d103      	bne.n	8001a4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2202      	movs	r2, #2
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 fa68 	bl	8006f24 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a5e:	d11c      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	6938      	ldr	r0, [r7, #16]
 8001a7e:	f005 f957 	bl	8006d30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a82:	6938      	ldr	r0, [r7, #16]
 8001a84:	f005 f988 	bl	8006d98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fb5e 	bl	8007150 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f008 fcab 	bl	800a3f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 fa40 	bl	8006f24 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aae:	d102      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f001 f89e 	bl	8002bf2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 fa32 	bl	8006f24 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d106      	bne.n	8001ad8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f008 fc74 	bl	800a3b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fa21 	bl	8006f24 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d101      	bne.n	8001af0 <HAL_HCD_IRQHandler+0x158>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_HCD_IRQHandler+0x15a>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0210 	bic.w	r2, r2, #16
 8001b04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 ffa1 	bl	8002a4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0210 	orr.w	r2, r2, #16
 8001b1a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f005 f9ff 	bl	8006f24 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b30:	d13a      	bne.n	8001ba8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fe34 	bl	80077a4 <USB_HC_ReadInterrupt>
 8001b3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e025      	b.n	8001b90 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b6e:	d106      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8ab 	bl	8001cd2 <HCD_HC_IN_IRQHandler>
 8001b7c:	e005      	b.n	8001b8a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fbf9 	bl	800237c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3d4      	bcc.n	8001b44 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	e000      	b.n	8001ba8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ba6:	bf00      	nop
    }
  }
}
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_HCD_Start+0x16>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e013      	b.n	8001bec <HAL_HCD_Start+0x3e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f005 fb20 	bl	8007218 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f005 f839 	bl	8006c54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_HCD_Stop+0x16>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e00d      	b.n	8001c26 <HAL_HCD_Stop+0x32>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 ff0e 	bl	8007a38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f005 fac2 	bl	80071c4 <USB_ResetPort>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3360      	adds	r3, #96	; 0x60
 8001c64:	781b      	ldrb	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3350      	adds	r3, #80	; 0x50
 8001c8c:	681b      	ldr	r3, [r3, #0]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 fb06 	bl	80072b8 <USB_GetCurrentFrame>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 fae1 	bl	800728a <USB_GetHostSpeed>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d11a      	bne.n	8001d38 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2304      	movs	r3, #4
 8001d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3361      	adds	r3, #97	; 0x61
 8001d22:	2206      	movs	r2, #6
 8001d24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fd48 	bl	80077c6 <USB_HC_Halt>
 8001d36:	e0af      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4e:	d11b      	bne.n	8001d88 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3361      	adds	r3, #97	; 0x61
 8001d72:	2207      	movs	r2, #7
 8001d74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f005 fd20 	bl	80077c6 <USB_HC_Halt>
 8001d86:	e087      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d109      	bne.n	8001db2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2320      	movs	r3, #32
 8001dae:	6093      	str	r3, [r2, #8]
 8001db0:	e072      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11a      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3361      	adds	r3, #97	; 0x61
 8001de8:	2205      	movs	r2, #5
 8001dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 fce5 	bl	80077c6 <USB_HC_Halt>
 8001dfc:	e04c      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d11b      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3361      	adds	r3, #97	; 0x61
 8001e38:	2208      	movs	r2, #8
 8001e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fcbd 	bl	80077c6 <USB_HC_Halt>
 8001e4c:	e024      	b.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d119      	bne.n	8001e98 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2206      	movs	r2, #6
 8001e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fc97 	bl	80077c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eae:	d112      	bne.n	8001ed6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fc83 	bl	80077c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ed4:	e24e      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	f040 80df 	bne.w	80020ac <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3348      	adds	r3, #72	; 0x48
 8001f04:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0159      	lsls	r1, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	202c      	movs	r0, #44	; 0x2c
 8001f20:	fb00 f303 	mul.w	r3, r0, r3
 8001f24:	440b      	add	r3, r1
 8001f26:	3350      	adds	r3, #80	; 0x50
 8001f28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3361      	adds	r3, #97	; 0x61
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	335c      	adds	r3, #92	; 0x5c
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	333f      	adds	r3, #63	; 0x3f
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	333f      	adds	r3, #63	; 0x3f
 8001f82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d111      	bne.n	8001fac <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 fc17 	bl	80077c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	6093      	str	r3, [r2, #8]
 8001faa:	e03a      	b.n	8002022 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	333f      	adds	r3, #63	; 0x3f
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d009      	beq.n	8001fd4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d126      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ff2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3360      	adds	r3, #96	; 0x60
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	202c      	movs	r0, #44	; 0x2c
 8002010:	fb00 f303 	mul.w	r3, r0, r3
 8002014:	4413      	add	r3, r2
 8002016:	3360      	adds	r3, #96	; 0x60
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f008 f9f5 	bl	800a40c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d12b      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	202c      	movs	r0, #44	; 0x2c
 8002040:	fb00 f202 	mul.w	r2, r0, r2
 8002044:	440a      	add	r2, r1
 8002046:	3240      	adds	r2, #64	; 0x40
 8002048:	8812      	ldrh	r2, [r2, #0]
 800204a:	fbb3 f3f2 	udiv	r3, r3, r2
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 818e 	beq.w	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3354      	adds	r3, #84	; 0x54
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f083 0301 	eor.w	r3, r3, #1
 800206c:	b2d8      	uxtb	r0, r3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3354      	adds	r3, #84	; 0x54
 800207c:	4602      	mov	r2, r0
 800207e:	701a      	strb	r2, [r3, #0]
}
 8002080:	e178      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f083 0301 	eor.w	r3, r3, #1
 8002096:	b2d8      	uxtb	r0, r3
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3354      	adds	r3, #84	; 0x54
 80020a6:	4602      	mov	r2, r0
 80020a8:	701a      	strb	r2, [r3, #0]
}
 80020aa:	e163      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	f040 80f6 	bne.w	80022b0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d109      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e0c9      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3361      	adds	r3, #97	; 0x61
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d109      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3360      	adds	r3, #96	; 0x60
 800210e:	2205      	movs	r2, #5
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e0b5      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3361      	adds	r3, #97	; 0x61
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b06      	cmp	r3, #6
 8002126:	d009      	beq.n	800213c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3361      	adds	r3, #97	; 0x61
 8002136:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002138:	2b08      	cmp	r3, #8
 800213a:	d150      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	335c      	adds	r3, #92	; 0x5c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	202c      	movs	r0, #44	; 0x2c
 8002154:	fb00 f303 	mul.w	r3, r0, r3
 8002158:	440b      	add	r3, r1
 800215a:	335c      	adds	r3, #92	; 0x5c
 800215c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	335c      	adds	r3, #92	; 0x5c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d912      	bls.n	8002198 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	335c      	adds	r3, #92	; 0x5c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3360      	adds	r3, #96	; 0x60
 8002192:	2204      	movs	r2, #4
 8002194:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002196:	e073      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	2202      	movs	r2, #2
 80021a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021dc:	e050      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3361      	adds	r3, #97	; 0x61
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d122      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002222:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e023      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b07      	cmp	r3, #7
 800224a:	d119      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	440b      	add	r3, r1
 800226a:	335c      	adds	r3, #92	; 0x5c
 800226c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	2204      	movs	r2, #4
 800227e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	2302      	movs	r3, #2
 8002290:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b2d9      	uxtb	r1, r3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	202c      	movs	r0, #44	; 0x2c
 800229c:	fb00 f303 	mul.w	r3, r0, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3360      	adds	r3, #96	; 0x60
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f008 f8af 	bl	800a40c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022ae:	e061      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d156      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	333f      	adds	r3, #63	; 0x3f
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d111      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f005 fa65 	bl	80077c6 <USB_HC_Halt>
 80022fc:	e031      	b.n	8002362 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	333f      	adds	r3, #63	; 0x3f
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	333f      	adds	r3, #63	; 0x3f
 8002320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002322:	2b02      	cmp	r3, #2
 8002324:	d11d      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	335c      	adds	r3, #92	; 0x5c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d110      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3361      	adds	r3, #97	; 0x61
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f005 fa32 	bl	80077c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2310      	movs	r3, #16
 8002372:	6093      	str	r3, [r2, #8]
}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11a      	bne.n	80023e2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2304      	movs	r3, #4
 80023bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3361      	adds	r3, #97	; 0x61
 80023cc:	2206      	movs	r2, #6
 80023ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f9f3 	bl	80077c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023e0:	e331      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d12e      	bne.n	8002456 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2320      	movs	r3, #32
 8002408:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	333d      	adds	r3, #61	; 0x3d
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	f040 8313 	bne.w	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	333d      	adds	r3, #61	; 0x3d
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3360      	adds	r3, #96	; 0x60
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f005 f9b9 	bl	80077c6 <USB_HC_Halt>
}
 8002454:	e2f7      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246c:	d112      	bne.n	8002494 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002480:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f005 f99a 	bl	80077c6 <USB_HC_Halt>
}
 8002492:	e2d8      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d140      	bne.n	800252c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d111      	bne.n	80024f6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333d      	adds	r3, #61	; 0x3d
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	461a      	mov	r2, r3
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f005 f94e 	bl	80077c6 <USB_HC_Halt>
}
 800252a:	e28c      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d12c      	bne.n	800259c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3361      	adds	r3, #97	; 0x61
 8002550:	2204      	movs	r2, #4
 8002552:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	333d      	adds	r3, #61	; 0x3d
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f005 f91f 	bl	80077c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	461a      	mov	r2, r3
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	6093      	str	r3, [r2, #8]
}
 800259a:	e254      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11a      	bne.n	80025e8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	2308      	movs	r3, #8
 80025c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3361      	adds	r3, #97	; 0x61
 80025d2:	2205      	movs	r2, #5
 80025d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f005 f8f0 	bl	80077c6 <USB_HC_Halt>
}
 80025e6:	e22e      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d140      	bne.n	8002680 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3361      	adds	r3, #97	; 0x61
 800261e:	2203      	movs	r2, #3
 8002620:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333d      	adds	r3, #61	; 0x3d
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d112      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	333c      	adds	r3, #60	; 0x3c
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333d      	adds	r3, #61	; 0x3d
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f005 f8ad 	bl	80077c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	2310      	movs	r3, #16
 800267c:	6093      	str	r3, [r2, #8]
}
 800267e:	e1e2      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d164      	bne.n	8002760 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d111      	bne.n	80026c2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3361      	adds	r3, #97	; 0x61
 80026ac:	2206      	movs	r2, #6
 80026ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f005 f883 	bl	80077c6 <USB_HC_Halt>
 80026c0:	e044      	b.n	800274c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	202c      	movs	r0, #44	; 0x2c
 80026da:	fb00 f303 	mul.w	r3, r0, r3
 80026de:	440b      	add	r3, r1
 80026e0:	335c      	adds	r3, #92	; 0x5c
 80026e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	335c      	adds	r3, #92	; 0x5c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d920      	bls.n	800273a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	335c      	adds	r3, #92	; 0x5c
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	; 0x60
 8002718:	2204      	movs	r2, #4
 800271a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	b2d9      	uxtb	r1, r3
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	202c      	movs	r0, #44	; 0x2c
 8002726:	fb00 f303 	mul.w	r3, r0, r3
 800272a:	4413      	add	r3, r2
 800272c:	3360      	adds	r3, #96	; 0x60
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f007 fe6a 	bl	800a40c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002738:	e008      	b.n	800274c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	6093      	str	r3, [r2, #8]
}
 800275e:	e172      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d11b      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	2208      	movs	r2, #8
 8002788:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f005 f816 	bl	80077c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ac:	6093      	str	r3, [r2, #8]
}
 80027ae:	e14a      	b.n	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 813f 	bne.w	8002a46 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	; 0x61
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d17d      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3360      	adds	r3, #96	; 0x60
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	333f      	adds	r3, #63	; 0x3f
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d00a      	beq.n	8002818 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333f      	adds	r3, #63	; 0x3f
 8002810:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002812:	2b03      	cmp	r3, #3
 8002814:	f040 8100 	bne.w	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d113      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3355      	adds	r3, #85	; 0x55
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2d8      	uxtb	r0, r3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3355      	adds	r3, #85	; 0x55
 8002844:	4602      	mov	r2, r0
 8002846:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 80e3 	bne.w	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	334c      	adds	r3, #76	; 0x4c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80d8 	beq.w	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	334c      	adds	r3, #76	; 0x4c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	202c      	movs	r0, #44	; 0x2c
 800287e:	fb00 f202 	mul.w	r2, r0, r2
 8002882:	440a      	add	r2, r1
 8002884:	3240      	adds	r2, #64	; 0x40
 8002886:	8812      	ldrh	r2, [r2, #0]
 8002888:	4413      	add	r3, r2
 800288a:	3b01      	subs	r3, #1
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	202c      	movs	r0, #44	; 0x2c
 8002892:	fb00 f202 	mul.w	r2, r0, r2
 8002896:	440a      	add	r2, r1
 8002898:	3240      	adds	r2, #64	; 0x40
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80b5 	beq.w	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3355      	adds	r3, #85	; 0x55
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2d8      	uxtb	r0, r3
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3355      	adds	r3, #85	; 0x55
 80028d2:	4602      	mov	r2, r0
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e09f      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d109      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3360      	adds	r3, #96	; 0x60
 80028fa:	2202      	movs	r2, #2
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e08b      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d109      	bne.n	8002928 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e077      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d109      	bne.n	8002950 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	2205      	movs	r2, #5
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e063      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d009      	beq.n	8002978 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002974:	2b08      	cmp	r3, #8
 8002976:	d14f      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	335c      	adds	r3, #92	; 0x5c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f303 	mul.w	r3, r0, r3
 8002994:	440b      	add	r3, r1
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d912      	bls.n	80029d4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	2204      	movs	r2, #4
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e021      	b.n	8002a18 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2202      	movs	r2, #2
 80029e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a04:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2302      	movs	r3, #2
 8002a28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	202c      	movs	r0, #44	; 0x2c
 8002a34:	fb00 f303 	mul.w	r3, r0, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3360      	adds	r3, #96	; 0x60
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f007 fce3 	bl	800a40c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	0c5b      	lsrs	r3, r3, #17
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d004      	beq.n	8002a94 <HCD_RXQLVL_IRQHandler+0x46>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	f000 80a9 	beq.w	8002be4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a92:	e0aa      	b.n	8002bea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80a6 	beq.w	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3344      	adds	r3, #68	; 0x44
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 809b 	beq.w	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3350      	adds	r3, #80	; 0x50
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	441a      	add	r2, r3
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	202c      	movs	r0, #44	; 0x2c
 8002acc:	fb00 f303 	mul.w	r3, r0, r3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334c      	adds	r3, #76	; 0x4c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d87a      	bhi.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f004 f9be 	bl	8006e74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	202c      	movs	r0, #44	; 0x2c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	440b      	add	r3, r1
 8002b18:	3344      	adds	r3, #68	; 0x44
 8002b1a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3350      	adds	r3, #80	; 0x50
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	441a      	add	r2, r3
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	202c      	movs	r0, #44	; 0x2c
 8002b36:	fb00 f303 	mul.w	r3, r0, r3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3350      	adds	r3, #80	; 0x50
 8002b3e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	0cdb      	lsrs	r3, r3, #19
 8002b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b54:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3340      	adds	r3, #64	; 0x40
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d13c      	bne.n	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d039      	beq.n	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b8a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b92:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3354      	adds	r3, #84	; 0x54
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2d8      	uxtb	r0, r3
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3354      	adds	r3, #84	; 0x54
 8002bca:	4602      	mov	r2, r0
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	e00b      	b.n	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3360      	adds	r3, #96	; 0x60
 8002bde:	2204      	movs	r2, #4
 8002be0:	701a      	strb	r2, [r3, #0]
      break;
 8002be2:	e001      	b.n	8002be8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002be8:	bf00      	nop
  }
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	; 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c1e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d10b      	bne.n	8002c42 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f007 fbcd 	bl	800a3d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d132      	bne.n	8002cb2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d126      	bne.n	8002cac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d113      	bne.n	8002c8e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c70:	d106      	bne.n	8002c80 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2102      	movs	r1, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 fa69 	bl	8007150 <USB_InitFSLSPClkSel>
 8002c7e:	e011      	b.n	8002ca4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 fa62 	bl	8007150 <USB_InitFSLSPClkSel>
 8002c8c:	e00a      	b.n	8002ca4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d106      	bne.n	8002ca4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ca2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f007 fbbf 	bl	800a428 <HAL_HCD_PortEnabled_Callback>
 8002caa:	e002      	b.n	8002cb2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f007 fbc9 	bl	800a444 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d103      	bne.n	8002cc4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f043 0320 	orr.w	r3, r3, #32
 8002cc2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e12b      	b.n	8002f42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fd2c 	bl	800075c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f003 fd4c 	bl	80067d8 <HAL_RCC_GetPCLK1Freq>
 8002d40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a81      	ldr	r2, [pc, #516]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d807      	bhi.n	8002d5c <HAL_I2C_Init+0x84>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_I2C_Init+0x278>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e006      	b.n	8002d6a <HAL_I2C_Init+0x92>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a7d      	ldr	r2, [pc, #500]	; (8002f54 <HAL_I2C_Init+0x27c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	bf94      	ite	ls
 8002d64:	2301      	movls	r3, #1
 8002d66:	2300      	movhi	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0e7      	b.n	8002f42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a78      	ldr	r2, [pc, #480]	; (8002f58 <HAL_I2C_Init+0x280>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0c9b      	lsrs	r3, r3, #18
 8002d7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d802      	bhi.n	8002dac <HAL_I2C_Init+0xd4>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	e009      	b.n	8002dc0 <HAL_I2C_Init+0xe8>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_I2C_Init+0x284>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	495c      	ldr	r1, [pc, #368]	; (8002f4c <HAL_I2C_Init+0x274>)
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d819      	bhi.n	8002e14 <HAL_I2C_Init+0x13c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e59      	subs	r1, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df4:	400b      	ands	r3, r1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_I2C_Init+0x138>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1e59      	subs	r1, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	e051      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e04f      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <HAL_I2C_Init+0x168>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e012      	b.n	8002e66 <HAL_I2C_Init+0x18e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Init+0x196>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <HAL_I2C_Init+0x1bc>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e58      	subs	r0, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Init+0x1dc>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6809      	ldr	r1, [r1, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6911      	ldr	r1, [r2, #16]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	001e847f 	.word	0x001e847f
 8002f54:	003d08ff 	.word	0x003d08ff
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
 8002f70:	4613      	mov	r3, r2
 8002f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7fd ff7e 	bl	8000e74 <HAL_GetTick>
 8002f78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 80e0 	bne.w	8003148 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2319      	movs	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4970      	ldr	r1, [pc, #448]	; (8003154 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f002 f8e6 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0d3      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x50>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0cc      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d007      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2221      	movs	r2, #33	; 0x21
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	893a      	ldrh	r2, [r7, #8]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_I2C_Master_Transmit+0x1f8>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f001 fea8 	bl	8004d74 <I2C_MasterRequestWrite>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e08d      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003044:	e066      	b.n	8003114 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f002 f960 	bl	8005310 <I2C_WaitOnTXEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b04      	cmp	r3, #4
 800305c:	d107      	bne.n	800306e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e06b      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11b      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x188>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f002 f950 	bl	8005392 <I2C_WaitOnBTFFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d107      	bne.n	8003110 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e01a      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d194      	bne.n	8003046 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	e000      	b.n	800314a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000

0800315c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	461a      	mov	r2, r3
 8003168:	460b      	mov	r3, r1
 800316a:	817b      	strh	r3, [r7, #10]
 800316c:	4613      	mov	r3, r2
 800316e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7fd fe80 	bl	8000e74 <HAL_GetTick>
 8003174:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	f040 820b 	bne.w	800359a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2319      	movs	r3, #25
 800318a:	2201      	movs	r2, #1
 800318c:	497c      	ldr	r1, [pc, #496]	; (8003380 <HAL_I2C_Master_Receive+0x224>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f001 ffe8 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	e1fe      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_I2C_Master_Receive+0x50>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e1f7      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d007      	beq.n	80031d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2222      	movs	r2, #34	; 0x22
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2210      	movs	r2, #16
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	893a      	ldrh	r2, [r7, #8]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a5c      	ldr	r2, [pc, #368]	; (8003384 <HAL_I2C_Master_Receive+0x228>)
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f001 fe2c 	bl	8004e78 <I2C_MasterRequestRead>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1b8      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e18c      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b01      	cmp	r3, #1
 8003260:	d11b      	bne.n	800329a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e16c      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d11b      	bne.n	80032da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	e14c      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003300:	e138      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	2b03      	cmp	r3, #3
 8003308:	f200 80f1 	bhi.w	80034ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	2b01      	cmp	r3, #1
 8003312:	d123      	bne.n	800335c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f002 f8ad 	bl	8005478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e139      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800335a:	e10b      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b02      	cmp	r3, #2
 8003362:	d14e      	bne.n	8003402 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	4906      	ldr	r1, [pc, #24]	; (8003388 <HAL_I2C_Master_Receive+0x22c>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f001 fef8 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e10e      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000
 8003388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003400:	e0b8      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2200      	movs	r2, #0
 800340a:	4966      	ldr	r1, [pc, #408]	; (80035a4 <HAL_I2C_Master_Receive+0x448>)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f001 fea9 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0bf      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	2200      	movs	r2, #0
 8003466:	494f      	ldr	r1, [pc, #316]	; (80035a4 <HAL_I2C_Master_Receive+0x448>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f001 fe7b 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e091      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ec:	e042      	b.n	8003574 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f001 ffc0 	bl	8005478 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e04c      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d118      	bne.n	8003574 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f aec2 	bne.w	8003302 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	00010004 	.word	0x00010004

080035a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d003      	beq.n	80035e0 <HAL_I2C_EV_IRQHandler+0x38>
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	f040 80c1 	bne.w	8003762 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_I2C_EV_IRQHandler+0x6e>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003600:	d003      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x62>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003608:	d101      	bne.n	800360e <HAL_I2C_EV_IRQHandler+0x66>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_I2C_EV_IRQHandler+0x68>
 800360e:	2300      	movs	r3, #0
 8003610:	2b01      	cmp	r3, #1
 8003612:	f000 8132 	beq.w	800387a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x92>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	0a5b      	lsrs	r3, r3, #9
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 ffa8 	bl	8005582 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd83 	bl	800413e <I2C_Master_SB>
 8003638:	e092      	b.n	8003760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08db      	lsrs	r3, r3, #3
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0xb2>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	0a5b      	lsrs	r3, r3, #9
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fdf9 	bl	800424a <I2C_Master_ADD10>
 8003658:	e082      	b.n	8003760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_I2C_EV_IRQHandler+0xd2>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	0a5b      	lsrs	r3, r3, #9
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fe13 	bl	800429e <I2C_Master_ADDR>
 8003678:	e072      	b.n	8003760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03b      	beq.n	80036fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003694:	f000 80f3 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	09db      	lsrs	r3, r3, #7
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f9f3 	bl	8003aa8 <I2C_MasterTransmit_TXE>
 80036c2:	e04d      	b.n	8003760 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80d6 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	0a5b      	lsrs	r3, r3, #9
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80cf 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	2b21      	cmp	r3, #33	; 0x21
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa7a 	bl	8003be0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ec:	e0c7      	b.n	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	f040 80c4 	bne.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fae8 	bl	8003ccc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fc:	e0bf      	b.n	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370c:	f000 80b7 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00f      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x194>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x194>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fb5d 	bl	8003df4 <I2C_MasterReceive_RXNE>
 800373a:	e011      	b.n	8003760 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 809a 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0a5b      	lsrs	r3, r3, #9
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8093 	beq.w	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fc06 	bl	8003f6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375e:	e08e      	b.n	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003760:	e08d      	b.n	800387e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e007      	b.n	8003784 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	0a5b      	lsrs	r3, r3, #9
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 ffc4 	bl	800473c <I2C_Slave_ADDR>
 80037b4:	e066      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	0a5b      	lsrs	r3, r3, #9
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fffe 	bl	80047d0 <I2C_Slave_STOPF>
 80037d4:	e056      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	2b21      	cmp	r3, #33	; 0x21
 80037da:	d002      	beq.n	80037e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	2b29      	cmp	r3, #41	; 0x29
 80037e0:	d125      	bne.n	800382e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	09db      	lsrs	r3, r3, #7
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00f      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x266>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	0a9b      	lsrs	r3, r3, #10
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x266>
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 feda 	bl	80045c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380c:	e039      	b.n	8003882 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d033      	beq.n	8003882 <HAL_I2C_EV_IRQHandler+0x2da>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	0a5b      	lsrs	r3, r3, #9
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02d      	beq.n	8003882 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 ff07 	bl	800463a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382c:	e029      	b.n	8003882 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00f      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0x2b2>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	0a9b      	lsrs	r3, r3, #10
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 ff12 	bl	800467c <I2C_SlaveReceive_RXNE>
 8003858:	e014      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	0a5b      	lsrs	r3, r3, #9
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 ff40 	bl	80046f8 <I2C_SlaveReceive_BTF>
 8003878:	e004      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003882:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08a      	sub	sp, #40	; 0x28
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	0a5b      	lsrs	r3, r3, #9
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00e      	beq.n	8003902 <HAL_I2C_ER_IRQHandler+0x78>
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003900:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	0a9b      	lsrs	r3, r3, #10
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03f      	beq.n	800398e <HAL_I2C_ER_IRQHandler+0x104>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d039      	beq.n	800398e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800391a:	7efb      	ldrb	r3, [r7, #27]
 800391c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003934:	7ebb      	ldrb	r3, [r7, #26]
 8003936:	2b20      	cmp	r3, #32
 8003938:	d112      	bne.n	8003960 <HAL_I2C_ER_IRQHandler+0xd6>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10f      	bne.n	8003960 <HAL_I2C_ER_IRQHandler+0xd6>
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b21      	cmp	r3, #33	; 0x21
 8003944:	d008      	beq.n	8003958 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b29      	cmp	r3, #41	; 0x29
 800394a:	d005      	beq.n	8003958 <HAL_I2C_ER_IRQHandler+0xce>
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	2b28      	cmp	r3, #40	; 0x28
 8003950:	d106      	bne.n	8003960 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b21      	cmp	r3, #33	; 0x21
 8003956:	d103      	bne.n	8003960 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f001 f869 	bl	8004a30 <I2C_Slave_AF>
 800395e:	e016      	b.n	800398e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003968:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003972:	7efb      	ldrb	r3, [r7, #27]
 8003974:	2b10      	cmp	r3, #16
 8003976:	d002      	beq.n	800397e <HAL_I2C_ER_IRQHandler+0xf4>
 8003978:	7efb      	ldrb	r3, [r7, #27]
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d107      	bne.n	800398e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	0adb      	lsrs	r3, r3, #11
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80039b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f001 f8a0 	bl	8004b10 <I2C_ITError>
  }
}
 80039d0:	bf00      	nop
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003abe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d150      	bne.n	8003b70 <I2C_MasterTransmit_TXE+0xc8>
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b21      	cmp	r3, #33	; 0x21
 8003ad2:	d14d      	bne.n	8003b70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d01d      	beq.n	8003b16 <I2C_MasterTransmit_TXE+0x6e>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d01a      	beq.n	8003b16 <I2C_MasterTransmit_TXE+0x6e>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae6:	d016      	beq.n	8003b16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2211      	movs	r2, #17
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff62 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b14:	e060      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d107      	bne.n	8003b60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff7d 	bl	8003a58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b5e:	e03b      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff35 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b6e:	e033      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b21      	cmp	r3, #33	; 0x21
 8003b74:	d005      	beq.n	8003b82 <I2C_MasterTransmit_TXE+0xda>
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d12d      	bne.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b22      	cmp	r3, #34	; 0x22
 8003b80:	d12a      	bne.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b9c:	e01c      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d103      	bne.n	8003bb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f88e 	bl	8003ccc <I2C_MemoryTransmit_TXE_BTF>
}
 8003bb0:	e012      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bd6:	e7ff      	b.n	8003bd8 <I2C_MasterTransmit_TXE+0x130>
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b21      	cmp	r3, #33	; 0x21
 8003bf8:	d164      	bne.n	8003cc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c28:	e04c      	b.n	8003cc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d01d      	beq.n	8003c6c <I2C_MasterTransmit_BTF+0x8c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d01a      	beq.n	8003c6c <I2C_MasterTransmit_BTF+0x8c>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c3c:	d016      	beq.n	8003c6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2211      	movs	r2, #17
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff feb7 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
}
 8003c6a:	e02b      	b.n	8003cc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d107      	bne.n	8003cb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fed2 	bl	8003a58 <HAL_I2C_MemTxCpltCallback>
}
 8003cb4:	e006      	b.n	8003cc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fe8a 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10b      	bne.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	1c9a      	adds	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003d02:	e073      	b.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	121b      	asrs	r3, r3, #8
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d1e:	e065      	b.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d10b      	bne.n	8003d40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d3e:	e055      	b.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d151      	bne.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b22      	cmp	r3, #34	; 0x22
 8003d4c:	d10d      	bne.n	8003d6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d68:	e040      	b.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b21      	cmp	r3, #33	; 0x21
 8003d78:	d112      	bne.n	8003da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d9e:	e025      	b.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d120      	bne.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b21      	cmp	r3, #33	; 0x21
 8003dae:	d11d      	bne.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fe36 	bl	8003a58 <HAL_I2C_MemTxCpltCallback>
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b22      	cmp	r3, #34	; 0x22
 8003e06:	f040 80ac 	bne.w	8003f62 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d921      	bls.n	8003e5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	f040 808c 	bne.w	8003f62 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e5a:	e082      	b.n	8003f62 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d075      	beq.n	8003f50 <I2C_MasterReceive_RXNE+0x15c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d002      	beq.n	8003e70 <I2C_MasterReceive_RXNE+0x7c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d16f      	bne.n	8003f50 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f001 facf 	bl	8005414 <I2C_WaitOnSTOPRequestThroughIT>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d142      	bne.n	8003f02 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10a      	bne.n	8003eec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fdc1 	bl	8003a6c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eea:	e03a      	b.n	8003f62 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2212      	movs	r2, #18
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fd76 	bl	80039ec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f00:	e02f      	b.n	8003f62 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff fd99 	bl	8003a80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f4e:	e008      	b.n	8003f62 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5e:	605a      	str	r2, [r3, #4]
}
 8003f60:	e7ff      	b.n	8003f62 <I2C_MasterReceive_RXNE+0x16e>
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d11b      	bne.n	8003fba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fb8:	e0bd      	b.n	8004136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d129      	bne.n	8004018 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d00a      	beq.n	8003ff0 <I2C_MasterReceive_BTF+0x86>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d007      	beq.n	8003ff0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004016:	e08e      	b.n	8004136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d176      	bne.n	8004110 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d002      	beq.n	800402e <I2C_MasterReceive_BTF+0xc4>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b10      	cmp	r3, #16
 800402c:	d108      	bne.n	8004040 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e019      	b.n	8004074 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d002      	beq.n	800404c <I2C_MasterReceive_BTF+0xe2>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d108      	bne.n	800405e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e00a      	b.n	8004074 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b10      	cmp	r3, #16
 8004062:	d007      	beq.n	8004074 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d10a      	bne.n	80040fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fcba 	bl	8003a6c <HAL_I2C_MemRxCpltCallback>
}
 80040f8:	e01d      	b.n	8004136 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2212      	movs	r2, #18
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fc6f 	bl	80039ec <HAL_I2C_MasterRxCpltCallback>
}
 800410e:	e012      	b.n	8004136 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d117      	bne.n	8004182 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800416a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800416c:	e067      	b.n	800423e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
}
 8004180:	e05d      	b.n	800423e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418a:	d133      	bne.n	80041f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b21      	cmp	r3, #33	; 0x21
 8004196:	d109      	bne.n	80041ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a8:	611a      	str	r2, [r3, #16]
 80041aa:	e008      	b.n	80041be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <I2C_Master_SB+0x92>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d032      	beq.n	800423e <I2C_Master_SB+0x100>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02d      	beq.n	800423e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	605a      	str	r2, [r3, #4]
}
 80041f2:	e024      	b.n	800423e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10e      	bne.n	800421a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	b29b      	uxth	r3, r3
 8004202:	11db      	asrs	r3, r3, #7
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0306 	and.w	r3, r3, #6
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f063 030f 	orn	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]
}
 8004218:	e011      	b.n	800423e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10d      	bne.n	800423e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	b29b      	uxth	r3, r3
 8004228:	11db      	asrs	r3, r3, #7
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 0306 	and.w	r3, r3, #6
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f063 030e 	orn	r3, r3, #14
 8004236:	b2da      	uxtb	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	b2da      	uxtb	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <I2C_Master_ADD10+0x26>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d108      	bne.n	8004282 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00c      	beq.n	8004292 <I2C_Master_ADD10+0x48>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004290:	605a      	str	r2, [r3, #4]
  }
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800429e:	b480      	push	{r7}
 80042a0:	b091      	sub	sp, #68	; 0x44
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b22      	cmp	r3, #34	; 0x22
 80042c6:	f040 8169 	bne.w	800459c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <I2C_Master_ADDR+0x54>
 80042d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d10b      	bne.n	80042f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	e160      	b.n	80045b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11d      	bne.n	8004336 <I2C_Master_ADDR+0x98>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004302:	d118      	bne.n	8004336 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2300      	movs	r3, #0
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004328:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
 8004334:	e13e      	b.n	80045b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d113      	bne.n	8004368 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004340:	2300      	movs	r3, #0
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e115      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 808a 	bne.w	8004488 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800437a:	d137      	bne.n	80043ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d113      	bne.n	80043c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	e0e7      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c4:	2300      	movs	r3, #0
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	623b      	str	r3, [r7, #32]
 80043d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e0d3      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d02e      	beq.n	8004450 <I2C_Master_ADDR+0x1b2>
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d02b      	beq.n	8004450 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	2b12      	cmp	r3, #18
 80043fc:	d102      	bne.n	8004404 <I2C_Master_ADDR+0x166>
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b01      	cmp	r3, #1
 8004402:	d125      	bne.n	8004450 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2b04      	cmp	r3, #4
 8004408:	d00e      	beq.n	8004428 <I2C_Master_ADDR+0x18a>
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	2b02      	cmp	r3, #2
 800440e:	d00b      	beq.n	8004428 <I2C_Master_ADDR+0x18a>
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	2b10      	cmp	r3, #16
 8004414:	d008      	beq.n	8004428 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e007      	b.n	8004438 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	e0a1      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e085      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d14d      	bne.n	800452e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	2b04      	cmp	r3, #4
 8004496:	d016      	beq.n	80044c6 <I2C_Master_ADDR+0x228>
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b02      	cmp	r3, #2
 800449c:	d013      	beq.n	80044c6 <I2C_Master_ADDR+0x228>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d010      	beq.n	80044c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e007      	b.n	80044d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e4:	d117      	bne.n	8004516 <I2C_Master_ADDR+0x278>
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ec:	d00b      	beq.n	8004506 <I2C_Master_ADDR+0x268>
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d008      	beq.n	8004506 <I2C_Master_ADDR+0x268>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d005      	beq.n	8004506 <I2C_Master_ADDR+0x268>
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d002      	beq.n	8004506 <I2C_Master_ADDR+0x268>
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	2b20      	cmp	r3, #32
 8004504:	d107      	bne.n	8004516 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004514:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e032      	b.n	8004594 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d117      	bne.n	800457e <I2C_Master_ADDR+0x2e0>
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004554:	d00b      	beq.n	800456e <I2C_Master_ADDR+0x2d0>
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	2b01      	cmp	r3, #1
 800455a:	d008      	beq.n	800456e <I2C_Master_ADDR+0x2d0>
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	2b08      	cmp	r3, #8
 8004560:	d005      	beq.n	800456e <I2C_Master_ADDR+0x2d0>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2b10      	cmp	r3, #16
 8004566:	d002      	beq.n	800456e <I2C_Master_ADDR+0x2d0>
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b20      	cmp	r3, #32
 800456c:	d107      	bne.n	800457e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800459a:	e00b      	b.n	80045b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	e7ff      	b.n	80045b4 <I2C_Master_ADDR+0x316>
 80045b4:	bf00      	nop
 80045b6:	3744      	adds	r7, #68	; 0x44
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02b      	beq.n	8004632 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d114      	bne.n	8004632 <I2C_SlaveTransmit_TXE+0x72>
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b29      	cmp	r3, #41	; 0x29
 800460c:	d111      	bne.n	8004632 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2221      	movs	r2, #33	; 0x21
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2228      	movs	r2, #40	; 0x28
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff f9e7 	bl	8003a00 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d011      	beq.n	8004670 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02c      	beq.n	80046f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d114      	bne.n	80046f0 <I2C_SlaveReceive_RXNE+0x74>
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ca:	d111      	bne.n	80046f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2222      	movs	r2, #34	; 0x22
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2228      	movs	r2, #40	; 0x28
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff f992 	bl	8003a14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004756:	2b28      	cmp	r3, #40	; 0x28
 8004758:	d127      	bne.n	80047aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	09db      	lsrs	r3, r3, #7
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	81bb      	strh	r3, [r7, #12]
 800478c:	e002      	b.n	8004794 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800479c:	89ba      	ldrh	r2, [r7, #12]
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff f940 	bl	8003a28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047a8:	e00e      	b.n	80047c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482c:	d172      	bne.n	8004914 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b22      	cmp	r3, #34	; 0x22
 8004832:	d002      	beq.n	800483a <I2C_Slave_STOPF+0x6a>
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	d135      	bne.n	80048a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	4618      	mov	r0, r3
 8004874:	f7fc fc61 	bl	800113a <HAL_DMA_GetState>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d049      	beq.n	8004912 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	4a69      	ldr	r2, [pc, #420]	; (8004a28 <I2C_Slave_STOPF+0x258>)
 8004884:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	4618      	mov	r0, r3
 800488c:	f7fc fc33 	bl	80010f6 <HAL_DMA_Abort_IT>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03d      	beq.n	8004912 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a0:	4610      	mov	r0, r2
 80048a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048a4:	e035      	b.n	8004912 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0204 	orr.w	r2, r3, #4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fc2b 	bl	800113a <HAL_DMA_GetState>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d014      	beq.n	8004914 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <I2C_Slave_STOPF+0x258>)
 80048f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc fbfd 	bl	80010f6 <HAL_DMA_Abort_IT>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800490c:	4610      	mov	r0, r2
 800490e:	4798      	blx	r3
 8004910:	e000      	b.n	8004914 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004912:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d03e      	beq.n	800499c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d112      	bne.n	8004952 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d112      	bne.n	8004986 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8b3 	bl	8004b10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049aa:	e039      	b.n	8004a20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b2a      	cmp	r3, #42	; 0x2a
 80049b0:	d109      	bne.n	80049c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2228      	movs	r2, #40	; 0x28
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff f827 	bl	8003a14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b28      	cmp	r3, #40	; 0x28
 80049d0:	d111      	bne.n	80049f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <I2C_Slave_STOPF+0x25c>)
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff f828 	bl	8003a44 <HAL_I2C_ListenCpltCallback>
}
 80049f4:	e014      	b.n	8004a20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	d002      	beq.n	8004a04 <I2C_Slave_STOPF+0x234>
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b22      	cmp	r3, #34	; 0x22
 8004a02:	d10d      	bne.n	8004a20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe fffa 	bl	8003a14 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08005015 	.word	0x08005015
 8004a2c:	ffff0000 	.word	0xffff0000

08004a30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d002      	beq.n	8004a52 <I2C_Slave_AF+0x22>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d129      	bne.n	8004aa6 <I2C_Slave_AF+0x76>
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b28      	cmp	r3, #40	; 0x28
 8004a56:	d126      	bne.n	8004aa6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <I2C_Slave_AF+0xdc>)
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fe ffd0 	bl	8003a44 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004aa4:	e02e      	b.n	8004b04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b21      	cmp	r3, #33	; 0x21
 8004aaa:	d126      	bne.n	8004afa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <I2C_Slave_AF+0xdc>)
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2221      	movs	r2, #33	; 0x21
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ad6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fe ff84 	bl	8003a00 <HAL_I2C_SlaveTxCpltCallback>
}
 8004af8:	e004      	b.n	8004b04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b02:	615a      	str	r2, [r3, #20]
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	ffff0000 	.word	0xffff0000

08004b10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d002      	beq.n	8004b34 <I2C_ITError+0x24>
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d10a      	bne.n	8004b4a <I2C_ITError+0x3a>
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b22      	cmp	r3, #34	; 0x22
 8004b38:	d107      	bne.n	8004b4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b50:	2b28      	cmp	r3, #40	; 0x28
 8004b52:	d107      	bne.n	8004b64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2228      	movs	r2, #40	; 0x28
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b62:	e015      	b.n	8004b90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b72:	d00a      	beq.n	8004b8a <I2C_ITError+0x7a>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b60      	cmp	r3, #96	; 0x60
 8004b78:	d007      	beq.n	8004b8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9e:	d162      	bne.n	8004c66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d020      	beq.n	8004c00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	4a6a      	ldr	r2, [pc, #424]	; (8004d6c <I2C_ITError+0x25c>)
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fa93 	bl	80010f6 <HAL_DMA_Abort_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8089 	beq.w	8004cea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4798      	blx	r3
 8004bfe:	e074      	b.n	8004cea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	4a59      	ldr	r2, [pc, #356]	; (8004d6c <I2C_ITError+0x25c>)
 8004c06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc fa72 	bl	80010f6 <HAL_DMA_Abort_IT>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d068      	beq.n	8004cea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d10b      	bne.n	8004c3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
 8004c64:	e041      	b.n	8004cea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b60      	cmp	r3, #96	; 0x60
 8004c70:	d125      	bne.n	8004cbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d10b      	bne.n	8004ca6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fe feec 	bl	8003a94 <HAL_I2C_AbortCpltCallback>
 8004cbc:	e015      	b.n	8004cea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d10b      	bne.n	8004ce4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fe fecb 	bl	8003a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10e      	bne.n	8004d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d113      	bne.n	8004d64 <I2C_ITError+0x254>
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b28      	cmp	r3, #40	; 0x28
 8004d40:	d110      	bne.n	8004d64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <I2C_ITError+0x260>)
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fe fe70 	bl	8003a44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	08005015 	.word	0x08005015
 8004d70:	ffff0000 	.word	0xffff0000

08004d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d006      	beq.n	8004d9e <I2C_MasterRequestWrite+0x2a>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d003      	beq.n	8004d9e <I2C_MasterRequestWrite+0x2a>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d9c:	d108      	bne.n	8004db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e00b      	b.n	8004dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b12      	cmp	r3, #18
 8004db6:	d107      	bne.n	8004dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f9c5 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00d      	beq.n	8004dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d103      	bne.n	8004df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e035      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e04:	d108      	bne.n	8004e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e14:	611a      	str	r2, [r3, #16]
 8004e16:	e01b      	b.n	8004e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e18:	897b      	ldrh	r3, [r7, #10]
 8004e1a:	11db      	asrs	r3, r3, #7
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0306 	and.w	r3, r3, #6
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f063 030f 	orn	r3, r3, #15
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	490e      	ldr	r1, [pc, #56]	; (8004e70 <I2C_MasterRequestWrite+0xfc>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f9eb 	bl	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e010      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e46:	897b      	ldrh	r3, [r7, #10]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4907      	ldr	r1, [pc, #28]	; (8004e74 <I2C_MasterRequestWrite+0x100>)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f9db 	bl	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00010008 	.word	0x00010008
 8004e74:	00010002 	.word	0x00010002

08004e78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	460b      	mov	r3, r1
 8004e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d006      	beq.n	8004eb2 <I2C_MasterRequestRead+0x3a>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <I2C_MasterRequestRead+0x3a>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eb0:	d108      	bne.n	8004ec4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00b      	b.n	8004edc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b11      	cmp	r3, #17
 8004eca:	d107      	bne.n	8004edc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f93b 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f02:	d103      	bne.n	8004f0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e079      	b.n	8005004 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f18:	d108      	bne.n	8004f2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	611a      	str	r2, [r3, #16]
 8004f2a:	e05f      	b.n	8004fec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f2c:	897b      	ldrh	r3, [r7, #10]
 8004f2e:	11db      	asrs	r3, r3, #7
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f063 030f 	orn	r3, r3, #15
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4930      	ldr	r1, [pc, #192]	; (800500c <I2C_MasterRequestRead+0x194>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f961 	bl	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e054      	b.n	8005004 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4929      	ldr	r1, [pc, #164]	; (8005010 <I2C_MasterRequestRead+0x198>)
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f951 	bl	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e044      	b.n	8005004 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f8d9 	bl	8005164 <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc6:	d103      	bne.n	8004fd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e017      	b.n	8005004 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fd4:	897b      	ldrh	r3, [r7, #10]
 8004fd6:	11db      	asrs	r3, r3, #7
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f003 0306 	and.w	r3, r3, #6
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f063 030e 	orn	r3, r3, #14
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4907      	ldr	r1, [pc, #28]	; (8005010 <I2C_MasterRequestRead+0x198>)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f90d 	bl	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	00010008 	.word	0x00010008
 8005010:	00010002 	.word	0x00010002

08005014 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800502e:	4b4b      	ldr	r3, [pc, #300]	; (800515c <I2C_DMAAbort+0x148>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	4a4a      	ldr	r2, [pc, #296]	; (8005160 <I2C_DMAAbort+0x14c>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a1a      	lsrs	r2, r3, #8
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00da      	lsls	r2, r3, #3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800505a:	e00a      	b.n	8005072 <I2C_DMAAbort+0x5e>
    }
    count--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005070:	d0ea      	beq.n	8005048 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	2200      	movs	r2, #0
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	2200      	movs	r2, #0
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	2200      	movs	r2, #0
 80050b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	2200      	movs	r2, #0
 80050c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b60      	cmp	r3, #96	; 0x60
 80050e2:	d10e      	bne.n	8005102 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7fe fcca 	bl	8003a94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005100:	e027      	b.n	8005152 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005108:	2b28      	cmp	r3, #40	; 0x28
 800510a:	d117      	bne.n	800513c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2228      	movs	r2, #40	; 0x28
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800513a:	e007      	b.n	800514c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800514c:	6978      	ldr	r0, [r7, #20]
 800514e:	f7fe fc97 	bl	8003a80 <HAL_I2C_ErrorCallback>
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000000 	.word	0x20000000
 8005160:	14f8b589 	.word	0x14f8b589

08005164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005174:	e025      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d021      	beq.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fb fe79 	bl	8000e74 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e023      	b.n	800520a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d10d      	bne.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	43da      	mvns	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4013      	ands	r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	e00c      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d0b6      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005220:	e051      	b.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d123      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800524a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0204 	orr.w	r2, r3, #4
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e046      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d021      	beq.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fb fdf7 	bl	8000e74 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e020      	b.n	8005308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d10c      	bne.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	43da      	mvns	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bf14      	ite	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	2300      	moveq	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e00b      	b.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	43da      	mvns	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4013      	ands	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d18d      	bne.n	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800531c:	e02d      	b.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f900 	bl	8005524 <I2C_IsAcknowledgeFailed>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e02d      	b.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d021      	beq.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fb fd9d 	bl	8000e74 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e007      	b.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d1ca      	bne.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800539e:	e02d      	b.n	80053fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f8bf 	bl	8005524 <I2C_IsAcknowledgeFailed>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e02d      	b.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d021      	beq.n	80053fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b8:	f7fb fd5c 	bl	8000e74 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d116      	bne.n	80053fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e007      	b.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d1ca      	bne.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	4a13      	ldr	r2, [pc, #76]	; (8005474 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	0a1a      	lsrs	r2, r3, #8
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b01      	subs	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e008      	b.n	8005464 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d0e9      	beq.n	8005436 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000000 	.word	0x20000000
 8005474:	14f8b589 	.word	0x14f8b589

08005478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005484:	e042      	b.n	800550c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	d119      	bne.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0210 	mvn.w	r2, #16
 800549c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e029      	b.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fb fcd4 	bl	8000e74 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d1b5      	bne.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d11b      	bne.n	8005574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	f043 0204 	orr.w	r2, r3, #4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005592:	d103      	bne.n	800559c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800559a:	e007      	b.n	80055ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055a4:	d102      	bne.n	80055ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e128      	b.n	800581c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a90      	ldr	r2, [pc, #576]	; (8005824 <HAL_I2S_Init+0x26c>)
 80055e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fb f977 	bl	80008d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005600:	f023 030f 	bic.w	r3, r3, #15
 8005604:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2202      	movs	r2, #2
 800560c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d060      	beq.n	80056d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800561e:	2310      	movs	r3, #16
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e001      	b.n	8005628 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005624:	2320      	movs	r3, #32
 8005626:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b20      	cmp	r3, #32
 800562e:	d802      	bhi.n	8005636 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005636:	2001      	movs	r0, #1
 8005638:	f001 f9c4 	bl	80069c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800563c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005646:	d125      	bne.n	8005694 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	fbb2 f2f3 	udiv	r2, r2, r3
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	461a      	mov	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	3305      	adds	r3, #5
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e01f      	b.n	80056b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	fbb2 f2f3 	udiv	r2, r2, r3
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	3305      	adds	r3, #5
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	e00e      	b.n	80056b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	fbb2 f2f3 	udiv	r2, r2, r3
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	3305      	adds	r3, #5
 80056b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4a5c      	ldr	r2, [pc, #368]	; (8005828 <HAL_I2S_Init+0x270>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e003      	b.n	80056e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80056d8:	2302      	movs	r3, #2
 80056da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d902      	bls.n	80056ec <HAL_I2S_Init+0x134>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	2bff      	cmp	r3, #255	; 0xff
 80056ea:	d907      	bls.n	80056fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f043 0210 	orr.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e08f      	b.n	800581c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	ea42 0103 	orr.w	r1, r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	430a      	orrs	r2, r1
 800570e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800571a:	f023 030f 	bic.w	r3, r3, #15
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6851      	ldr	r1, [r2, #4]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	4311      	orrs	r1, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68d2      	ldr	r2, [r2, #12]
 800572c:	4311      	orrs	r1, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6992      	ldr	r2, [r2, #24]
 8005732:	430a      	orrs	r2, r1
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d161      	bne.n	800580c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a38      	ldr	r2, [pc, #224]	; (800582c <HAL_I2S_Init+0x274>)
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a37      	ldr	r2, [pc, #220]	; (8005830 <HAL_I2S_Init+0x278>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_I2S_Init+0x1a4>
 8005758:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_I2S_Init+0x27c>)
 800575a:	e001      	b.n	8005760 <HAL_I2S_Init+0x1a8>
 800575c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	4932      	ldr	r1, [pc, #200]	; (8005830 <HAL_I2S_Init+0x278>)
 8005768:	428a      	cmp	r2, r1
 800576a:	d101      	bne.n	8005770 <HAL_I2S_Init+0x1b8>
 800576c:	4a31      	ldr	r2, [pc, #196]	; (8005834 <HAL_I2S_Init+0x27c>)
 800576e:	e001      	b.n	8005774 <HAL_I2S_Init+0x1bc>
 8005770:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005774:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005778:	f023 030f 	bic.w	r3, r3, #15
 800577c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <HAL_I2S_Init+0x278>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <HAL_I2S_Init+0x1d4>
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <HAL_I2S_Init+0x27c>)
 800578a:	e001      	b.n	8005790 <HAL_I2S_Init+0x1d8>
 800578c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005790:	2202      	movs	r2, #2
 8005792:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_I2S_Init+0x278>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_I2S_Init+0x1ea>
 800579e:	4b25      	ldr	r3, [pc, #148]	; (8005834 <HAL_I2S_Init+0x27c>)
 80057a0:	e001      	b.n	80057a6 <HAL_I2S_Init+0x1ee>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b2:	d003      	beq.n	80057bc <HAL_I2S_Init+0x204>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80057bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e001      	b.n	80057c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057dc:	4313      	orrs	r3, r2
 80057de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80057e6:	4313      	orrs	r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <HAL_I2S_Init+0x278>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_I2S_Init+0x24c>
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_I2S_Init+0x27c>)
 8005802:	e001      	b.n	8005808 <HAL_I2S_Init+0x250>
 8005804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005808:	897a      	ldrh	r2, [r7, #10]
 800580a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	0800592f 	.word	0x0800592f
 8005828:	cccccccd 	.word	0xcccccccd
 800582c:	08005a45 	.word	0x08005a45
 8005830:	40003800 	.word	0x40003800
 8005834:	40003400 	.word	0x40003400

08005838 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	881a      	ldrh	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10e      	bne.n	80058c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ffb8 	bl	8005838 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	b292      	uxth	r2, r2
 80058e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10e      	bne.n	8005926 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005916:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff93 	bl	800584c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b04      	cmp	r3, #4
 8005948:	d13a      	bne.n	80059c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d109      	bne.n	8005968 <I2S_IRQHandler+0x3a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d102      	bne.n	8005968 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ffb4 	bl	80058d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d126      	bne.n	80059c0 <I2S_IRQHandler+0x92>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d11f      	bne.n	80059c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800598e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f043 0202 	orr.w	r2, r3, #2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ff50 	bl	8005860 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d136      	bne.n	8005a3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d109      	bne.n	80059ea <I2S_IRQHandler+0xbc>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d102      	bne.n	80059ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff ff45 	bl	8005874 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d122      	bne.n	8005a3a <I2S_IRQHandler+0x10c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d11b      	bne.n	8005a3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2c:	f043 0204 	orr.w	r2, r3, #4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff13 	bl	8005860 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a92      	ldr	r2, [pc, #584]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a5e:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a60:	e001      	b.n	8005a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a8b      	ldr	r2, [pc, #556]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a7c:	4b8a      	ldr	r3, [pc, #552]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a7e:	e001      	b.n	8005a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a90:	d004      	beq.n	8005a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 8099 	bne.w	8005bce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d107      	bne.n	8005ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f925 	bl	8005d00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9c8 	bl	8005e60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d13a      	bne.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d035      	beq.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6e      	ldr	r2, [pc, #440]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005aee:	4b6e      	ldr	r3, [pc, #440]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005af0:	e001      	b.n	8005af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4969      	ldr	r1, [pc, #420]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005afe:	428b      	cmp	r3, r1
 8005b00:	d101      	bne.n	8005b06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b02:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b04:	e001      	b.n	8005b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fe88 	bl	8005860 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	f040 80c3 	bne.w	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80bd 	beq.w	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a49      	ldr	r2, [pc, #292]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d101      	bne.n	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b82:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b84:	e001      	b.n	8005b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4944      	ldr	r1, [pc, #272]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b92:	428b      	cmp	r3, r1
 8005b94:	d101      	bne.n	8005b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b98:	e001      	b.n	8005b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ba2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fe4a 	bl	8005860 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bcc:	e089      	b.n	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d107      	bne.n	8005be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8be 	bl	8005d64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8fd 	bl	8005dfc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d12f      	bne.n	8005c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02a      	beq.n	8005c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005c30:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c32:	e001      	b.n	8005c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4919      	ldr	r1, [pc, #100]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c40:	428b      	cmp	r3, r1
 8005c42:	d101      	bne.n	8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c44:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c46:	e001      	b.n	8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	f043 0202 	orr.w	r2, r3, #2
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fdfa 	bl	8005860 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d136      	bne.n	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d031      	beq.n	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c8c:	e001      	b.n	8005c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4902      	ldr	r1, [pc, #8]	; (8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c9a:	428b      	cmp	r3, r1
 8005c9c:	d106      	bne.n	8005cac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c9e:	4b02      	ldr	r3, [pc, #8]	; (8005ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ca0:	e006      	b.n	8005cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005ca2:	bf00      	nop
 8005ca4:	40003800 	.word	0x40003800
 8005ca8:	40003400 	.word	0x40003400
 8005cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cc4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f043 0204 	orr.w	r2, r3, #4
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fdc0 	bl	8005860 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ce0:	e000      	b.n	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ce2:	bf00      	nop
}
 8005ce4:	bf00      	nop
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	1c99      	adds	r1, r3, #2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6251      	str	r1, [r2, #36]	; 0x24
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ffc9 	bl	8005cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c99      	adds	r1, r3, #2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6251      	str	r1, [r2, #36]	; 0x24
 8005d76:	8819      	ldrh	r1, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	; (8005df4 <I2SEx_TxISR_I2SExt+0x90>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <I2SEx_TxISR_I2SExt+0x22>
 8005d82:	4b1d      	ldr	r3, [pc, #116]	; (8005df8 <I2SEx_TxISR_I2SExt+0x94>)
 8005d84:	e001      	b.n	8005d8a <I2SEx_TxISR_I2SExt+0x26>
 8005d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d8a:	460a      	mov	r2, r1
 8005d8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d121      	bne.n	8005dea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <I2SEx_TxISR_I2SExt+0x90>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d101      	bne.n	8005db4 <I2SEx_TxISR_I2SExt+0x50>
 8005db0:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <I2SEx_TxISR_I2SExt+0x94>)
 8005db2:	e001      	b.n	8005db8 <I2SEx_TxISR_I2SExt+0x54>
 8005db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	490d      	ldr	r1, [pc, #52]	; (8005df4 <I2SEx_TxISR_I2SExt+0x90>)
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	d101      	bne.n	8005dc8 <I2SEx_TxISR_I2SExt+0x64>
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <I2SEx_TxISR_I2SExt+0x94>)
 8005dc6:	e001      	b.n	8005dcc <I2SEx_TxISR_I2SExt+0x68>
 8005dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff81 	bl	8005cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40003800 	.word	0x40003800
 8005df8:	40003400 	.word	0x40003400

08005dfc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68d8      	ldr	r0, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	1c99      	adds	r1, r3, #2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e14:	b282      	uxth	r2, r0
 8005e16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d113      	bne.n	8005e58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff4a 	bl	8005cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a20      	ldr	r2, [pc, #128]	; (8005ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <I2SEx_RxISR_I2SExt+0x16>
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8005e74:	e001      	b.n	8005e7a <I2SEx_RxISR_I2SExt+0x1a>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e7a:	68d8      	ldr	r0, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	1c99      	adds	r1, r3, #2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e86:	b282      	uxth	r2, r0
 8005e88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d121      	bne.n	8005ee6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <I2SEx_RxISR_I2SExt+0x50>
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8005eae:	e001      	b.n	8005eb4 <I2SEx_RxISR_I2SExt+0x54>
 8005eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	490d      	ldr	r1, [pc, #52]	; (8005ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	d101      	bne.n	8005ec4 <I2SEx_RxISR_I2SExt+0x64>
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8005ec2:	e001      	b.n	8005ec8 <I2SEx_RxISR_I2SExt+0x68>
 8005ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ecc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff ff03 	bl	8005cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40003800 	.word	0x40003800
 8005ef4:	40003400 	.word	0x40003400

08005ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e267      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d075      	beq.n	8006002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f16:	4b88      	ldr	r3, [pc, #544]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d00c      	beq.n	8005f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f22:	4b85      	ldr	r3, [pc, #532]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d112      	bne.n	8005f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2e:	4b82      	ldr	r3, [pc, #520]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3c:	4b7e      	ldr	r3, [pc, #504]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d05b      	beq.n	8006000 <HAL_RCC_OscConfig+0x108>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d157      	bne.n	8006000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e242      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d106      	bne.n	8005f6c <HAL_RCC_OscConfig+0x74>
 8005f5e:	4b76      	ldr	r3, [pc, #472]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a75      	ldr	r2, [pc, #468]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e01d      	b.n	8005fa8 <HAL_RCC_OscConfig+0xb0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x98>
 8005f76:	4b70      	ldr	r3, [pc, #448]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a6f      	ldr	r2, [pc, #444]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b6d      	ldr	r3, [pc, #436]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a6c      	ldr	r2, [pc, #432]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e00b      	b.n	8005fa8 <HAL_RCC_OscConfig+0xb0>
 8005f90:	4b69      	ldr	r3, [pc, #420]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a68      	ldr	r2, [pc, #416]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4b66      	ldr	r3, [pc, #408]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a65      	ldr	r2, [pc, #404]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d013      	beq.n	8005fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fa ff60 	bl	8000e74 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fa ff5c 	bl	8000e74 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e207      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0xc0>
 8005fd6:	e014      	b.n	8006002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd8:	f7fa ff4c 	bl	8000e74 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe0:	f7fa ff48 	bl	8000e74 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	; 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e1f3      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff2:	4b51      	ldr	r3, [pc, #324]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f0      	bne.n	8005fe0 <HAL_RCC_OscConfig+0xe8>
 8005ffe:	e000      	b.n	8006002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d063      	beq.n	80060d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800600e:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006022:	2b08      	cmp	r3, #8
 8006024:	d11c      	bne.n	8006060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b44      	ldr	r3, [pc, #272]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d116      	bne.n	8006060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_RCC_OscConfig+0x152>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d001      	beq.n	800604a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e1c7      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4937      	ldr	r1, [pc, #220]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605e:	e03a      	b.n	80060d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d020      	beq.n	80060aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006068:	4b34      	ldr	r3, [pc, #208]	; (800613c <HAL_RCC_OscConfig+0x244>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606e:	f7fa ff01 	bl	8000e74 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006076:	f7fa fefd 	bl	8000e74 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1a8      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006088:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4925      	ldr	r1, [pc, #148]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]
 80060a8:	e015      	b.n	80060d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060aa:	4b24      	ldr	r3, [pc, #144]	; (800613c <HAL_RCC_OscConfig+0x244>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fa fee0 	bl	8000e74 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060b8:	f7fa fedc 	bl	8000e74 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e187      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ca:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d036      	beq.n	8006150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCC_OscConfig+0x248>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f0:	f7fa fec0 	bl	8000e74 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f8:	f7fa febc 	bl	8000e74 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e167      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_OscConfig+0x240>)
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x200>
 8006116:	e01b      	b.n	8006150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_RCC_OscConfig+0x248>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611e:	f7fa fea9 	bl	8000e74 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006124:	e00e      	b.n	8006144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006126:	f7fa fea5 	bl	8000e74 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d907      	bls.n	8006144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e150      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
 8006138:	40023800 	.word	0x40023800
 800613c:	42470000 	.word	0x42470000
 8006140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	4b88      	ldr	r3, [pc, #544]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ea      	bne.n	8006126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8097 	beq.w	800628c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b81      	ldr	r3, [pc, #516]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	4b7d      	ldr	r3, [pc, #500]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	4a7c      	ldr	r2, [pc, #496]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	; 0x40
 800617e:	4b7a      	ldr	r3, [pc, #488]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618e:	4b77      	ldr	r3, [pc, #476]	; (800636c <HAL_RCC_OscConfig+0x474>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d118      	bne.n	80061cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800619a:	4b74      	ldr	r3, [pc, #464]	; (800636c <HAL_RCC_OscConfig+0x474>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a73      	ldr	r2, [pc, #460]	; (800636c <HAL_RCC_OscConfig+0x474>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a6:	f7fa fe65 	bl	8000e74 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ae:	f7fa fe61 	bl	8000e74 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e10c      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c0:	4b6a      	ldr	r3, [pc, #424]	; (800636c <HAL_RCC_OscConfig+0x474>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <HAL_RCC_OscConfig+0x2ea>
 80061d4:	4b64      	ldr	r3, [pc, #400]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	4a63      	ldr	r2, [pc, #396]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	; 0x70
 80061e0:	e01c      	b.n	800621c <HAL_RCC_OscConfig+0x324>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d10c      	bne.n	8006204 <HAL_RCC_OscConfig+0x30c>
 80061ea:	4b5f      	ldr	r3, [pc, #380]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a5e      	ldr	r2, [pc, #376]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 0304 	orr.w	r3, r3, #4
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70
 80061f6:	4b5c      	ldr	r3, [pc, #368]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4a5b      	ldr	r2, [pc, #364]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
 8006202:	e00b      	b.n	800621c <HAL_RCC_OscConfig+0x324>
 8006204:	4b58      	ldr	r3, [pc, #352]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a57      	ldr	r2, [pc, #348]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
 8006210:	4b55      	ldr	r3, [pc, #340]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a54      	ldr	r2, [pc, #336]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006216:	f023 0304 	bic.w	r3, r3, #4
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d015      	beq.n	8006250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fa fe26 	bl	8000e74 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622a:	e00a      	b.n	8006242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622c:	f7fa fe22 	bl	8000e74 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f241 3288 	movw	r2, #5000	; 0x1388
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e0cb      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006242:	4b49      	ldr	r3, [pc, #292]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ee      	beq.n	800622c <HAL_RCC_OscConfig+0x334>
 800624e:	e014      	b.n	800627a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006250:	f7fa fe10 	bl	8000e74 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006256:	e00a      	b.n	800626e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fa fe0c 	bl	8000e74 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e0b5      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800626e:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ee      	bne.n	8006258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d105      	bne.n	800628c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006280:	4b39      	ldr	r3, [pc, #228]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	4a38      	ldr	r2, [pc, #224]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80a1 	beq.w	80063d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006296:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d05c      	beq.n	800635c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d141      	bne.n	800632e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062aa:	4b31      	ldr	r3, [pc, #196]	; (8006370 <HAL_RCC_OscConfig+0x478>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7fa fde0 	bl	8000e74 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fa fddc 	bl	8000e74 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e087      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ca:	4b27      	ldr	r3, [pc, #156]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	019b      	lsls	r3, r3, #6
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	3b01      	subs	r3, #1
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	061b      	lsls	r3, r3, #24
 80062fa:	491b      	ldr	r1, [pc, #108]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006300:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <HAL_RCC_OscConfig+0x478>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006306:	f7fa fdb5 	bl	8000e74 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800630e:	f7fa fdb1 	bl	8000e74 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e05c      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x416>
 800632c:	e054      	b.n	80063d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <HAL_RCC_OscConfig+0x478>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fa fd9e 	bl	8000e74 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633c:	f7fa fd9a 	bl	8000e74 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e045      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_RCC_OscConfig+0x470>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x444>
 800635a:	e03d      	b.n	80063d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d107      	bne.n	8006374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e038      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
 8006368:	40023800 	.word	0x40023800
 800636c:	40007000 	.word	0x40007000
 8006370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x4ec>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d028      	beq.n	80063d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d121      	bne.n	80063d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d11a      	bne.n	80063d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063a4:	4013      	ands	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d111      	bne.n	80063d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	3b01      	subs	r3, #1
 80063be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800

080063e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0cc      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d90c      	bls.n	8006424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006412:	4b63      	ldr	r3, [pc, #396]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0b8      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d020      	beq.n	8006472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800643c:	4b59      	ldr	r3, [pc, #356]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a58      	ldr	r2, [pc, #352]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006454:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4a52      	ldr	r2, [pc, #328]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800645e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006460:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	494d      	ldr	r1, [pc, #308]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d044      	beq.n	8006508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d107      	bne.n	8006496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b47      	ldr	r3, [pc, #284]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d119      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e07f      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d003      	beq.n	80064a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d107      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a6:	4b3f      	ldr	r3, [pc, #252]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e06f      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b6:	4b3b      	ldr	r3, [pc, #236]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e067      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c6:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f023 0203 	bic.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4934      	ldr	r1, [pc, #208]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d8:	f7fa fccc 	bl	8000e74 <HAL_GetTick>
 80064dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e0:	f7fa fcc8 	bl	8000e74 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e04f      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f6:	4b2b      	ldr	r3, [pc, #172]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 020c 	and.w	r2, r3, #12
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	429a      	cmp	r2, r3
 8006506:	d1eb      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d20c      	bcs.n	8006530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651e:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e032      	b.n	8006596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800653c:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4916      	ldr	r1, [pc, #88]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	490e      	ldr	r1, [pc, #56]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800656e:	f000 f821 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8006572:	4602      	mov	r2, r0
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	490a      	ldr	r1, [pc, #40]	; (80065a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006580:	5ccb      	ldrb	r3, [r1, r3]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1c4>)
 8006588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x1c8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fa fc2c 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40023c00 	.word	0x40023c00
 80065a4:	40023800 	.word	0x40023800
 80065a8:	0800ab0c 	.word	0x0800ab0c
 80065ac:	20000000 	.word	0x20000000
 80065b0:	20000004 	.word	0x20000004

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b8:	b094      	sub	sp, #80	; 0x50
 80065ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	647b      	str	r3, [r7, #68]	; 0x44
 80065c0:	2300      	movs	r3, #0
 80065c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c4:	2300      	movs	r3, #0
 80065c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065cc:	4b79      	ldr	r3, [pc, #484]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 030c 	and.w	r3, r3, #12
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d00d      	beq.n	80065f4 <HAL_RCC_GetSysClockFreq+0x40>
 80065d8:	2b08      	cmp	r3, #8
 80065da:	f200 80e1 	bhi.w	80067a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x34>
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0x3a>
 80065e6:	e0db      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065e8:	4b73      	ldr	r3, [pc, #460]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065ec:	e0db      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ee:	4b73      	ldr	r3, [pc, #460]	; (80067bc <HAL_RCC_GetSysClockFreq+0x208>)
 80065f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065f2:	e0d8      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065f4:	4b6f      	ldr	r3, [pc, #444]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065fe:	4b6d      	ldr	r3, [pc, #436]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d063      	beq.n	80066d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800660a:	4b6a      	ldr	r3, [pc, #424]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	099b      	lsrs	r3, r3, #6
 8006610:	2200      	movs	r2, #0
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
 8006614:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
 800661e:	2300      	movs	r3, #0
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
 8006622:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	f04f 0000 	mov.w	r0, #0
 800662e:	f04f 0100 	mov.w	r1, #0
 8006632:	0159      	lsls	r1, r3, #5
 8006634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006638:	0150      	lsls	r0, r2, #5
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4621      	mov	r1, r4
 8006640:	1a51      	subs	r1, r2, r1
 8006642:	6139      	str	r1, [r7, #16]
 8006644:	4629      	mov	r1, r5
 8006646:	eb63 0301 	sbc.w	r3, r3, r1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006658:	4659      	mov	r1, fp
 800665a:	018b      	lsls	r3, r1, #6
 800665c:	4651      	mov	r1, sl
 800665e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006662:	4651      	mov	r1, sl
 8006664:	018a      	lsls	r2, r1, #6
 8006666:	4651      	mov	r1, sl
 8006668:	ebb2 0801 	subs.w	r8, r2, r1
 800666c:	4659      	mov	r1, fp
 800666e:	eb63 0901 	sbc.w	r9, r3, r1
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800667e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006686:	4690      	mov	r8, r2
 8006688:	4699      	mov	r9, r3
 800668a:	4623      	mov	r3, r4
 800668c:	eb18 0303 	adds.w	r3, r8, r3
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	462b      	mov	r3, r5
 8006694:	eb49 0303 	adc.w	r3, r9, r3
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066a6:	4629      	mov	r1, r5
 80066a8:	024b      	lsls	r3, r1, #9
 80066aa:	4621      	mov	r1, r4
 80066ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066b0:	4621      	mov	r1, r4
 80066b2:	024a      	lsls	r2, r1, #9
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ba:	2200      	movs	r2, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066c4:	f7f9 fd80 	bl	80001c8 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4613      	mov	r3, r2
 80066ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d0:	e058      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d2:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	2200      	movs	r2, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	4611      	mov	r1, r2
 80066de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	2300      	movs	r3, #0
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	f04f 0000 	mov.w	r0, #0
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	0159      	lsls	r1, r3, #5
 80066fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066fe:	0150      	lsls	r0, r2, #5
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4641      	mov	r1, r8
 8006706:	ebb2 0a01 	subs.w	sl, r2, r1
 800670a:	4649      	mov	r1, r9
 800670c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800671c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006720:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006724:	ebb2 040a 	subs.w	r4, r2, sl
 8006728:	eb63 050b 	sbc.w	r5, r3, fp
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	00eb      	lsls	r3, r5, #3
 8006736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800673a:	00e2      	lsls	r2, r4, #3
 800673c:	4614      	mov	r4, r2
 800673e:	461d      	mov	r5, r3
 8006740:	4643      	mov	r3, r8
 8006742:	18e3      	adds	r3, r4, r3
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	464b      	mov	r3, r9
 8006748:	eb45 0303 	adc.w	r3, r5, r3
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800675a:	4629      	mov	r1, r5
 800675c:	028b      	lsls	r3, r1, #10
 800675e:	4621      	mov	r1, r4
 8006760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006764:	4621      	mov	r1, r4
 8006766:	028a      	lsls	r2, r1, #10
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676e:	2200      	movs	r2, #0
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	61fa      	str	r2, [r7, #28]
 8006774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006778:	f7f9 fd26 	bl	80001c8 <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4613      	mov	r3, r2
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	3301      	adds	r3, #1
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800679e:	e002      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3750      	adds	r7, #80	; 0x50
 80067ac:	46bd      	mov	sp, r7
 80067ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b2:	bf00      	nop
 80067b4:	40023800 	.word	0x40023800
 80067b8:	00f42400 	.word	0x00f42400
 80067bc:	007a1200 	.word	0x007a1200

080067c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000000 	.word	0x20000000

080067d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067dc:	f7ff fff0 	bl	80067c0 <HAL_RCC_GetHCLKFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	0a9b      	lsrs	r3, r3, #10
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	4903      	ldr	r1, [pc, #12]	; (80067fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ee:	5ccb      	ldrb	r3, [r1, r3]
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40023800 	.word	0x40023800
 80067fc:	0800ab1c 	.word	0x0800ab1c

08006800 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006824:	2b00      	cmp	r3, #0
 8006826:	d035      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006828:	4b62      	ldr	r3, [pc, #392]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800682e:	f7fa fb21 	bl	8000e74 <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006836:	f7fa fb1d 	bl	8000e74 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e0b0      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f0      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	019a      	lsls	r2, r3, #6
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	071b      	lsls	r3, r3, #28
 8006860:	4955      	ldr	r1, [pc, #340]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006868:	4b52      	ldr	r3, [pc, #328]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800686e:	f7fa fb01 	bl	8000e74 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006876:	f7fa fafd 	bl	8000e74 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e090      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006888:	4b4b      	ldr	r3, [pc, #300]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8083 	beq.w	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	4b44      	ldr	r3, [pc, #272]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4a43      	ldr	r2, [pc, #268]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6413      	str	r3, [r2, #64]	; 0x40
 80068b2:	4b41      	ldr	r3, [pc, #260]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068be:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a3e      	ldr	r2, [pc, #248]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068ca:	f7fa fad3 	bl	8000e74 <HAL_GetTick>
 80068ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068d0:	e008      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fa facf 	bl	8000e74 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e062      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068e4:	4b35      	ldr	r3, [pc, #212]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f0      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068f0:	4b31      	ldr	r3, [pc, #196]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d02f      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	429a      	cmp	r2, r3
 800690c:	d028      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800690e:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006916:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006918:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800691e:	4b28      	ldr	r3, [pc, #160]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006924:	4a24      	ldr	r2, [pc, #144]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800692a:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b01      	cmp	r3, #1
 8006934:	d114      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006936:	f7fa fa9d 	bl	8000e74 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fa fa99 	bl	8000e74 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	; 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e02a      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006954:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ee      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800697e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006982:	490d      	ldr	r1, [pc, #52]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	608b      	str	r3, [r1, #8]
 8006988:	e005      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800698a:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006990:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006994:	6093      	str	r3, [r2, #8]
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a2:	4905      	ldr	r1, [pc, #20]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	42470068 	.word	0x42470068
 80069b8:	40023800 	.word	0x40023800
 80069bc:	40007000 	.word	0x40007000
 80069c0:	42470e40 	.word	0x42470e40

080069c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d13e      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d12f      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069fa:	617b      	str	r3, [r7, #20]
          break;
 80069fc:	e02f      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0a:	d108      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a0c:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	e007      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a34:	099b      	lsrs	r3, r3, #6
 8006a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a48:	0f1b      	lsrs	r3, r3, #28
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	617b      	str	r3, [r7, #20]
          break;
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
          break;
 8006a5c:	bf00      	nop
        }
      }
      break;
 8006a5e:	bf00      	nop
    }
  }
  return frequency;
 8006a60:	697b      	ldr	r3, [r7, #20]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800
 8006a74:	00bb8000 	.word	0x00bb8000
 8006a78:	007a1200 	.word	0x007a1200
 8006a7c:	00f42400 	.word	0x00f42400

08006a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e07b      	b.n	8006b8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d108      	bne.n	8006aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa2:	d009      	beq.n	8006ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	61da      	str	r2, [r3, #28]
 8006aaa:	e005      	b.n	8006ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa f83e 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	ea42 0103 	orr.w	r1, r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 0104 	and.w	r1, r3, #4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	f003 0210 	and.w	r2, r3, #16
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b92:	b084      	sub	sp, #16
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	f107 001c 	add.w	r0, r7, #28
 8006ba0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d122      	bne.n	8006bf0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d105      	bne.n	8006be4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9bf 	bl	8006f68 <USB_CoreReset>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]
 8006bee:	e01a      	b.n	8006c26 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9b3 	bl	8006f68 <USB_CoreReset>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
 8006c18:	e005      	b.n	8006c26 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10b      	bne.n	8006c44 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f043 0206 	orr.w	r2, r3, #6
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f043 0220 	orr.w	r2, r3, #32
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c50:	b004      	add	sp, #16
 8006c52:	4770      	bx	lr

08006c54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d115      	bne.n	8006ce6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	f7fa f8e0 	bl	8000e8c <HAL_Delay>
      ms++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f939 	bl	8006f4a <USB_GetMode>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d01e      	beq.n	8006d1c <USB_SetCurrentMode+0x84>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b31      	cmp	r3, #49	; 0x31
 8006ce2:	d9f0      	bls.n	8006cc6 <USB_SetCurrentMode+0x2e>
 8006ce4:	e01a      	b.n	8006d1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d115      	bne.n	8006d18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f7fa f8c7 	bl	8000e8c <HAL_Delay>
      ms++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f920 	bl	8006f4a <USB_GetMode>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <USB_SetCurrentMode+0x84>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b31      	cmp	r3, #49	; 0x31
 8006d14:	d9f0      	bls.n	8006cf8 <USB_SetCurrentMode+0x60>
 8006d16:	e001      	b.n	8006d1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e005      	b.n	8006d28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b32      	cmp	r3, #50	; 0x32
 8006d20:	d101      	bne.n	8006d26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3301      	adds	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <USB_FlushTxFifo+0x64>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d901      	bls.n	8006d50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e01b      	b.n	8006d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	daf2      	bge.n	8006d3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	019b      	lsls	r3, r3, #6
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <USB_FlushTxFifo+0x64>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d901      	bls.n	8006d7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e006      	b.n	8006d88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d0f0      	beq.n	8006d68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	00030d40 	.word	0x00030d40

08006d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <USB_FlushRxFifo+0x5c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d901      	bls.n	8006db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e018      	b.n	8006de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	daf2      	bge.n	8006da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <USB_FlushRxFifo+0x5c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e006      	b.n	8006de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d0f0      	beq.n	8006dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	00030d40 	.word	0x00030d40

08006df8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	; 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	460b      	mov	r3, r1
 8006e08:	71fb      	strb	r3, [r7, #7]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d123      	bne.n	8006e66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e1e:	88bb      	ldrh	r3, [r7, #4]
 8006e20:	3303      	adds	r3, #3
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	e018      	b.n	8006e5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	031a      	lsls	r2, r3, #12
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e38:	461a      	mov	r2, r3
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d3e2      	bcc.n	8006e2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3724      	adds	r7, #36	; 0x24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b08b      	sub	sp, #44	; 0x2c
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e014      	b.n	8006eca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	3301      	adds	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	3301      	adds	r3, #1
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	623b      	str	r3, [r7, #32]
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d3e6      	bcc.n	8006ea0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ed2:	8bfb      	ldrh	r3, [r7, #30]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01e      	beq.n	8006f16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	701a      	strb	r2, [r3, #0]
      i++;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	3301      	adds	r3, #1
 8006f02:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	3301      	adds	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006f0a:	8bfb      	ldrh	r3, [r7, #30]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f10:	8bfb      	ldrh	r3, [r7, #30]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ea      	bne.n	8006eec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	372c      	adds	r7, #44	; 0x2c
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0301 	and.w	r3, r3, #1
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <USB_CoreReset+0x64>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e01b      	b.n	8006fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	daf2      	bge.n	8006f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f043 0201 	orr.w	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <USB_CoreReset+0x64>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d901      	bls.n	8006fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e006      	b.n	8006fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d0f0      	beq.n	8006f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	00030d40 	.word	0x00030d40

08006fd0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d018      	beq.n	8007058 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10a      	bne.n	8007042 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800703a:	f043 0304 	orr.w	r3, r3, #4
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	e014      	b.n	800706c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007050:	f023 0304 	bic.w	r3, r3, #4
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	e009      	b.n	800706c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007066:	f023 0304 	bic.w	r3, r3, #4
 800706a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800706c:	2110      	movs	r1, #16
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fe5e 	bl	8006d30 <USB_FlushTxFifo>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fe8a 	bl	8006d98 <USB_FlushRxFifo>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e015      	b.n	80070c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a0:	461a      	mov	r2, r3
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b4:	461a      	mov	r2, r3
 80070b6:	2300      	movs	r3, #0
 80070b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3301      	adds	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d3e5      	bcc.n	8007094 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a13      	ldr	r2, [pc, #76]	; (800713c <USB_HostInit+0x16c>)
 80070ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a13      	ldr	r2, [pc, #76]	; (8007140 <USB_HostInit+0x170>)
 80070f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80070f8:	e009      	b.n	800710e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2280      	movs	r2, #128	; 0x80
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <USB_HostInit+0x174>)
 8007104:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <USB_HostInit+0x178>)
 800710a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f043 0210 	orr.w	r2, r3, #16
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <USB_HostInit+0x17c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr
 800713c:	01000200 	.word	0x01000200
 8007140:	00e00300 	.word	0x00e00300
 8007144:	00600080 	.word	0x00600080
 8007148:	004000e0 	.word	0x004000e0
 800714c:	a3200008 	.word	0xa3200008

08007150 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007198:	461a      	mov	r2, r3
 800719a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800719e:	6053      	str	r3, [r2, #4]
 80071a0:	e009      	b.n	80071b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d106      	bne.n	80071b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ae:	461a      	mov	r2, r3
 80071b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80071b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071f4:	2064      	movs	r0, #100	; 0x64
 80071f6:	f7f9 fe49 	bl	8000e8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007206:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007208:	200a      	movs	r0, #10
 800720a:	f7f9 fe3f 	bl	8000e8c <HAL_Delay>

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800723c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d109      	bne.n	800725c <USB_DriveVbus+0x44>
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d106      	bne.n	800725c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800725a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007266:	d109      	bne.n	800727c <USB_DriveVbus+0x64>
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800727a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	0c5b      	lsrs	r3, r3, #17
 80072a8:	f003 0303 	and.w	r3, r3, #3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	b29b      	uxth	r3, r3
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	461a      	mov	r2, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	70fb      	strb	r3, [r7, #3]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70bb      	strb	r3, [r7, #2]
 80072f2:	4613      	mov	r3, r2
 80072f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	f04f 33ff 	mov.w	r3, #4294967295
 8007310:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007312:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007316:	2b03      	cmp	r3, #3
 8007318:	d87e      	bhi.n	8007418 <USB_HC_Init+0x13c>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <USB_HC_Init+0x44>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	080073db 	.word	0x080073db
 8007328:	08007331 	.word	0x08007331
 800732c:	0800739d 	.word	0x0800739d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	461a      	mov	r2, r3
 800733e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007342:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007344:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007348:	2b00      	cmp	r3, #0
 800734a:	da10      	bge.n	800736e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800736c:	e057      	b.n	800741e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d051      	beq.n	800741e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	440a      	add	r2, r1
 8007390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007398:	60d3      	str	r3, [r2, #12]
      break;
 800739a:	e040      	b.n	800741e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a8:	461a      	mov	r2, r3
 80073aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80073ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	da34      	bge.n	8007422 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073d8:	e023      	b.n	8007422 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e6:	461a      	mov	r2, r3
 80073e8:	f240 2325 	movw	r3, #549	; 0x225
 80073ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da17      	bge.n	8007426 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	440a      	add	r2, r1
 800740c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007410:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007414:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007416:	e006      	b.n	8007426 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	77fb      	strb	r3, [r7, #31]
      break;
 800741c:	e004      	b.n	8007428 <USB_HC_Init+0x14c>
      break;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <USB_HC_Init+0x14c>
      break;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <USB_HC_Init+0x14c>
      break;
 8007426:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	440a      	add	r2, r1
 800743e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007442:	f043 0302 	orr.w	r3, r3, #2
 8007446:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	2101      	movs	r1, #1
 8007458:	fa01 f303 	lsl.w	r3, r1, r3
 800745c:	6939      	ldr	r1, [r7, #16]
 800745e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007462:	4313      	orrs	r3, r2
 8007464:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007472:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007476:	2b00      	cmp	r3, #0
 8007478:	da03      	bge.n	8007482 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	e001      	b.n	8007486 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff feff 	bl	800728a <USB_GetHostSpeed>
 800748c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800748e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007492:	2b02      	cmp	r3, #2
 8007494:	d106      	bne.n	80074a4 <USB_HC_Init+0x1c8>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d003      	beq.n	80074a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800749c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e001      	b.n	80074a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074a8:	787b      	ldrb	r3, [r7, #1]
 80074aa:	059b      	lsls	r3, r3, #22
 80074ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074b0:	78bb      	ldrb	r3, [r7, #2]
 80074b2:	02db      	lsls	r3, r3, #11
 80074b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074be:	049b      	lsls	r3, r3, #18
 80074c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80074c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	0159      	lsls	r1, r3, #5
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	440b      	add	r3, r1
 80074da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d003      	beq.n	80074f6 <USB_HC_Init+0x21a>
 80074ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d10f      	bne.n	8007516 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	440a      	add	r2, r1
 800750c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007514:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007516:	7ffb      	ldrb	r3, [r7, #31]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08c      	sub	sp, #48	; 0x30
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800753c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d02d      	beq.n	80075a6 <USB_HC_StartXfer+0x86>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	791b      	ldrb	r3, [r3, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d129      	bne.n	80075a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d117      	bne.n	8007588 <USB_HC_StartXfer+0x68>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	79db      	ldrb	r3, [r3, #7]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <USB_HC_StartXfer+0x48>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	79db      	ldrb	r3, [r3, #7]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d10f      	bne.n	8007588 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	6a3a      	ldr	r2, [r7, #32]
 800757c:	440a      	add	r2, r1
 800757e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10b      	bne.n	80075a6 <USB_HC_StartXfer+0x86>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	795b      	ldrb	r3, [r3, #5]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d107      	bne.n	80075a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fa0f 	bl	80079c0 <USB_DoPing>
      return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e0f8      	b.n	8007798 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d018      	beq.n	80075e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	8912      	ldrh	r2, [r2, #8]
 80075b6:	4413      	add	r3, r2
 80075b8:	3b01      	subs	r3, #1
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	8912      	ldrh	r2, [r2, #8]
 80075be:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80075c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80075c6:	8b7b      	ldrh	r3, [r7, #26]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d90b      	bls.n	80075e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80075cc:	8b7b      	ldrh	r3, [r7, #26]
 80075ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	8912      	ldrh	r2, [r2, #8]
 80075d6:	fb03 f202 	mul.w	r2, r3, r2
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	611a      	str	r2, [r3, #16]
 80075de:	e001      	b.n	80075e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80075e0:	2301      	movs	r3, #1
 80075e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	8912      	ldrh	r2, [r2, #8]
 80075f2:	fb03 f202 	mul.w	r2, r3, r2
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	611a      	str	r2, [r3, #16]
 80075fa:	e003      	b.n	8007604 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	695a      	ldr	r2, [r3, #20]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800760c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800760e:	04d9      	lsls	r1, r3, #19
 8007610:	4b63      	ldr	r3, [pc, #396]	; (80077a0 <USB_HC_StartXfer+0x280>)
 8007612:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007614:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7a9b      	ldrb	r3, [r3, #10]
 800761a:	075b      	lsls	r3, r3, #29
 800761c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007620:	69f9      	ldr	r1, [r7, #28]
 8007622:	0148      	lsls	r0, r1, #5
 8007624:	6a39      	ldr	r1, [r7, #32]
 8007626:	4401      	add	r1, r0
 8007628:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800762c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800762e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	68d9      	ldr	r1, [r3, #12]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	460a      	mov	r2, r1
 8007648:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	440a      	add	r2, r1
 8007678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800767c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007680:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	4413      	add	r3, r2
 800768a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	7e7b      	ldrb	r3, [r7, #25]
 8007692:	075b      	lsls	r3, r3, #29
 8007694:	69f9      	ldr	r1, [r7, #28]
 8007696:	0148      	lsls	r0, r1, #5
 8007698:	6a39      	ldr	r1, [r7, #32]
 800769a:	4401      	add	r1, r0
 800769c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80076a0:	4313      	orrs	r3, r2
 80076a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	78db      	ldrb	r3, [r3, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	e003      	b.n	80076d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ea:	461a      	mov	r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e04e      	b.n	8007798 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d149      	bne.n	8007796 <USB_HC_StartXfer+0x276>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d045      	beq.n	8007796 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	79db      	ldrb	r3, [r3, #7]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d830      	bhi.n	8007774 <USB_HC_StartXfer+0x254>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USB_HC_StartXfer+0x1f8>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007729 	.word	0x08007729
 800771c:	0800774d 	.word	0x0800774d
 8007720:	08007729 	.word	0x08007729
 8007724:	0800774d 	.word	0x0800774d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	3303      	adds	r3, #3
 800772e:	089b      	lsrs	r3, r3, #2
 8007730:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007732:	8afa      	ldrh	r2, [r7, #22]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	b29b      	uxth	r3, r3
 800773a:	429a      	cmp	r2, r3
 800773c:	d91c      	bls.n	8007778 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	619a      	str	r2, [r3, #24]
        }
        break;
 800774a:	e015      	b.n	8007778 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	3303      	adds	r3, #3
 8007752:	089b      	lsrs	r3, r3, #2
 8007754:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007756:	8afa      	ldrh	r2, [r7, #22]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	b29b      	uxth	r3, r3
 8007762:	429a      	cmp	r2, r3
 8007764:	d90a      	bls.n	800777c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]
        }
        break;
 8007772:	e003      	b.n	800777c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <USB_HC_StartXfer+0x25e>
        break;
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <USB_HC_StartXfer+0x25e>
        break;
 800777c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	68d9      	ldr	r1, [r3, #12]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	785a      	ldrb	r2, [r3, #1]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	b29b      	uxth	r3, r3
 800778c:	2000      	movs	r0, #0
 800778e:	9000      	str	r0, [sp, #0]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fb31 	bl	8006df8 <USB_WritePacket>
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3728      	adds	r7, #40	; 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	1ff80000 	.word	0x1ff80000

080077a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	b29b      	uxth	r3, r3
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b089      	sub	sp, #36	; 0x24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	0c9b      	lsrs	r3, r3, #18
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	0fdb      	lsrs	r3, r3, #31
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d104      	bne.n	8007820 <USB_HC_Halt+0x5a>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e0c8      	b.n	80079b2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <USB_HC_Halt+0x66>
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d163      	bne.n	80078f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	440a      	add	r2, r1
 8007842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800784a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b00      	cmp	r3, #0
 8007856:	f040 80ab 	bne.w	80079b0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d133      	bne.n	80078ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007884:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b2:	d81d      	bhi.n	80078f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ca:	d0ec      	beq.n	80078a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078cc:	e070      	b.n	80079b0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078ee:	e05f      	b.n	80079b0 <USB_HC_Halt+0x1ea>
            break;
 80078f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078f2:	e05d      	b.n	80079b0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	440a      	add	r2, r1
 800790a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007912:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d133      	bne.n	800798c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	440a      	add	r2, r1
 800793a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800793e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007942:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	4413      	add	r3, r2
 800794c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	440a      	add	r2, r1
 800795a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800795e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007962:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007970:	d81d      	bhi.n	80079ae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007988:	d0ec      	beq.n	8007964 <USB_HC_Halt+0x19e>
 800798a:	e011      	b.n	80079b0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	4413      	add	r3, r2
 8007994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	e000      	b.n	80079b0 <USB_HC_Halt+0x1ea>
          break;
 80079ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3724      	adds	r7, #36	; 0x24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80079d4:	2301      	movs	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	04da      	lsls	r2, r3, #19
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <USB_DoPing+0x74>)
 80079de:	4013      	ands	r3, r2
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	1ff80000 	.word	0x1ff80000

08007a38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff f912 	bl	8006c76 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a52:	2110      	movs	r1, #16
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff f96b 	bl	8006d30 <USB_FlushTxFifo>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff f997 	bl	8006d98 <USB_FlushRxFifo>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a74:	2300      	movs	r3, #0
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	e01f      	b.n	8007aba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007aa0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	461a      	mov	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b0f      	cmp	r3, #15
 8007abe:	d9dc      	bls.n	8007a7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e034      	b.n	8007b30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007adc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ae4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007aec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afa:	461a      	mov	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b0c:	d80c      	bhi.n	8007b28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b24:	d0ec      	beq.n	8007b00 <USB_StopHost+0xc8>
 8007b26:	e000      	b.n	8007b2a <USB_StopHost+0xf2>
        break;
 8007b28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b0f      	cmp	r3, #15
 8007b34:	d9c7      	bls.n	8007ac6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff f881 	bl	8006c54 <USB_EnableGlobalInt>

  return ret;
 8007b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZN6DS3231C1Ev>:
 *      Author: LeDuyAnh
 */

#include "DS3231.h"

DS3231::DS3231() {
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <_ZN6DS3231C1Ev+0x1c>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	0800ab2c 	.word	0x0800ab2c

08007b7c <_ZN6DS3231D1Ev>:

DS3231::~DS3231() {
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <_ZN6DS3231D1Ev+0x1c>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	0800ab2c 	.word	0x0800ab2c

08007b9c <_ZN6DS3231D0Ev>:
DS3231::~DS3231() {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
}
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ffe9 	bl	8007b7c <_ZN6DS3231D1Ev>
 8007baa:	2114      	movs	r1, #20
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 fe4b 	bl	800a848 <_ZdlPvj>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZN6DS323117DS3231_GetRegByteEh>:


uint8_t DS3231::DS3231_GetRegByte(uint8_t regAddr) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t val;                          //must shift 1 bit, requires by HAL I2C
	HAL_I2C_Master_Transmit(ds3231_dev, DS3231_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6918      	ldr	r0, [r3, #16]
 8007bcc:	1cfa      	adds	r2, r7, #3
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	21d0      	movs	r1, #208	; 0xd0
 8007bd8:	f7fb f9c2 	bl	8002f60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds3231_dev, DS3231_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6918      	ldr	r0, [r3, #16]
 8007be0:	f107 020f 	add.w	r2, r7, #15
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2301      	movs	r3, #1
 8007bec:	21d0      	movs	r1, #208	; 0xd0
 8007bee:	f7fb fab5 	bl	800315c <HAL_I2C_Master_Receive>
  // HAL_I2C_Mem_Write (ds3231_dev, DS3231_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, uint8_t * pData, uint16_t Size, uint32_t Timeout);
	return val;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN6DS323114DS3231_GetTempEv>:
	uint8_t bytes[2] = { regAddr, val };
	HAL_I2C_Master_Transmit(ds3231_dev, DS3231_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
  // HAL_I2C_Mem_Write (ds3231_dev, DS3231_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, uint8_t * pData, uint16_t Size, uint32_t Timeout);
}

float DS3231::DS3231_GetTemp(){
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    float val, val1, val2;
  val1 = DS3231_GetRegByte(TEMP_UPPER);
 8007c04:	2111      	movs	r1, #17
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff ffd8 	bl	8007bbc <_ZN6DS323117DS3231_GetRegByteEh>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	edc7 7a05 	vstr	s15, [r7, #20]
  val2 = DS3231_GetRegByte(TEMP_LOWER) >> 6;
 8007c1a:	2112      	movs	r1, #18
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ffcd 	bl	8007bbc <_ZN6DS323117DS3231_GetRegByteEh>
 8007c22:	4603      	mov	r3, r0
 8007c24:	099b      	lsrs	r3, r3, #6
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c30:	edc7 7a04 	vstr	s15, [r7, #16]
  val = val1 + val2*0.25f;
 8007c34:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c38:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c40:	ed97 7a05 	vldr	s14, [r7, #20]
 8007c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c48:	edc7 7a03 	vstr	s15, [r7, #12]
  return val;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	ee07 3a90 	vmov	s15, r3
}
 8007c52:	eeb0 0a67 	vmov.f32	s0, s15
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZN6DS323111ds3231_initEv>:
// void ds3231::ds3231_init(I2C_HandleTypeDef *hi2c1_p = &hi2c1){
//   this->ds3231_dev = hi2c1_p;
  
// }

void DS3231::ds3231_init(){
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  this->ds3231_dev = &hi2c1;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <_ZN6DS323111ds3231_initEv+0x1c>)
 8007c68:	611a      	str	r2, [r3, #16]
  
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	200000ac 	.word	0x200000ac

08007c7c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	4603      	mov	r3, r0
 8007c84:	460a      	mov	r2, r1
 8007c86:	71fb      	strb	r3, [r7, #7]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	4a14      	ldr	r2, [pc, #80]	; (8007ce0 <I2C_LCD_ExpanderWrite+0x64>)
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4413      	add	r3, r2
 8007c94:	785a      	ldrb	r2, [r3, #1]
 8007c96:	79bb      	ldrb	r3, [r7, #6]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8007c9e:	79fa      	ldrb	r2, [r7, #7]
 8007ca0:	4910      	ldr	r1, [pc, #64]	; (8007ce4 <I2C_LCD_ExpanderWrite+0x68>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	3304      	adds	r3, #4
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	79fa      	ldrb	r2, [r7, #7]
 8007cb2:	490c      	ldr	r1, [pc, #48]	; (8007ce4 <I2C_LCD_ExpanderWrite+0x68>)
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	b299      	uxth	r1, r3
 8007cc8:	f107 020f 	add.w	r2, r7, #15
 8007ccc:	2364      	movs	r3, #100	; 0x64
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f7fb f945 	bl	8002f60 <HAL_I2C_Master_Transmit>
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	200001fc 	.word	0x200001fc
 8007ce4:	0800ab34 	.word	0x0800ab34

08007ce8 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	460a      	mov	r2, r1
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8007cf8:	79bb      	ldrb	r3, [r7, #6]
 8007cfa:	f043 0304 	orr.w	r3, r3, #4
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff ffb9 	bl	8007c7c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8007d0a:	4b23      	ldr	r3, [pc, #140]	; (8007d98 <I2C_LCD_EnPulse+0xb0>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	4b22      	ldr	r3, [pc, #136]	; (8007d9c <I2C_LCD_EnPulse+0xb4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a22      	ldr	r2, [pc, #136]	; (8007da0 <I2C_LCD_EnPulse+0xb8>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0c9b      	lsrs	r3, r3, #18
 8007d1c:	005a      	lsls	r2, r3, #1
 8007d1e:	4b1f      	ldr	r3, [pc, #124]	; (8007d9c <I2C_LCD_EnPulse+0xb4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	491f      	ldr	r1, [pc, #124]	; (8007da0 <I2C_LCD_EnPulse+0xb8>)
 8007d24:	fba1 1303 	umull	r1, r3, r1, r3
 8007d28:	0c9b      	lsrs	r3, r3, #18
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	bf00      	nop
 8007d32:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <I2C_LCD_EnPulse+0xb0>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d8f8      	bhi.n	8007d32 <I2C_LCD_EnPulse+0x4a>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8007d40:	79bb      	ldrb	r3, [r7, #6]
 8007d42:	f023 0304 	bic.w	r3, r3, #4
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff ff95 	bl	8007c7c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8007d52:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <I2C_LCD_EnPulse+0xb0>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <I2C_LCD_EnPulse+0xb4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <I2C_LCD_EnPulse+0xb8>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	0c9b      	lsrs	r3, r3, #18
 8007d64:	2232      	movs	r2, #50	; 0x32
 8007d66:	fb03 f202 	mul.w	r2, r3, r2
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <I2C_LCD_EnPulse+0xb4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	490c      	ldr	r1, [pc, #48]	; (8007da0 <I2C_LCD_EnPulse+0xb8>)
 8007d70:	fba1 1303 	umull	r1, r3, r1, r3
 8007d74:	0c9b      	lsrs	r3, r3, #18
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	bf00      	nop
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <I2C_LCD_EnPulse+0xb0>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d8f8      	bhi.n	8007d7e <I2C_LCD_EnPulse+0x96>
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	e000e010 	.word	0xe000e010
 8007d9c:	20000000 	.word	0x20000000
 8007da0:	431bde83 	.word	0x431bde83

08007da4 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	460a      	mov	r2, r1
 8007dae:	71fb      	strb	r3, [r7, #7]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8007db4:	79ba      	ldrb	r2, [r7, #6]
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff ff5e 	bl	8007c7c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8007dc0:	79ba      	ldrb	r2, [r7, #6]
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ff8e 	bl	8007ce8 <I2C_LCD_EnPulse>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
 8007dde:	460b      	mov	r3, r1
 8007de0:	71bb      	strb	r3, [r7, #6]
 8007de2:	4613      	mov	r3, r2
 8007de4:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8007de6:	79bb      	ldrb	r3, [r7, #6]
 8007de8:	f023 030f 	bic.w	r3, r3, #15
 8007dec:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8007dee:	79bb      	ldrb	r3, [r7, #6]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8007df4:	7bfa      	ldrb	r2, [r7, #15]
 8007df6:	797b      	ldrb	r3, [r7, #5]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff ffcf 	bl	8007da4 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8007e06:	7bba      	ldrb	r2, [r7, #14]
 8007e08:	797b      	ldrb	r3, [r7, #5]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ffc6 	bl	8007da4 <I2C_LCD_Write4Bits>
}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	460a      	mov	r2, r1
 8007e2a:	71fb      	strb	r3, [r7, #7]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8007e30:	79b9      	ldrb	r1, [r7, #6]
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2200      	movs	r2, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ffcc 	bl	8007dd4 <I2C_LCD_Send>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	71fb      	strb	r3, [r7, #7]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8007e54:	79b9      	ldrb	r1, [r7, #6]
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff ffba 	bl	8007dd4 <I2C_LCD_Send>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8007e72:	bf00      	nop
 8007e74:	f7f8 fffe 	bl	8000e74 <HAL_GetTick>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b31      	cmp	r3, #49	; 0x31
 8007e7c:	d9fa      	bls.n	8007e74 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	2130      	movs	r1, #48	; 0x30
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff ffcc 	bl	8007e20 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007e88:	2300      	movs	r3, #0
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	e020      	b.n	8007ed0 <I2C_LCD_Init+0x68>
 8007e8e:	4b4c      	ldr	r3, [pc, #304]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	4b4b      	ldr	r3, [pc, #300]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a4b      	ldr	r2, [pc, #300]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9e:	0c9b      	lsrs	r3, r3, #18
 8007ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ea4:	fb03 f202 	mul.w	r2, r3, r2
 8007ea8:	4b46      	ldr	r3, [pc, #280]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4946      	ldr	r1, [pc, #280]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007eae:	fba1 1303 	umull	r1, r3, r1, r3
 8007eb2:	0c9b      	lsrs	r3, r3, #18
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	bf00      	nop
 8007ebc:	4b40      	ldr	r3, [pc, #256]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d8f8      	bhi.n	8007ebc <I2C_LCD_Init+0x54>
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	3301      	adds	r3, #1
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d9db      	bls.n	8007e8e <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	2130      	movs	r1, #48	; 0x30
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff ffa0 	bl	8007e20 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	623b      	str	r3, [r7, #32]
 8007ee4:	e020      	b.n	8007f28 <I2C_LCD_Init+0xc0>
 8007ee6:	4b36      	ldr	r3, [pc, #216]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	4b35      	ldr	r3, [pc, #212]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a35      	ldr	r2, [pc, #212]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	0c9b      	lsrs	r3, r3, #18
 8007ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007efc:	fb03 f202 	mul.w	r2, r3, r2
 8007f00:	4b30      	ldr	r3, [pc, #192]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4930      	ldr	r1, [pc, #192]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007f06:	fba1 1303 	umull	r1, r3, r1, r3
 8007f0a:	0c9b      	lsrs	r3, r3, #18
 8007f0c:	085b      	lsrs	r3, r3, #1
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	bf00      	nop
 8007f14:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d8f8      	bhi.n	8007f14 <I2C_LCD_Init+0xac>
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	3301      	adds	r3, #1
 8007f26:	623b      	str	r3, [r7, #32]
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d9db      	bls.n	8007ee6 <I2C_LCD_Init+0x7e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	2130      	movs	r1, #48	; 0x30
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff ff74 	bl	8007e20 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8007f38:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	61fb      	str	r3, [r7, #28]
 8007f3e:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	0c9b      	lsrs	r3, r3, #18
 8007f4a:	2296      	movs	r2, #150	; 0x96
 8007f4c:	fb03 f202 	mul.w	r2, r3, r2
 8007f50:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <I2C_LCD_Init+0x15c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	491c      	ldr	r1, [pc, #112]	; (8007fc8 <I2C_LCD_Init+0x160>)
 8007f56:	fba1 1303 	umull	r1, r3, r1, r3
 8007f5a:	0c9b      	lsrs	r3, r3, #18
 8007f5c:	085b      	lsrs	r3, r3, #1
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	bf00      	nop
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <I2C_LCD_Init+0x158>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d8f8      	bhi.n	8007f64 <I2C_LCD_Init+0xfc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2102      	movs	r1, #2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff ff52 	bl	8007e20 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2128      	movs	r1, #40	; 0x28
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff ff4d 	bl	8007e20 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	210c      	movs	r1, #12
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff ff48 	bl	8007e20 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2106      	movs	r1, #6
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff ff43 	bl	8007e20 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <I2C_LCD_Init+0x164>)
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <I2C_LCD_Init+0x164>)
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	2208      	movs	r2, #8
 8007fae:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f80c 	bl	8007fd0 <I2C_LCD_Clear>
}
 8007fb8:	bf00      	nop
 8007fba:	3728      	adds	r7, #40	; 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	e000e010 	.word	0xe000e010
 8007fc4:	20000000 	.word	0x20000000
 8007fc8:	431bde83 	.word	0x431bde83
 8007fcc:	200001fc 	.word	0x200001fc

08007fd0 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff ff1e 	bl	8007e20 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e020      	b.n	800802c <I2C_LCD_Clear+0x5c>
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <I2C_LCD_Clear+0x6c>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	4b13      	ldr	r3, [pc, #76]	; (8008040 <I2C_LCD_Clear+0x70>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a13      	ldr	r2, [pc, #76]	; (8008044 <I2C_LCD_Clear+0x74>)
 8007ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffa:	0c9b      	lsrs	r3, r3, #18
 8007ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008000:	fb03 f202 	mul.w	r2, r3, r2
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <I2C_LCD_Clear+0x70>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	490e      	ldr	r1, [pc, #56]	; (8008044 <I2C_LCD_Clear+0x74>)
 800800a:	fba1 1303 	umull	r1, r3, r1, r3
 800800e:	0c9b      	lsrs	r3, r3, #18
 8008010:	085b      	lsrs	r3, r3, #1
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	bf00      	nop
 8008018:	4b08      	ldr	r3, [pc, #32]	; (800803c <I2C_LCD_Clear+0x6c>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	429a      	cmp	r2, r3
 8008024:	d8f8      	bhi.n	8008018 <I2C_LCD_Clear+0x48>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	3301      	adds	r3, #1
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d9db      	bls.n	8007fea <I2C_LCD_Clear+0x1a>
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	e000e010 	.word	0xe000e010
 8008040:	20000000 	.word	0x20000000
 8008044:	431bde83 	.word	0x431bde83

08008048 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	71fb      	strb	r3, [r7, #7]
 8008052:	460b      	mov	r3, r1
 8008054:	71bb      	strb	r3, [r7, #6]
 8008056:	4613      	mov	r3, r2
 8008058:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800805a:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <I2C_LCD_SetCursor+0x7c>)
 800805c:	f107 0408 	add.w	r4, r7, #8
 8008060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8008066:	79fa      	ldrb	r2, [r7, #7]
 8008068:	4917      	ldr	r1, [pc, #92]	; (80080c8 <I2C_LCD_SetCursor+0x80>)
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	330a      	adds	r3, #10
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	797a      	ldrb	r2, [r7, #5]
 800807a:	429a      	cmp	r2, r3
 800807c:	d90a      	bls.n	8008094 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800807e:	79fa      	ldrb	r2, [r7, #7]
 8008080:	4911      	ldr	r1, [pc, #68]	; (80080c8 <I2C_LCD_SetCursor+0x80>)
 8008082:	4613      	mov	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	330a      	adds	r3, #10
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	3b01      	subs	r3, #1
 8008092:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8008094:	797b      	ldrb	r3, [r7, #5]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	3318      	adds	r3, #24
 800809a:	443b      	add	r3, r7
 800809c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	79bb      	ldrb	r3, [r7, #6]
 80080a4:	4413      	add	r3, r2
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	b25b      	sxtb	r3, r3
 80080aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff feb2 	bl	8007e20 <I2C_LCD_Cmd>
}
 80080bc:	bf00      	nop
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd90      	pop	{r4, r7, pc}
 80080c4:	0800aae8 	.word	0x0800aae8
 80080c8:	0800ab34 	.word	0x0800ab34

080080cc <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80080d8:	e008      	b.n	80080ec <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	603a      	str	r2, [r7, #0]
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	4611      	mov	r1, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff feac 	bl	8007e44 <I2C_LCD_Data>
    while (*Str)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f2      	bne.n	80080da <I2C_LCD_WriteString+0xe>
    }
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080fe:	b590      	push	{r4, r7, lr}
 8008100:	b089      	sub	sp, #36	; 0x24
 8008102:	af04      	add	r7, sp, #16
 8008104:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008106:	2301      	movs	r3, #1
 8008108:	2202      	movs	r2, #2
 800810a:	2102      	movs	r1, #2
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc67 	bl	80089e0 <USBH_FindInterface>
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	2bff      	cmp	r3, #255	; 0xff
 800811a:	d002      	beq.n	8008122 <USBH_CDC_InterfaceInit+0x24>
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d901      	bls.n	8008126 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008122:	2302      	movs	r3, #2
 8008124:	e13d      	b.n	80083a2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc3c 	bl	80089a8 <USBH_SelectInterface>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800813a:	2302      	movs	r3, #2
 800813c:	e131      	b.n	80083a2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008144:	2050      	movs	r0, #80	; 0x50
 8008146:	f002 fbad 	bl	800a8a4 <malloc>
 800814a:	4603      	mov	r3, r0
 800814c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	e11f      	b.n	80083a2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008162:	2250      	movs	r2, #80	; 0x50
 8008164:	2100      	movs	r1, #0
 8008166:	68b8      	ldr	r0, [r7, #8]
 8008168:	f002 fbac 	bl	800a8c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	211a      	movs	r1, #26
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	4413      	add	r3, r2
 8008178:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b25b      	sxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	da15      	bge.n	80081b0 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	211a      	movs	r1, #26
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	4413      	add	r3, r2
 8008190:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	211a      	movs	r1, #26
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 ff2d 	bl	800a016 <USBH_AllocPipe>
 80081bc:	4603      	mov	r3, r0
 80081be:	461a      	mov	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	7819      	ldrb	r1, [r3, #0]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	7858      	ldrb	r0, [r3, #1]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	8952      	ldrh	r2, [r2, #10]
 80081dc:	9202      	str	r2, [sp, #8]
 80081de:	2203      	movs	r2, #3
 80081e0:	9201      	str	r2, [sp, #4]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4623      	mov	r3, r4
 80081e6:	4602      	mov	r2, r0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 fee5 	bl	8009fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f002 faa2 	bl	800a740 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081fc:	2300      	movs	r3, #0
 80081fe:	2200      	movs	r2, #0
 8008200:	210a      	movs	r1, #10
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fbec 	bl	80089e0 <USBH_FindInterface>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2bff      	cmp	r3, #255	; 0xff
 8008210:	d002      	beq.n	8008218 <USBH_CDC_InterfaceInit+0x11a>
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d901      	bls.n	800821c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008218:	2302      	movs	r3, #2
 800821a:	e0c2      	b.n	80083a2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	211a      	movs	r1, #26
 8008222:	fb01 f303 	mul.w	r3, r1, r3
 8008226:	4413      	add	r3, r2
 8008228:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b25b      	sxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	da16      	bge.n	8008262 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	211a      	movs	r1, #26
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	4413      	add	r3, r2
 8008240:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	211a      	movs	r1, #26
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	4413      	add	r3, r2
 8008256:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	835a      	strh	r2, [r3, #26]
 8008260:	e015      	b.n	800828e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	211a      	movs	r1, #26
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	4413      	add	r3, r2
 800826e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	211a      	movs	r1, #26
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	4413      	add	r3, r2
 8008284:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	211a      	movs	r1, #26
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	4413      	add	r3, r2
 800829a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da16      	bge.n	80082d4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	211a      	movs	r1, #26
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	211a      	movs	r1, #26
 80082c2:	fb01 f303 	mul.w	r3, r1, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	835a      	strh	r2, [r3, #26]
 80082d2:	e015      	b.n	8008300 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	211a      	movs	r1, #26
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	211a      	movs	r1, #26
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082fa:	881a      	ldrh	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	7b9b      	ldrb	r3, [r3, #14]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fe85 	bl	800a016 <USBH_AllocPipe>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	7bdb      	ldrb	r3, [r3, #15]
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fe7b 	bl	800a016 <USBH_AllocPipe>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	7b59      	ldrb	r1, [r3, #13]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	7b98      	ldrb	r0, [r3, #14]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	8b12      	ldrh	r2, [r2, #24]
 8008340:	9202      	str	r2, [sp, #8]
 8008342:	2202      	movs	r2, #2
 8008344:	9201      	str	r2, [sp, #4]
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	4623      	mov	r3, r4
 800834a:	4602      	mov	r2, r0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fe33 	bl	8009fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	7b19      	ldrb	r1, [r3, #12]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	7bd8      	ldrb	r0, [r3, #15]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	8b52      	ldrh	r2, [r2, #26]
 800836a:	9202      	str	r2, [sp, #8]
 800836c:	2202      	movs	r2, #2
 800836e:	9201      	str	r2, [sp, #4]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	4623      	mov	r3, r4
 8008374:	4602      	mov	r2, r0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fe1e 	bl	8009fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	7b5b      	ldrb	r3, [r3, #13]
 8008388:	2200      	movs	r2, #0
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f002 f9d7 	bl	800a740 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	7b1b      	ldrb	r3, [r3, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 f9d0 	bl	800a740 <USBH_LL_SetToggle>

  return USBH_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}

080083aa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fe13 	bl	8009ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fe3e 	bl	800a058 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	7b1b      	ldrb	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00e      	beq.n	8008408 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	7b1b      	ldrb	r3, [r3, #12]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 fe00 	bl	8009ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7b1b      	ldrb	r3, [r3, #12]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fe2b 	bl	800a058 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	7b5b      	ldrb	r3, [r3, #13]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	7b5b      	ldrb	r3, [r3, #13]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fded 	bl	8009ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	7b5b      	ldrb	r3, [r3, #13]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fe18 	bl	800a058 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	4618      	mov	r0, r3
 8008444:	f002 fa36 	bl	800a8b4 <free>
    phost->pActiveClass->pData = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844e:	2200      	movs	r2, #0
 8008450:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3340      	adds	r3, #64	; 0x40
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8b2 	bl	80085de <GetLineCoding>
 800847a:	4603      	mov	r3, r0
 800847c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800848a:	2102      	movs	r1, #2
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008490:	7afb      	ldrb	r3, [r7, #11]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d877      	bhi.n	80085b0 <USBH_CDC_Process+0x114>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBH_CDC_Process+0x2c>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	080084e3 	.word	0x080084e3
 80084d0:	08008513 	.word	0x08008513
 80084d4:	08008587 	.word	0x08008587
 80084d8:	08008595 	.word	0x08008595
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e06d      	b.n	80085be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f897 	bl	800861c <SetLineCoding>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008500:	e058      	b.n	80085b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d055      	beq.n	80085b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2204      	movs	r2, #4
 800850c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008510:	e050      	b.n	80085b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3340      	adds	r3, #64	; 0x40
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f860 	bl	80085de <GetLineCoding>
 800851e:	4603      	mov	r3, r0
 8008520:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d126      	bne.n	8008576 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	791b      	ldrb	r3, [r3, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d13b      	bne.n	80085b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800854c:	429a      	cmp	r2, r3
 800854e:	d133      	bne.n	80085b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800855c:	429a      	cmp	r2, r3
 800855e:	d12b      	bne.n	80085b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008568:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800856a:	429a      	cmp	r2, r3
 800856c:	d124      	bne.n	80085b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f958 	bl	8008824 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008574:	e020      	b.n	80085b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d01d      	beq.n	80085b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2204      	movs	r2, #4
 8008580:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008584:	e018      	b.n	80085b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f867 	bl	800865a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f8da 	bl	8008746 <CDC_ProcessReception>
      break;
 8008592:	e014      	b.n	80085be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008594:	2100      	movs	r1, #0
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 ffef 	bl	800957a <USBH_ClrFeature>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80085ae:	e005      	b.n	80085bc <USBH_CDC_Process+0x120>

    default:
      break;
 80085b0:	bf00      	nop
 80085b2:	e004      	b.n	80085be <USBH_CDC_Process+0x122>
      break;
 80085b4:	bf00      	nop
 80085b6:	e002      	b.n	80085be <USBH_CDC_Process+0x122>
      break;
 80085b8:	bf00      	nop
 80085ba:	e000      	b.n	80085be <USBH_CDC_Process+0x122>
      break;
 80085bc:	bf00      	nop

  }

  return status;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	22a1      	movs	r2, #161	; 0xa1
 80085ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2221      	movs	r2, #33	; 0x21
 80085f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2207      	movs	r2, #7
 8008604:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2207      	movs	r2, #7
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fa81 	bl	8009b14 <USBH_CtlReq>
 8008612:	4603      	mov	r3, r0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2221      	movs	r2, #33	; 0x21
 800862a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2207      	movs	r2, #7
 8008642:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2207      	movs	r2, #7
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 fa62 	bl	8009b14 <USBH_CtlReq>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b086      	sub	sp, #24
 800865e:	af02      	add	r7, sp, #8
 8008660:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800866c:	2300      	movs	r3, #0
 800866e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008676:	2b01      	cmp	r3, #1
 8008678:	d002      	beq.n	8008680 <CDC_ProcessTransmission+0x26>
 800867a:	2b02      	cmp	r3, #2
 800867c:	d023      	beq.n	80086c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800867e:	e05e      	b.n	800873e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	8b12      	ldrh	r2, [r2, #24]
 8008688:	4293      	cmp	r3, r2
 800868a:	d90b      	bls.n	80086a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	69d9      	ldr	r1, [r3, #28]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8b1a      	ldrh	r2, [r3, #24]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	7b5b      	ldrb	r3, [r3, #13]
 8008698:	2001      	movs	r0, #1
 800869a:	9000      	str	r0, [sp, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fc48 	bl	8009f32 <USBH_BulkSendData>
 80086a2:	e00b      	b.n	80086bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	7b5b      	ldrb	r3, [r3, #13]
 80086b2:	2001      	movs	r0, #1
 80086b4:	9000      	str	r0, [sp, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fc3b 	bl	8009f32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086c4:	e03b      	b.n	800873e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	7b5b      	ldrb	r3, [r3, #13]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f002 f80d 	bl	800a6ec <USBH_LL_GetURBState>
 80086d2:	4603      	mov	r3, r0
 80086d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d128      	bne.n	800872e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	8b12      	ldrh	r2, [r2, #24]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d90e      	bls.n	8008706 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	8b12      	ldrh	r2, [r2, #24]
 80086f0:	1a9a      	subs	r2, r3, r2
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	8b12      	ldrh	r2, [r2, #24]
 80086fe:	441a      	add	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	61da      	str	r2, [r3, #28]
 8008704:	e002      	b.n	800870c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800871c:	e00e      	b.n	800873c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f868 	bl	80087fc <USBH_CDC_TransmitCallback>
      break;
 800872c:	e006      	b.n	800873c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d103      	bne.n	800873c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800873c:	bf00      	nop
  }
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008758:	2300      	movs	r3, #0
 800875a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008762:	2b03      	cmp	r3, #3
 8008764:	d002      	beq.n	800876c <CDC_ProcessReception+0x26>
 8008766:	2b04      	cmp	r3, #4
 8008768:	d00e      	beq.n	8008788 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800876a:	e043      	b.n	80087f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	6a19      	ldr	r1, [r3, #32]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	8b5a      	ldrh	r2, [r3, #26]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	7b1b      	ldrb	r3, [r3, #12]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fbff 	bl	8009f7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2204      	movs	r2, #4
 8008782:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008786:	e035      	b.n	80087f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	7b1b      	ldrb	r3, [r3, #12]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 ffac 	bl	800a6ec <USBH_LL_GetURBState>
 8008794:	4603      	mov	r3, r0
 8008796:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008798:	7cfb      	ldrb	r3, [r7, #19]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d129      	bne.n	80087f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	7b1b      	ldrb	r3, [r3, #12]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 ff0f 	bl	800a5c8 <USBH_LL_GetLastXferSize>
 80087aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d016      	beq.n	80087e4 <CDC_ProcessReception+0x9e>
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	8b5b      	ldrh	r3, [r3, #26]
 80087ba:	461a      	mov	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4293      	cmp	r3, r2
 80087c0:	d910      	bls.n	80087e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	6a1a      	ldr	r2, [r3, #32]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	441a      	add	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2203      	movs	r2, #3
 80087de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80087e2:	e006      	b.n	80087f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f80f 	bl	8008810 <USBH_CDC_ReceiveCallback>
      break;
 80087f2:	bf00      	nop
  }
}
 80087f4:	bf00      	nop
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	e029      	b.n	80088a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	79fa      	ldrb	r2, [r7, #7]
 8008854:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f81f 	bl	80088ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f001 fddf 	bl	800a460 <USBH_LL_Init>

  return USBH_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	e009      	b.n	80088d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	33e0      	adds	r3, #224	; 0xe0
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	2200      	movs	r2, #0
 80088ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b0f      	cmp	r3, #15
 80088d6:	d9f2      	bls.n	80088be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e009      	b.n	80088f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088e8:	2200      	movs	r2, #0
 80088ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f8:	d3f1      	bcc.n	80088de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2240      	movs	r2, #64	; 0x40
 800891e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d016      	beq.n	8008996 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10e      	bne.n	8008990 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008978:	1c59      	adds	r1, r3, #1
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	33de      	adds	r3, #222	; 0xde
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
 800898e:	e004      	b.n	800899a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008990:	2302      	movs	r3, #2
 8008992:	73fb      	strb	r3, [r7, #15]
 8008994:	e001      	b.n	800899a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d204      	bcs.n	80089ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80089cc:	e001      	b.n	80089d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80089ce:	2302      	movs	r3, #2
 80089d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	4608      	mov	r0, r1
 80089ea:	4611      	mov	r1, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	70fb      	strb	r3, [r7, #3]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70bb      	strb	r3, [r7, #2]
 80089f6:	4613      	mov	r3, r2
 80089f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a08:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a0a:	e025      	b.n	8008a58 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	221a      	movs	r2, #26
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	3308      	adds	r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	3302      	adds	r3, #2
 8008a1c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	795b      	ldrb	r3, [r3, #5]
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d002      	beq.n	8008a2e <USBH_FindInterface+0x4e>
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	2bff      	cmp	r3, #255	; 0xff
 8008a2c:	d111      	bne.n	8008a52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a32:	78ba      	ldrb	r2, [r7, #2]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d002      	beq.n	8008a3e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a38:	78bb      	ldrb	r3, [r7, #2]
 8008a3a:	2bff      	cmp	r3, #255	; 0xff
 8008a3c:	d109      	bne.n	8008a52 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a42:	787a      	ldrb	r2, [r7, #1]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d002      	beq.n	8008a4e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a48:	787b      	ldrb	r3, [r7, #1]
 8008a4a:	2bff      	cmp	r3, #255	; 0xff
 8008a4c:	d101      	bne.n	8008a52 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	e006      	b.n	8008a60 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	3301      	adds	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d9d6      	bls.n	8008a0c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a5e:	23ff      	movs	r3, #255	; 0xff
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fd2f 	bl	800a4d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 fe48 	bl	800a712 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a94:	2302      	movs	r3, #2
 8008a96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b0b      	cmp	r3, #11
 8008ab6:	f200 81be 	bhi.w	8008e36 <USBH_Process+0x3aa>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBH_Process+0x34>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008b23 	.word	0x08008b23
 8008ac8:	08008b8b 	.word	0x08008b8b
 8008acc:	08008dd1 	.word	0x08008dd1
 8008ad0:	08008e37 	.word	0x08008e37
 8008ad4:	08008c2f 	.word	0x08008c2f
 8008ad8:	08008d77 	.word	0x08008d77
 8008adc:	08008c65 	.word	0x08008c65
 8008ae0:	08008c85 	.word	0x08008c85
 8008ae4:	08008ca5 	.word	0x08008ca5
 8008ae8:	08008ce9 	.word	0x08008ce9
 8008aec:	08008db9 	.word	0x08008db9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 819e 	beq.w	8008e3a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b04:	20c8      	movs	r0, #200	; 0xc8
 8008b06:	f001 fe4b 	bl	800a7a0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fd41 	bl	800a592 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b20:	e18b      	b.n	8008e3a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b3a:	e18d      	b.n	8008e58 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b46:	d914      	bls.n	8008b72 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d903      	bls.n	8008b6a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	220d      	movs	r2, #13
 8008b66:	701a      	strb	r2, [r3, #0]
      break;
 8008b68:	e176      	b.n	8008e58 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
      break;
 8008b70:	e172      	b.n	8008e58 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b78:	f103 020a 	add.w	r2, r3, #10
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008b82:	200a      	movs	r0, #10
 8008b84:	f001 fe0c 	bl	800a7a0 <USBH_Delay>
      break;
 8008b88:	e166      	b.n	8008e58 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b9a:	2104      	movs	r1, #4
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ba0:	2064      	movs	r0, #100	; 0x64
 8008ba2:	f001 fdfd 	bl	800a7a0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 fccc 	bl	800a544 <USBH_LL_GetSpeed>
 8008bac:	4603      	mov	r3, r0
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fa29 	bl	800a016 <USBH_AllocPipe>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008bcc:	2180      	movs	r1, #128	; 0x80
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fa21 	bl	800a016 <USBH_AllocPipe>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7919      	ldrb	r1, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2280      	movs	r2, #128	; 0x80
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 f9da 	bl	8009fb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7959      	ldrb	r1, [r3, #5]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c18:	b292      	uxth	r2, r2
 8008c1a:	9202      	str	r2, [sp, #8]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4603      	mov	r3, r0
 8008c24:	2200      	movs	r2, #0
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 f9c6 	bl	8009fb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c2c:	e114      	b.n	8008e58 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f918 	bl	8008e64 <USBH_HandleEnum>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 80fe 	bne.w	8008e3e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d103      	bne.n	8008c5c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2208      	movs	r2, #8
 8008c58:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c5a:	e0f0      	b.n	8008e3e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2207      	movs	r2, #7
 8008c60:	701a      	strb	r2, [r3, #0]
      break;
 8008c62:	e0ec      	b.n	8008e3e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80e9 	beq.w	8008e42 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c76:	2101      	movs	r1, #1
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2208      	movs	r2, #8
 8008c80:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008c82:	e0de      	b.n	8008e42 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fc2c 	bl	80094ec <USBH_SetCfg>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f040 80d5 	bne.w	8008e46 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2209      	movs	r2, #9
 8008ca0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ca2:	e0d0      	b.n	8008e46 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d016      	beq.n	8008ce0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fc3c 	bl	8009532 <USBH_SetFeature>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	220a      	movs	r2, #10
 8008cca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ccc:	e0bd      	b.n	8008e4a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	f040 80b9 	bne.w	8008e4a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	220a      	movs	r2, #10
 8008cdc:	701a      	strb	r2, [r3, #0]
      break;
 8008cde:	e0b4      	b.n	8008e4a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e0b0      	b.n	8008e4a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80ad 	beq.w	8008e4e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e016      	b.n	8008d30 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d02:	7bfa      	ldrb	r2, [r7, #15]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	32de      	adds	r2, #222	; 0xde
 8008d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0c:	791a      	ldrb	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d108      	bne.n	8008d2a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d18:	7bfa      	ldrb	r2, [r7, #15]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	32de      	adds	r2, #222	; 0xde
 8008d1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008d28:	e005      	b.n	8008d36 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0e5      	beq.n	8008d02 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d016      	beq.n	8008d6e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2206      	movs	r2, #6
 8008d56:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d5e:	2103      	movs	r1, #3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d64:	e073      	b.n	8008e4e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	220d      	movs	r2, #13
 8008d6a:	701a      	strb	r2, [r3, #0]
      break;
 8008d6c:	e06f      	b.n	8008e4e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	220d      	movs	r2, #13
 8008d72:	701a      	strb	r2, [r3, #0]
      break;
 8008d74:	e06b      	b.n	8008e4e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d017      	beq.n	8008db0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d103      	bne.n	8008da0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	220b      	movs	r2, #11
 8008d9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d9e:	e058      	b.n	8008e52 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d154      	bne.n	8008e52 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	220d      	movs	r2, #13
 8008dac:	701a      	strb	r2, [r3, #0]
      break;
 8008dae:	e050      	b.n	8008e52 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	220d      	movs	r2, #13
 8008db4:	701a      	strb	r2, [r3, #0]
      break;
 8008db6:	e04c      	b.n	8008e52 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d049      	beq.n	8008e56 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
      }
      break;
 8008dce:	e042      	b.n	8008e56 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fd67 	bl	80088ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d005      	beq.n	8008e12 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e0c:	2105      	movs	r1, #5
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d107      	bne.n	8008e2e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fe20 	bl	8008a6c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e2c:	e014      	b.n	8008e58 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 fb52 	bl	800a4d8 <USBH_LL_Start>
      break;
 8008e34:	e010      	b.n	8008e58 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e36:	bf00      	nop
 8008e38:	e00e      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e00c      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e00a      	b.n	8008e58 <USBH_Process+0x3cc>
    break;
 8008e42:	bf00      	nop
 8008e44:	e008      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e46:	bf00      	nop
 8008e48:	e006      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e004      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e002      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e52:	bf00      	nop
 8008e54:	e000      	b.n	8008e58 <USBH_Process+0x3cc>
      break;
 8008e56:	bf00      	nop
  }
  return USBH_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop

08008e64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af04      	add	r7, sp, #16
 8008e6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e70:	2301      	movs	r3, #1
 8008e72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b07      	cmp	r3, #7
 8008e7a:	f200 81c1 	bhi.w	8009200 <USBH_HandleEnum+0x39c>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <USBH_HandleEnum+0x20>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ea5 	.word	0x08008ea5
 8008e88:	08008f63 	.word	0x08008f63
 8008e8c:	08008fcd 	.word	0x08008fcd
 8008e90:	0800905b 	.word	0x0800905b
 8008e94:	080090c5 	.word	0x080090c5
 8008e98:	08009135 	.word	0x08009135
 8008e9c:	0800917b 	.word	0x0800917b
 8008ea0:	080091c1 	.word	0x080091c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ea4:	2108      	movs	r1, #8
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa50 	bl	800934c <USBH_Get_DevDesc>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d130      	bne.n	8008f18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7919      	ldrb	r1, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008eda:	b292      	uxth	r2, r2
 8008edc:	9202      	str	r2, [sp, #8]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	9201      	str	r2, [sp, #4]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2280      	movs	r2, #128	; 0x80
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f865 	bl	8009fb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7959      	ldrb	r1, [r3, #5]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f02:	b292      	uxth	r2, r2
 8008f04:	9202      	str	r2, [sp, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	9201      	str	r2, [sp, #4]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f851 	bl	8009fb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f16:	e175      	b.n	8009204 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	f040 8172 	bne.w	8009204 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d903      	bls.n	8008f42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220d      	movs	r2, #13
 8008f3e:	701a      	strb	r2, [r3, #0]
      break;
 8008f40:	e160      	b.n	8009204 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	795b      	ldrb	r3, [r3, #5]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f885 	bl	800a058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	791b      	ldrb	r3, [r3, #4]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f87f 	bl	800a058 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
      break;
 8008f60:	e150      	b.n	8009204 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f62:	2112      	movs	r1, #18
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f9f1 	bl	800934c <USBH_Get_DevDesc>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f7a:	e145      	b.n	8009208 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	f040 8142 	bne.w	8009208 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d903      	bls.n	8008fa6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	220d      	movs	r2, #13
 8008fa2:	701a      	strb	r2, [r3, #0]
      break;
 8008fa4:	e130      	b.n	8009208 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	795b      	ldrb	r3, [r3, #5]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 f853 	bl	800a058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	791b      	ldrb	r3, [r3, #4]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 f84d 	bl	800a058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
      break;
 8008fca:	e11d      	b.n	8009208 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008fcc:	2101      	movs	r1, #1
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa68 	bl	80094a4 <USBH_SetAddress>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d132      	bne.n	8009044 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008fde:	2002      	movs	r0, #2
 8008fe0:	f001 fbde 	bl	800a7a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2203      	movs	r2, #3
 8008ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7919      	ldrb	r1, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009006:	b292      	uxth	r2, r2
 8009008:	9202      	str	r2, [sp, #8]
 800900a:	2200      	movs	r2, #0
 800900c:	9201      	str	r2, [sp, #4]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4603      	mov	r3, r0
 8009012:	2280      	movs	r2, #128	; 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 ffcf 	bl	8009fb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7959      	ldrb	r1, [r3, #5]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800902e:	b292      	uxth	r2, r2
 8009030:	9202      	str	r2, [sp, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	2200      	movs	r2, #0
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 ffbb 	bl	8009fb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009042:	e0e3      	b.n	800920c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b03      	cmp	r3, #3
 8009048:	f040 80e0 	bne.w	800920c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	220d      	movs	r2, #13
 8009050:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	705a      	strb	r2, [r3, #1]
      break;
 8009058:	e0d8      	b.n	800920c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800905a:	2109      	movs	r1, #9
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f99d 	bl	800939c <USBH_Get_CfgDesc>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2204      	movs	r2, #4
 8009070:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009072:	e0cd      	b.n	8009210 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b03      	cmp	r3, #3
 8009078:	f040 80ca 	bne.w	8009210 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009082:	3301      	adds	r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009092:	2b03      	cmp	r3, #3
 8009094:	d903      	bls.n	800909e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	220d      	movs	r2, #13
 800909a:	701a      	strb	r2, [r3, #0]
      break;
 800909c:	e0b8      	b.n	8009210 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 ffd7 	bl	800a058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 ffd1 	bl	800a058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
      break;
 80090c2:	e0a5      	b.n	8009210 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f965 	bl	800939c <USBH_Get_CfgDesc>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d103      	bne.n	80090e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2205      	movs	r2, #5
 80090e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090e2:	e097      	b.n	8009214 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	f040 8094 	bne.w	8009214 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090f2:	3301      	adds	r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009102:	2b03      	cmp	r3, #3
 8009104:	d903      	bls.n	800910e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	220d      	movs	r2, #13
 800910a:	701a      	strb	r2, [r3, #0]
      break;
 800910c:	e082      	b.n	8009214 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	795b      	ldrb	r3, [r3, #5]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 ff9f 	bl	800a058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	791b      	ldrb	r3, [r3, #4]
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 ff99 	bl	800a058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
      break;
 8009132:	e06f      	b.n	8009214 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800913a:	2b00      	cmp	r3, #0
 800913c:	d019      	beq.n	8009172 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800914a:	23ff      	movs	r3, #255	; 0xff
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f949 	bl	80093e4 <USBH_Get_StringDesc>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2206      	movs	r2, #6
 8009160:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009162:	e059      	b.n	8009218 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b03      	cmp	r3, #3
 8009168:	d156      	bne.n	8009218 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2206      	movs	r2, #6
 800916e:	705a      	strb	r2, [r3, #1]
      break;
 8009170:	e052      	b.n	8009218 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2206      	movs	r2, #6
 8009176:	705a      	strb	r2, [r3, #1]
      break;
 8009178:	e04e      	b.n	8009218 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009180:	2b00      	cmp	r3, #0
 8009182:	d019      	beq.n	80091b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009190:	23ff      	movs	r3, #255	; 0xff
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f926 	bl	80093e4 <USBH_Get_StringDesc>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2207      	movs	r2, #7
 80091a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091a8:	e038      	b.n	800921c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d135      	bne.n	800921c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2207      	movs	r2, #7
 80091b4:	705a      	strb	r2, [r3, #1]
      break;
 80091b6:	e031      	b.n	800921c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2207      	movs	r2, #7
 80091bc:	705a      	strb	r2, [r3, #1]
      break;
 80091be:	e02d      	b.n	800921c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091d6:	23ff      	movs	r3, #255	; 0xff
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f903 	bl	80093e4 <USBH_Get_StringDesc>
 80091de:	4603      	mov	r3, r0
 80091e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80091ec:	e018      	b.n	8009220 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d115      	bne.n	8009220 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
      break;
 80091f8:	e012      	b.n	8009220 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]
      break;
 80091fe:	e00f      	b.n	8009220 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009200:	bf00      	nop
 8009202:	e00e      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009204:	bf00      	nop
 8009206:	e00c      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009208:	bf00      	nop
 800920a:	e00a      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 800920c:	bf00      	nop
 800920e:	e008      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009210:	bf00      	nop
 8009212:	e006      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009214:	bf00      	nop
 8009216:	e004      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009218:	bf00      	nop
 800921a:	e002      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 800921c:	bf00      	nop
 800921e:	e000      	b.n	8009222 <USBH_HandleEnum+0x3be>
      break;
 8009220:	bf00      	nop
  }
  return Status;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f804 	bl	800926e <USBH_HandleSof>
}
 8009266:	bf00      	nop
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b0b      	cmp	r3, #11
 800927e:	d10a      	bne.n	8009296 <USBH_HandleSof+0x28>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
  }
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80092ae:	bf00      	nop
}
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80092ca:	bf00      	nop
}
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f8f2 	bl	800a50e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	791b      	ldrb	r3, [r3, #4]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fe91 	bl	800a058 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	795b      	ldrb	r3, [r3, #5]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fe8b 	bl	800a058 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	b29b      	uxth	r3, r3
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800936a:	2100      	movs	r1, #0
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f864 	bl	800943a <USBH_GetDescriptor>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	b292      	uxth	r2, r2
 800938c:	4619      	mov	r1, r3
 800938e:	f000 f918 	bl	80095c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	331c      	adds	r3, #28
 80093ac:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80093ae:	887b      	ldrh	r3, [r7, #2]
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f83d 	bl	800943a <USBH_GetDescriptor>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d107      	bne.n	80093da <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	461a      	mov	r2, r3
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f987 	bl	80096e4 <USBH_ParseCfgDesc>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	461a      	mov	r2, r3
 80093f0:	460b      	mov	r3, r1
 80093f2:	72fb      	strb	r3, [r7, #11]
 80093f4:	4613      	mov	r3, r2
 80093f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009400:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009408:	893b      	ldrh	r3, [r7, #8]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	460b      	mov	r3, r1
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 f812 	bl	800943a <USBH_GetDescriptor>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d107      	bne.n	8009430 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009426:	893a      	ldrh	r2, [r7, #8]
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fb24 	bl	8009a78 <USBH_ParseStringDesc>
  }

  return status;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	72fb      	strb	r3, [r7, #11]
 8009448:	4613      	mov	r3, r2
 800944a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	789b      	ldrb	r3, [r3, #2]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d11c      	bne.n	800948e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2206      	movs	r2, #6
 8009464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	893a      	ldrh	r2, [r7, #8]
 800946a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800946c:	893b      	ldrh	r3, [r7, #8]
 800946e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009476:	d104      	bne.n	8009482 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f240 4209 	movw	r2, #1033	; 0x409
 800947e:	829a      	strh	r2, [r3, #20]
 8009480:	e002      	b.n	8009488 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8b3a      	ldrh	r2, [r7, #24]
 800948c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800948e:	8b3b      	ldrh	r3, [r7, #24]
 8009490:	461a      	mov	r2, r3
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fb3d 	bl	8009b14 <USBH_CtlReq>
 800949a:	4603      	mov	r3, r0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	789b      	ldrb	r3, [r3, #2]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d10f      	bne.n	80094d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2205      	movs	r2, #5
 80094c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094d8:	2200      	movs	r2, #0
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fb19 	bl	8009b14 <USBH_CtlReq>
 80094e2:	4603      	mov	r3, r0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	789b      	ldrb	r3, [r3, #2]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d10e      	bne.n	800951e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2209      	movs	r2, #9
 800950a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	887a      	ldrh	r2, [r7, #2]
 8009510:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 faf6 	bl	8009b14 <USBH_CtlReq>
 8009528:	4603      	mov	r3, r0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	789b      	ldrb	r3, [r3, #2]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10f      	bne.n	8009566 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2203      	movs	r2, #3
 8009550:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	b29a      	uxth	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009566:	2200      	movs	r2, #0
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fad2 	bl	8009b14 <USBH_CtlReq>
 8009570:	4603      	mov	r3, r0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	789b      	ldrb	r3, [r3, #2]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d10f      	bne.n	80095ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80095ae:	2200      	movs	r2, #0
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 faae 	bl	8009b14 <USBH_CtlReq>
 80095b8:	4603      	mov	r3, r0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	4613      	mov	r3, r2
 80095ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	785a      	ldrb	r2, [r3, #1]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	3302      	adds	r3, #2
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	3303      	adds	r3, #3
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	791a      	ldrb	r2, [r3, #4]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	795a      	ldrb	r2, [r3, #5]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	799a      	ldrb	r2, [r3, #6]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	79da      	ldrb	r2, [r3, #7]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	79db      	ldrb	r3, [r3, #7]
 8009620:	2b20      	cmp	r3, #32
 8009622:	dc11      	bgt.n	8009648 <USBH_ParseDevDesc+0x86>
 8009624:	2b08      	cmp	r3, #8
 8009626:	db16      	blt.n	8009656 <USBH_ParseDevDesc+0x94>
 8009628:	3b08      	subs	r3, #8
 800962a:	2201      	movs	r2, #1
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d102      	bne.n	800964c <USBH_ParseDevDesc+0x8a>
 8009646:	e006      	b.n	8009656 <USBH_ParseDevDesc+0x94>
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d104      	bne.n	8009656 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	79da      	ldrb	r2, [r3, #7]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	71da      	strb	r2, [r3, #7]
      break;
 8009654:	e003      	b.n	800965e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2240      	movs	r2, #64	; 0x40
 800965a:	71da      	strb	r2, [r3, #7]
      break;
 800965c:	bf00      	nop
  }

  if (length > 8U)
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	2b08      	cmp	r3, #8
 8009662:	d939      	bls.n	80096d8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3308      	adds	r3, #8
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b29a      	uxth	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	3309      	adds	r3, #9
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	b29b      	uxth	r3, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	330a      	adds	r3, #10
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	b29a      	uxth	r2, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	330b      	adds	r3, #11
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b29b      	uxth	r3, r3
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	b29b      	uxth	r3, r3
 8009694:	4313      	orrs	r3, r2
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	330c      	adds	r3, #12
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	330d      	adds	r3, #13
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	021b      	lsls	r3, r3, #8
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4313      	orrs	r3, r2
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7b9a      	ldrb	r2, [r3, #14]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	7bda      	ldrb	r2, [r3, #15]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7c1a      	ldrb	r2, [r3, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	7c5a      	ldrb	r2, [r3, #17]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	745a      	strb	r2, [r3, #17]
  }
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08c      	sub	sp, #48	; 0x30
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80096f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3302      	adds	r3, #2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	3303      	adds	r3, #3
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	b29b      	uxth	r3, r3
 8009738:	4313      	orrs	r3, r2
 800973a:	b29b      	uxth	r3, r3
 800973c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009740:	bf28      	it	cs
 8009742:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009746:	b29a      	uxth	r2, r3
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	791a      	ldrb	r2, [r3, #4]
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	795a      	ldrb	r2, [r3, #5]
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	799a      	ldrb	r2, [r3, #6]
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	79da      	ldrb	r2, [r3, #7]
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	7a1a      	ldrb	r2, [r3, #8]
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b09      	cmp	r3, #9
 800977a:	d002      	beq.n	8009782 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	2209      	movs	r2, #9
 8009780:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	2b09      	cmp	r3, #9
 8009786:	f240 809d 	bls.w	80098c4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800978a:	2309      	movs	r3, #9
 800978c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009792:	e081      	b.n	8009898 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009794:	f107 0316 	add.w	r3, r7, #22
 8009798:	4619      	mov	r1, r3
 800979a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800979c:	f000 f99f 	bl	8009ade <USBH_GetNextDesc>
 80097a0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d176      	bne.n	8009898 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d002      	beq.n	80097b8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	2209      	movs	r2, #9
 80097b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80097b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097bc:	221a      	movs	r2, #26
 80097be:	fb02 f303 	mul.w	r3, r2, r3
 80097c2:	3308      	adds	r3, #8
 80097c4:	6a3a      	ldr	r2, [r7, #32]
 80097c6:	4413      	add	r3, r2
 80097c8:	3302      	adds	r3, #2
 80097ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097ce:	69f8      	ldr	r0, [r7, #28]
 80097d0:	f000 f87e 	bl	80098d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097de:	e043      	b.n	8009868 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097e0:	f107 0316 	add.w	r3, r7, #22
 80097e4:	4619      	mov	r1, r3
 80097e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e8:	f000 f979 	bl	8009ade <USBH_GetNextDesc>
 80097ec:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d138      	bne.n	8009868 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	795b      	ldrb	r3, [r3, #5]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d10f      	bne.n	800981e <USBH_ParseCfgDesc+0x13a>
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	799b      	ldrb	r3, [r3, #6]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d10b      	bne.n	800981e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	79db      	ldrb	r3, [r3, #7]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10f      	bne.n	800982e <USBH_ParseCfgDesc+0x14a>
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b09      	cmp	r3, #9
 8009814:	d00b      	beq.n	800982e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	2209      	movs	r2, #9
 800981a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800981c:	e007      	b.n	800982e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b07      	cmp	r3, #7
 8009824:	d004      	beq.n	8009830 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	2207      	movs	r2, #7
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e000      	b.n	8009830 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800982e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009834:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009838:	3201      	adds	r2, #1
 800983a:	00d2      	lsls	r2, r2, #3
 800983c:	211a      	movs	r1, #26
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	3308      	adds	r3, #8
 8009846:	6a3a      	ldr	r2, [r7, #32]
 8009848:	4413      	add	r3, r2
 800984a:	3304      	adds	r3, #4
 800984c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800984e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f86b 	bl	800992e <USBH_ParseEPDesc>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800985e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009862:	3301      	adds	r3, #1
 8009864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	791b      	ldrb	r3, [r3, #4]
 800986c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009870:	429a      	cmp	r2, r3
 8009872:	d204      	bcs.n	800987e <USBH_ParseCfgDesc+0x19a>
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	885a      	ldrh	r2, [r3, #2]
 8009878:	8afb      	ldrh	r3, [r7, #22]
 800987a:	429a      	cmp	r2, r3
 800987c:	d8b0      	bhi.n	80097e0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009886:	429a      	cmp	r2, r3
 8009888:	d201      	bcs.n	800988e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800988a:	2303      	movs	r3, #3
 800988c:	e01c      	b.n	80098c8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800988e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009892:	3301      	adds	r3, #1
 8009894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800989c:	2b01      	cmp	r3, #1
 800989e:	d805      	bhi.n	80098ac <USBH_ParseCfgDesc+0x1c8>
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	885a      	ldrh	r2, [r3, #2]
 80098a4:	8afb      	ldrh	r3, [r7, #22]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	f63f af74 	bhi.w	8009794 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	bf28      	it	cs
 80098b4:	2302      	movcs	r3, #2
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098bc:	429a      	cmp	r2, r3
 80098be:	d201      	bcs.n	80098c4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e001      	b.n	80098c8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80098c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781a      	ldrb	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	785a      	ldrb	r2, [r3, #1]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	789a      	ldrb	r2, [r3, #2]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	78da      	ldrb	r2, [r3, #3]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	791a      	ldrb	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	795a      	ldrb	r2, [r3, #5]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	799a      	ldrb	r2, [r3, #6]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	79da      	ldrb	r2, [r3, #7]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	7a1a      	ldrb	r2, [r3, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	721a      	strb	r2, [r3, #8]
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800992e:	b480      	push	{r7}
 8009930:	b087      	sub	sp, #28
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	785a      	ldrb	r2, [r3, #1]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	789a      	ldrb	r2, [r3, #2]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	78da      	ldrb	r2, [r3, #3]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3304      	adds	r3, #4
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b29a      	uxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3305      	adds	r3, #5
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	b29b      	uxth	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b29a      	uxth	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	799a      	ldrb	r2, [r3, #6]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	889b      	ldrh	r3, [r3, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800998a:	2303      	movs	r3, #3
 800998c:	75fb      	strb	r3, [r7, #23]
 800998e:	e033      	b.n	80099f8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	889b      	ldrh	r3, [r3, #4]
 8009994:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009998:	f023 0307 	bic.w	r3, r3, #7
 800999c:	b29a      	uxth	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	889b      	ldrh	r3, [r3, #4]
 80099a6:	b21a      	sxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b299      	uxth	r1, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3305      	adds	r3, #5
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	430b      	orrs	r3, r1
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d110      	bne.n	80099ea <USBH_ParseEPDesc+0xbc>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b299      	uxth	r1, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3305      	adds	r3, #5
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	b29b      	uxth	r3, r3
 80099dc:	430b      	orrs	r3, r1
 80099de:	b29b      	uxth	r3, r3
 80099e0:	b21b      	sxth	r3, r3
 80099e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	e001      	b.n	80099ee <USBH_ParseEPDesc+0xc0>
 80099ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ee:	4313      	orrs	r3, r2
 80099f0:	b21b      	sxth	r3, r3
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d116      	bne.n	8009a30 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	78db      	ldrb	r3, [r3, #3]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d005      	beq.n	8009a1a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d127      	bne.n	8009a6a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	799b      	ldrb	r3, [r3, #6]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <USBH_ParseEPDesc+0xfc>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	799b      	ldrb	r3, [r3, #6]
 8009a26:	2b10      	cmp	r3, #16
 8009a28:	d91f      	bls.n	8009a6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	75fb      	strb	r3, [r7, #23]
 8009a2e:	e01c      	b.n	8009a6a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	78db      	ldrb	r3, [r3, #3]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d10a      	bne.n	8009a52 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	799b      	ldrb	r3, [r3, #6]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <USBH_ParseEPDesc+0x11e>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	799b      	ldrb	r3, [r3, #6]
 8009a48:	2b10      	cmp	r3, #16
 8009a4a:	d90e      	bls.n	8009a6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	75fb      	strb	r3, [r7, #23]
 8009a50:	e00b      	b.n	8009a6a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	78db      	ldrb	r3, [r3, #3]
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d105      	bne.n	8009a6a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	799b      	ldrb	r3, [r3, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009a66:	2303      	movs	r3, #3
 8009a68:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d120      	bne.n	8009ad2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	1e9a      	subs	r2, r3, #2
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	bf28      	it	cs
 8009a9c:	4613      	movcs	r3, r2
 8009a9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	82fb      	strh	r3, [r7, #22]
 8009aaa:	e00b      	b.n	8009ac4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009aac:	8afb      	ldrh	r3, [r7, #22]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009abe:	8afb      	ldrh	r3, [r7, #22]
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	82fb      	strh	r3, [r7, #22]
 8009ac4:	8afa      	ldrh	r2, [r7, #22]
 8009ac6:	8abb      	ldrh	r3, [r7, #20]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d3ef      	bcc.n	8009aac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
  }
}
 8009ad2:	bf00      	nop
 8009ad4:	371c      	adds	r7, #28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	881a      	ldrh	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	4413      	add	r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b06:	68fb      	ldr	r3, [r7, #12]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b22:	2301      	movs	r3, #1
 8009b24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	789b      	ldrb	r3, [r3, #2]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d002      	beq.n	8009b34 <USBH_CtlReq+0x20>
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d00f      	beq.n	8009b52 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009b32:	e027      	b.n	8009b84 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b50:	e018      	b.n	8009b84 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f81c 	bl	8009b90 <USBH_HandleControl>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <USBH_CtlReq+0x54>
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d106      	bne.n	8009b76 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	761a      	strb	r2, [r3, #24]
      break;
 8009b74:	e005      	b.n	8009b82 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d102      	bne.n	8009b82 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	709a      	strb	r2, [r3, #2]
      break;
 8009b82:	bf00      	nop
  }
  return status;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7e1b      	ldrb	r3, [r3, #24]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	2b0a      	cmp	r3, #10
 8009ba8:	f200 8156 	bhi.w	8009e58 <USBH_HandleControl+0x2c8>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <USBH_HandleControl+0x24>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009be1 	.word	0x08009be1
 8009bb8:	08009bfb 	.word	0x08009bfb
 8009bbc:	08009c65 	.word	0x08009c65
 8009bc0:	08009c8b 	.word	0x08009c8b
 8009bc4:	08009cc3 	.word	0x08009cc3
 8009bc8:	08009ced 	.word	0x08009ced
 8009bcc:	08009d3f 	.word	0x08009d3f
 8009bd0:	08009d61 	.word	0x08009d61
 8009bd4:	08009d9d 	.word	0x08009d9d
 8009bd8:	08009dc3 	.word	0x08009dc3
 8009bdc:	08009e01 	.word	0x08009e01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f103 0110 	add.w	r1, r3, #16
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	795b      	ldrb	r3, [r3, #5]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f943 	bl	8009e78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	761a      	strb	r2, [r3, #24]
      break;
 8009bf8:	e139      	b.n	8009e6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	795b      	ldrb	r3, [r3, #5]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fd73 	bl	800a6ec <USBH_LL_GetURBState>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d11e      	bne.n	8009c4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	7c1b      	ldrb	r3, [r3, #16]
 8009c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	8adb      	ldrh	r3, [r3, #22]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009c22:	7b7b      	ldrb	r3, [r7, #13]
 8009c24:	2b80      	cmp	r3, #128	; 0x80
 8009c26:	d103      	bne.n	8009c30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c2e:	e115      	b.n	8009e5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2205      	movs	r2, #5
 8009c34:	761a      	strb	r2, [r3, #24]
      break;
 8009c36:	e111      	b.n	8009e5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009c38:	7b7b      	ldrb	r3, [r7, #13]
 8009c3a:	2b80      	cmp	r3, #128	; 0x80
 8009c3c:	d103      	bne.n	8009c46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2209      	movs	r2, #9
 8009c42:	761a      	strb	r2, [r3, #24]
      break;
 8009c44:	e10a      	b.n	8009e5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2207      	movs	r2, #7
 8009c4a:	761a      	strb	r2, [r3, #24]
      break;
 8009c4c:	e106      	b.n	8009e5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d003      	beq.n	8009c5c <USBH_HandleControl+0xcc>
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	f040 8100 	bne.w	8009e5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	220b      	movs	r2, #11
 8009c60:	761a      	strb	r2, [r3, #24]
      break;
 8009c62:	e0fb      	b.n	8009e5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6899      	ldr	r1, [r3, #8]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	899a      	ldrh	r2, [r3, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	791b      	ldrb	r3, [r3, #4]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f93a 	bl	8009ef6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2204      	movs	r2, #4
 8009c86:	761a      	strb	r2, [r3, #24]
      break;
 8009c88:	e0f1      	b.n	8009e6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	791b      	ldrb	r3, [r3, #4]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fd2b 	bl	800a6ec <USBH_LL_GetURBState>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d102      	bne.n	8009ca6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2209      	movs	r2, #9
 8009ca4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b05      	cmp	r3, #5
 8009caa:	d102      	bne.n	8009cb2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009cac:	2303      	movs	r3, #3
 8009cae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009cb0:	e0d6      	b.n	8009e60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	f040 80d3 	bne.w	8009e60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	220b      	movs	r2, #11
 8009cbe:	761a      	strb	r2, [r3, #24]
      break;
 8009cc0:	e0ce      	b.n	8009e60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6899      	ldr	r1, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	899a      	ldrh	r2, [r3, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	795b      	ldrb	r3, [r3, #5]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	9000      	str	r0, [sp, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f8ea 	bl	8009eac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	761a      	strb	r2, [r3, #24]
      break;
 8009cea:	e0c0      	b.n	8009e6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	795b      	ldrb	r3, [r3, #5]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fcfa 	bl	800a6ec <USBH_LL_GetURBState>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d103      	bne.n	8009d0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2207      	movs	r2, #7
 8009d06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d08:	e0ac      	b.n	8009e64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	2b05      	cmp	r3, #5
 8009d0e:	d105      	bne.n	8009d1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	220c      	movs	r2, #12
 8009d14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009d16:	2303      	movs	r3, #3
 8009d18:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1a:	e0a3      	b.n	8009e64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d103      	bne.n	8009d2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2205      	movs	r2, #5
 8009d26:	761a      	strb	r2, [r3, #24]
      break;
 8009d28:	e09c      	b.n	8009e64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	f040 8099 	bne.w	8009e64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	220b      	movs	r2, #11
 8009d36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009d38:	2302      	movs	r3, #2
 8009d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d3c:	e092      	b.n	8009e64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	2100      	movs	r1, #0
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8d5 	bl	8009ef6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	761a      	strb	r2, [r3, #24]

      break;
 8009d5e:	e086      	b.n	8009e6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	791b      	ldrb	r3, [r3, #4]
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fcc0 	bl	800a6ec <USBH_LL_GetURBState>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d105      	bne.n	8009d82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	220d      	movs	r2, #13
 8009d7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d80:	e072      	b.n	8009e68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d103      	bne.n	8009d90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	220b      	movs	r2, #11
 8009d8c:	761a      	strb	r2, [r3, #24]
      break;
 8009d8e:	e06b      	b.n	8009e68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	d168      	bne.n	8009e68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009d96:	2303      	movs	r3, #3
 8009d98:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9a:	e065      	b.n	8009e68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	795b      	ldrb	r3, [r3, #5]
 8009da0:	2201      	movs	r2, #1
 8009da2:	9200      	str	r2, [sp, #0]
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f87f 	bl	8009eac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	761a      	strb	r2, [r3, #24]
      break;
 8009dc0:	e055      	b.n	8009e6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	795b      	ldrb	r3, [r3, #5]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fc8f 	bl	800a6ec <USBH_LL_GetURBState>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d105      	bne.n	8009de4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220d      	movs	r2, #13
 8009de0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de2:	e043      	b.n	8009e6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d103      	bne.n	8009df2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2209      	movs	r2, #9
 8009dee:	761a      	strb	r2, [r3, #24]
      break;
 8009df0:	e03c      	b.n	8009e6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d139      	bne.n	8009e6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	220b      	movs	r2, #11
 8009dfc:	761a      	strb	r2, [r3, #24]
      break;
 8009dfe:	e035      	b.n	8009e6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7e5b      	ldrb	r3, [r3, #25]
 8009e04:	3301      	adds	r3, #1
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	765a      	strb	r2, [r3, #25]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7e5b      	ldrb	r3, [r3, #25]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d806      	bhi.n	8009e22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e20:	e025      	b.n	8009e6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e28:	2106      	movs	r1, #6
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	795b      	ldrb	r3, [r3, #5]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f90c 	bl	800a058 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	791b      	ldrb	r3, [r3, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f906 	bl	800a058 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	73fb      	strb	r3, [r7, #15]
      break;
 8009e56:	e00a      	b.n	8009e6e <USBH_HandleControl+0x2de>

    default:
      break;
 8009e58:	bf00      	nop
 8009e5a:	e008      	b.n	8009e6e <USBH_HandleControl+0x2de>
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e006      	b.n	8009e6e <USBH_HandleControl+0x2de>
      break;
 8009e60:	bf00      	nop
 8009e62:	e004      	b.n	8009e6e <USBH_HandleControl+0x2de>
      break;
 8009e64:	bf00      	nop
 8009e66:	e002      	b.n	8009e6e <USBH_HandleControl+0x2de>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e000      	b.n	8009e6e <USBH_HandleControl+0x2de>
      break;
 8009e6c:	bf00      	nop
  }

  return status;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e86:	79f9      	ldrb	r1, [r7, #7]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	2300      	movs	r3, #0
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 fbf4 	bl	800a68a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af04      	add	r7, sp, #16
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	461a      	mov	r2, r3
 8009eba:	460b      	mov	r3, r1
 8009ebc:	80fb      	strh	r3, [r7, #6]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ed0:	7979      	ldrb	r1, [r7, #5]
 8009ed2:	7e3b      	ldrb	r3, [r7, #24]
 8009ed4:	9303      	str	r3, [sp, #12]
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	2301      	movs	r3, #1
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fbcf 	bl	800a68a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b088      	sub	sp, #32
 8009efa:	af04      	add	r7, sp, #16
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	4611      	mov	r1, r2
 8009f02:	461a      	mov	r2, r3
 8009f04:	460b      	mov	r3, r1
 8009f06:	80fb      	strh	r3, [r7, #6]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f0c:	7979      	ldrb	r1, [r7, #5]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9303      	str	r3, [sp, #12]
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	9302      	str	r3, [sp, #8]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2201      	movs	r2, #1
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fbb1 	bl	800a68a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f28:	2300      	movs	r3, #0

}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af04      	add	r7, sp, #16
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	461a      	mov	r2, r3
 8009f40:	460b      	mov	r3, r1
 8009f42:	80fb      	strh	r3, [r7, #6]
 8009f44:	4613      	mov	r3, r2
 8009f46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f56:	7979      	ldrb	r1, [r7, #5]
 8009f58:	7e3b      	ldrb	r3, [r7, #24]
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	2301      	movs	r3, #1
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fb8c 	bl	800a68a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b088      	sub	sp, #32
 8009f80:	af04      	add	r7, sp, #16
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4611      	mov	r1, r2
 8009f88:	461a      	mov	r2, r3
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	80fb      	strh	r3, [r7, #6]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f92:	7979      	ldrb	r1, [r7, #5]
 8009f94:	2300      	movs	r3, #0
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fb6e 	bl	800a68a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	70fb      	strb	r3, [r7, #3]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70bb      	strb	r3, [r7, #2]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009fd2:	7878      	ldrb	r0, [r7, #1]
 8009fd4:	78ba      	ldrb	r2, [r7, #2]
 8009fd6:	78f9      	ldrb	r1, [r7, #3]
 8009fd8:	8b3b      	ldrh	r3, [r7, #24]
 8009fda:	9302      	str	r3, [sp, #8]
 8009fdc:	7d3b      	ldrb	r3, [r7, #20]
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	7c3b      	ldrb	r3, [r7, #16]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fb01 	bl	800a5ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fb20 	bl	800a64c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f836 	bl	800a094 <USBH_GetFreePipe>
 800a028:	4603      	mov	r3, r0
 800a02a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a02c:	89fb      	ldrh	r3, [r7, #14]
 800a02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a032:	4293      	cmp	r3, r2
 800a034:	d00a      	beq.n	800a04c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	89fb      	ldrh	r3, [r7, #14]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	33e0      	adds	r3, #224	; 0xe0
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	440b      	add	r3, r1
 800a04a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	b2db      	uxtb	r3, r3
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	2b0f      	cmp	r3, #15
 800a068:	d80d      	bhi.n	800a086 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	33e0      	adds	r3, #224	; 0xe0
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	33e0      	adds	r3, #224	; 0xe0
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
 800a0a4:	e00f      	b.n	800a0c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	33e0      	adds	r3, #224	; 0xe0
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	e007      	b.n	800a0d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	2b0f      	cmp	r3, #15
 800a0ca:	d9ec      	bls.n	800a0a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <_Z9to_stringiPc>:
#include "main.h"
//#include "stm32f4xx_hal.h"

#define MyI2C_LCD I2C_LCD_1

void to_string(int num, char str2[16]){
 800a0dc:	b480      	push	{r7}
 800a0de:	b08b      	sub	sp, #44	; 0x2c
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
	char str[16];
	int temp, num2 = num;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	623b      	str	r3, [r7, #32]
	while(num2!=0){
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d020      	beq.n	800a136 <_Z9to_stringiPc+0x5a>
		temp = num2 % 10;
 800a0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f6:	4b1e      	ldr	r3, [pc, #120]	; (800a170 <_Z9to_stringiPc+0x94>)
 800a0f8:	fb83 1302 	smull	r1, r3, r3, r2
 800a0fc:	1099      	asrs	r1, r3, #2
 800a0fe:	17d3      	asrs	r3, r2, #31
 800a100:	1ac9      	subs	r1, r1, r3
 800a102:	460b      	mov	r3, r1
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	61bb      	str	r3, [r7, #24]
		str[i++] = temp + '0';
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	b2da      	uxtb	r2, r3
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	1c59      	adds	r1, r3, #1
 800a116:	6239      	str	r1, [r7, #32]
 800a118:	3230      	adds	r2, #48	; 0x30
 800a11a:	b2d2      	uxtb	r2, r2
 800a11c:	3328      	adds	r3, #40	; 0x28
 800a11e:	443b      	add	r3, r7
 800a120:	f803 2c20 	strb.w	r2, [r3, #-32]
		num2 = num2/10;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	4a12      	ldr	r2, [pc, #72]	; (800a170 <_Z9to_stringiPc+0x94>)
 800a128:	fb82 1203 	smull	r1, r2, r2, r3
 800a12c:	1092      	asrs	r2, r2, #2
 800a12e:	17db      	asrs	r3, r3, #31
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
	while(num2!=0){
 800a134:	e7db      	b.n	800a0ee <_Z9to_stringiPc+0x12>
	}
	for(int k = 0; k < i; k++){
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	429a      	cmp	r2, r3
 800a140:	da0f      	bge.n	800a162 <_Z9to_stringiPc+0x86>
		str2[k] = str[i - k - 1];
 800a142:	6a3a      	ldr	r2, [r7, #32]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	1e5a      	subs	r2, r3, #1
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	440b      	add	r3, r1
 800a150:	3228      	adds	r2, #40	; 0x28
 800a152:	443a      	add	r2, r7
 800a154:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 800a158:	701a      	strb	r2, [r3, #0]
	for(int k = 0; k < i; k++){
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	3301      	adds	r3, #1
 800a15e:	61fb      	str	r3, [r7, #28]
 800a160:	e7eb      	b.n	800a13a <_Z9to_stringiPc+0x5e>
	}
	
}
 800a162:	bf00      	nop
 800a164:	372c      	adds	r7, #44	; 0x2c
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	66666667 	.word	0x66666667

0800a174 <alt_main>:

void alt_main(){
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	; 0x38
 800a178:	af00      	add	r7, sp, #0

	uint8_t temp_val_in=10;
 800a17a:	230a      	movs	r3, #10
 800a17c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DS3231 ds3231_dev;
 800a180:	f107 031c 	add.w	r3, r7, #28
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd fce9 	bl	8007b5c <_ZN6DS3231C1Ev>
	ds3231_dev.ds3231_init();
 800a18a:	f107 031c 	add.w	r3, r7, #28
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fd fd64 	bl	8007c5c <_ZN6DS323111ds3231_initEv>

	float temp_val=12;
 800a194:	4b26      	ldr	r3, [pc, #152]	; (800a230 <alt_main+0xbc>)
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
	char str[16];

	I2C_LCD_Init(MyI2C_LCD);
 800a198:	2000      	movs	r0, #0
 800a19a:	f7fd fe65 	bl	8007e68 <I2C_LCD_Init>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f7fd ff50 	bl	8008048 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, "DeepBlueMbedded");
 800a1a8:	4922      	ldr	r1, [pc, #136]	; (800a234 <alt_main+0xc0>)
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	f7fd ff8e 	bl	80080cc <I2C_LCD_WriteString>

	  to_string(temp_val_in, str);
 800a1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1b4:	f107 020c 	add.w	r2, r7, #12
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff ff8e 	bl	800a0dc <_Z9to_stringiPc>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f7fd ff3f 	bl	8008048 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, str);
 800a1ca:	f107 030c 	add.w	r3, r7, #12
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f7fd ff7b 	bl	80080cc <I2C_LCD_WriteString>
	HAL_Delay(1000);
 800a1d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1da:	f7f6 fe57 	bl	8000e8c <HAL_Delay>

	while(1){
		temp_val = ds3231_dev.DS3231_GetTemp();
 800a1de:	f107 031c 	add.w	r3, r7, #28
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fd fd0a 	bl	8007bfc <_ZN6DS323114DS3231_GetTempEv>
 800a1e8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		temp_val_in = (uint8_t)temp_val;
 800a1ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f4:	edc7 7a01 	vstr	s15, [r7, #4]
 800a1f8:	793b      	ldrb	r3, [r7, #4]
 800a1fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		to_string(temp_val_in, str);
 800a1fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a202:	f107 020c 	add.w	r2, r7, #12
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff ff67 	bl	800a0dc <_Z9to_stringiPc>
	  	I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800a20e:	2201      	movs	r2, #1
 800a210:	2100      	movs	r1, #0
 800a212:	2000      	movs	r0, #0
 800a214:	f7fd ff18 	bl	8008048 <I2C_LCD_SetCursor>
	  	I2C_LCD_WriteString(MyI2C_LCD, str);
 800a218:	f107 030c 	add.w	r3, r7, #12
 800a21c:	4619      	mov	r1, r3
 800a21e:	2000      	movs	r0, #0
 800a220:	f7fd ff54 	bl	80080cc <I2C_LCD_WriteString>

		HAL_Delay(1000);
 800a224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a228:	f7f6 fe30 	bl	8000e8c <HAL_Delay>
		temp_val = ds3231_dev.DS3231_GetTemp();
 800a22c:	e7d7      	b.n	800a1de <alt_main+0x6a>
 800a22e:	bf00      	nop
 800a230:	41400000 	.word	0x41400000
 800a234:	0800aafc 	.word	0x0800aafc

0800a238 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a23c:	2201      	movs	r2, #1
 800a23e:	490e      	ldr	r1, [pc, #56]	; (800a278 <MX_USB_HOST_Init+0x40>)
 800a240:	480e      	ldr	r0, [pc, #56]	; (800a27c <MX_USB_HOST_Init+0x44>)
 800a242:	f7fe faf9 	bl	8008838 <USBH_Init>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a24c:	f7f6 fc46 	bl	8000adc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a250:	490b      	ldr	r1, [pc, #44]	; (800a280 <MX_USB_HOST_Init+0x48>)
 800a252:	480a      	ldr	r0, [pc, #40]	; (800a27c <MX_USB_HOST_Init+0x44>)
 800a254:	f7fe fb7e 	bl	8008954 <USBH_RegisterClass>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a25e:	f7f6 fc3d 	bl	8000adc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a262:	4806      	ldr	r0, [pc, #24]	; (800a27c <MX_USB_HOST_Init+0x44>)
 800a264:	f7fe fc02 	bl	8008a6c <USBH_Start>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a26e:	f7f6 fc35 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a272:	bf00      	nop
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	20000200 	.word	0x20000200
 800a280:	2000000c 	.word	0x2000000c

0800a284 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a288:	4802      	ldr	r0, [pc, #8]	; (800a294 <MX_USB_HOST_Process+0x10>)
 800a28a:	f7fe fbff 	bl	8008a8c <USBH_Process>
}
 800a28e:	bf00      	nop
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20000200 	.word	0x20000200

0800a298 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d819      	bhi.n	800a2e0 <USBH_UserProcess+0x48>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <USBH_UserProcess+0x1c>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2e1 	.word	0x0800a2e1
 800a2c0:	0800a2d9 	.word	0x0800a2d9
 800a2c4:	0800a2c9 	.word	0x0800a2c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2c8:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <USBH_UserProcess+0x58>)
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	701a      	strb	r2, [r3, #0]
  break;
 800a2ce:	e008      	b.n	800a2e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <USBH_UserProcess+0x58>)
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	701a      	strb	r2, [r3, #0]
  break;
 800a2d6:	e004      	b.n	800a2e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <USBH_UserProcess+0x58>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]
  break;
 800a2de:	e000      	b.n	800a2e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	200005d8 	.word	0x200005d8

0800a2f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08a      	sub	sp, #40	; 0x28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2fc:	f107 0314 	add.w	r3, r7, #20
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	609a      	str	r2, [r3, #8]
 800a308:	60da      	str	r2, [r3, #12]
 800a30a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a314:	d147      	bne.n	800a3a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
 800a31a:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	4a24      	ldr	r2, [pc, #144]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a320:	f043 0301 	orr.w	r3, r3, #1
 800a324:	6313      	str	r3, [r2, #48]	; 0x30
 800a326:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a338:	2300      	movs	r3, #0
 800a33a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a340:	f107 0314 	add.w	r3, r7, #20
 800a344:	4619      	mov	r1, r3
 800a346:	481b      	ldr	r0, [pc, #108]	; (800a3b4 <HAL_HCD_MspInit+0xc0>)
 800a348:	f7f6 ff06 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a34c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a352:	2302      	movs	r3, #2
 800a354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a35a:	2300      	movs	r3, #0
 800a35c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a35e:	230a      	movs	r3, #10
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a362:	f107 0314 	add.w	r3, r7, #20
 800a366:	4619      	mov	r1, r3
 800a368:	4812      	ldr	r0, [pc, #72]	; (800a3b4 <HAL_HCD_MspInit+0xc0>)
 800a36a:	f7f6 fef5 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a372:	4a0f      	ldr	r2, [pc, #60]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a378:	6353      	str	r3, [r2, #52]	; 0x34
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a382:	4a0b      	ldr	r2, [pc, #44]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a388:	6453      	str	r3, [r2, #68]	; 0x44
 800a38a:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <HAL_HCD_MspInit+0xbc>)
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	2043      	movs	r0, #67	; 0x43
 800a39c:	f7f6 fe75 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3a0:	2043      	movs	r0, #67	; 0x43
 800a3a2:	f7f6 fe8e 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	3728      	adds	r7, #40	; 0x28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	40020000 	.word	0x40020000

0800a3b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe ff3f 	bl	800924a <USBH_LL_IncTimer>
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe ff77 	bl	80092d6 <USBH_LL_Connect>
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe ff80 	bl	8009304 <USBH_LL_Disconnect>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
 800a418:	4613      	mov	r3, r2
 800a41a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe ff31 	bl	800929e <USBH_LL_PortEnabled>
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe ff31 	bl	80092ba <USBH_LL_PortDisabled>
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d12a      	bne.n	800a4c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a472:	4a18      	ldr	r2, [pc, #96]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a15      	ldr	r2, [pc, #84]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a47e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a482:	4b14      	ldr	r3, [pc, #80]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a488:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a48a:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a48c:	2208      	movs	r2, #8
 800a48e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a492:	2201      	movs	r2, #1
 800a494:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a496:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a498:	2200      	movs	r2, #0
 800a49a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a49c:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a49e:	2202      	movs	r2, #2
 800a4a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4a8:	480a      	ldr	r0, [pc, #40]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a4aa:	f7f7 f80a 	bl	80014c2 <HAL_HCD_Init>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4b4:	f7f6 fb12 	bl	8000adc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4b8:	4806      	ldr	r0, [pc, #24]	; (800a4d4 <USBH_LL_Init+0x74>)
 800a4ba:	f7f7 fbee 	bl	8001c9a <HAL_HCD_GetCurrentFrame>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe feb2 	bl	800922c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200005dc 	.word	0x200005dc

0800a4d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f7 fb5d 	bl	8001bae <HAL_HCD_Start>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f95c 	bl	800a7b8 <USBH_Get_USB_Status>
 800a500:	4603      	mov	r3, r0
 800a502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a504:	7bbb      	ldrb	r3, [r7, #14]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a524:	4618      	mov	r0, r3
 800a526:	f7f7 fb65 	bl	8001bf4 <HAL_HCD_Stop>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f941 	bl	800a7b8 <USBH_Get_USB_Status>
 800a536:	4603      	mov	r3, r0
 800a538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a556:	4618      	mov	r0, r3
 800a558:	f7f7 fbad 	bl	8001cb6 <HAL_HCD_GetCurrentSpeed>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d00c      	beq.n	800a57c <USBH_LL_GetSpeed+0x38>
 800a562:	2b02      	cmp	r3, #2
 800a564:	d80d      	bhi.n	800a582 <USBH_LL_GetSpeed+0x3e>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <USBH_LL_GetSpeed+0x2c>
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d003      	beq.n	800a576 <USBH_LL_GetSpeed+0x32>
 800a56e:	e008      	b.n	800a582 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
    break;
 800a574:	e008      	b.n	800a588 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a576:	2301      	movs	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
    break;
 800a57a:	e005      	b.n	800a588 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a57c:	2302      	movs	r3, #2
 800a57e:	73fb      	strb	r3, [r7, #15]
    break;
 800a580:	e002      	b.n	800a588 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a582:	2301      	movs	r3, #1
 800a584:	73fb      	strb	r3, [r7, #15]
    break;
 800a586:	bf00      	nop
  }
  return  speed;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7f7 fb40 	bl	8001c2e <HAL_HCD_ResetPort>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 f8ff 	bl	800a7b8 <USBH_Get_USB_Status>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f7 fb47 	bl	8001c72 <HAL_HCD_HC_GetXferCount>
 800a5e4:	4603      	mov	r3, r0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5ee:	b590      	push	{r4, r7, lr}
 800a5f0:	b089      	sub	sp, #36	; 0x24
 800a5f2:	af04      	add	r7, sp, #16
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	4608      	mov	r0, r1
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	70fb      	strb	r3, [r7, #3]
 800a600:	460b      	mov	r3, r1
 800a602:	70bb      	strb	r3, [r7, #2]
 800a604:	4613      	mov	r3, r2
 800a606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a616:	787c      	ldrb	r4, [r7, #1]
 800a618:	78ba      	ldrb	r2, [r7, #2]
 800a61a:	78f9      	ldrb	r1, [r7, #3]
 800a61c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a61e:	9302      	str	r3, [sp, #8]
 800a620:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4623      	mov	r3, r4
 800a62e:	f7f6 ffaa 	bl	8001586 <HAL_HCD_HC_Init>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 f8bd 	bl	800a7b8 <USBH_Get_USB_Status>
 800a63e:	4603      	mov	r3, r0
 800a640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a642:	7bbb      	ldrb	r3, [r7, #14]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd90      	pop	{r4, r7, pc}

0800a64c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f7 f81a 	bl	80016a4 <HAL_HCD_HC_Halt>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f89e 	bl	800a7b8 <USBH_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a68a:	b590      	push	{r4, r7, lr}
 800a68c:	b089      	sub	sp, #36	; 0x24
 800a68e:	af04      	add	r7, sp, #16
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	4608      	mov	r0, r1
 800a694:	4611      	mov	r1, r2
 800a696:	461a      	mov	r2, r3
 800a698:	4603      	mov	r3, r0
 800a69a:	70fb      	strb	r3, [r7, #3]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70bb      	strb	r3, [r7, #2]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a6b2:	787c      	ldrb	r4, [r7, #1]
 800a6b4:	78ba      	ldrb	r2, [r7, #2]
 800a6b6:	78f9      	ldrb	r1, [r7, #3]
 800a6b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	f7f7 f80d 	bl	80016ec <HAL_HCD_HC_SubmitRequest>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f86d 	bl	800a7b8 <USBH_Get_USB_Status>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd90      	pop	{r4, r7, pc}

0800a6ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6fe:	78fa      	ldrb	r2, [r7, #3]
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7f7 faa1 	bl	8001c4a <HAL_HCD_HC_GetURBState>
 800a708:	4603      	mov	r3, r0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b082      	sub	sp, #8
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	460b      	mov	r3, r1
 800a71c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a724:	2b01      	cmp	r3, #1
 800a726:	d103      	bne.n	800a730 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f870 	bl	800a810 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a730:	20c8      	movs	r0, #200	; 0xc8
 800a732:	f7f6 fbab 	bl	8000e8c <HAL_Delay>
  return USBH_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
 800a74c:	4613      	mov	r3, r2
 800a74e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a756:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	212c      	movs	r1, #44	; 0x2c
 800a75e:	fb01 f303 	mul.w	r3, r1, r3
 800a762:	4413      	add	r3, r2
 800a764:	333b      	adds	r3, #59	; 0x3b
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d009      	beq.n	800a780 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	212c      	movs	r1, #44	; 0x2c
 800a772:	fb01 f303 	mul.w	r3, r1, r3
 800a776:	4413      	add	r3, r2
 800a778:	3354      	adds	r3, #84	; 0x54
 800a77a:	78ba      	ldrb	r2, [r7, #2]
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e008      	b.n	800a792 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	212c      	movs	r1, #44	; 0x2c
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	4413      	add	r3, r2
 800a78c:	3355      	adds	r3, #85	; 0x55
 800a78e:	78ba      	ldrb	r2, [r7, #2]
 800a790:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7f6 fb6f 	bl	8000e8c <HAL_Delay>
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
	...

0800a7b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d817      	bhi.n	800a7fc <USBH_Get_USB_Status+0x44>
 800a7cc:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <USBH_Get_USB_Status+0x1c>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a7e5 	.word	0x0800a7e5
 800a7d8:	0800a7eb 	.word	0x0800a7eb
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a7f7 	.word	0x0800a7f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e8:	e00b      	b.n	800a802 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ee:	e008      	b.n	800a802 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	e005      	b.n	800a802 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fa:	e002      	b.n	800a802 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	bf00      	nop
  }
  return usb_status;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]
 800a828:	e001      	b.n	800a82e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a82a:	2301      	movs	r3, #1
 800a82c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	461a      	mov	r2, r3
 800a832:	2101      	movs	r1, #1
 800a834:	4803      	ldr	r0, [pc, #12]	; (800a844 <MX_DriverVbusFS+0x34>)
 800a836:	f7f6 fe2b 	bl	8001490 <HAL_GPIO_WritePin>
}
 800a83a:	bf00      	nop
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	40020800 	.word	0x40020800

0800a848 <_ZdlPvj>:
 800a848:	f000 b800 	b.w	800a84c <_ZdlPv>

0800a84c <_ZdlPv>:
 800a84c:	f000 b832 	b.w	800a8b4 <free>

0800a850 <__errno>:
 800a850:	4b01      	ldr	r3, [pc, #4]	; (800a858 <__errno+0x8>)
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	2000002c 	.word	0x2000002c

0800a85c <__libc_init_array>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4d0d      	ldr	r5, [pc, #52]	; (800a894 <__libc_init_array+0x38>)
 800a860:	4c0d      	ldr	r4, [pc, #52]	; (800a898 <__libc_init_array+0x3c>)
 800a862:	1b64      	subs	r4, r4, r5
 800a864:	10a4      	asrs	r4, r4, #2
 800a866:	2600      	movs	r6, #0
 800a868:	42a6      	cmp	r6, r4
 800a86a:	d109      	bne.n	800a880 <__libc_init_array+0x24>
 800a86c:	4d0b      	ldr	r5, [pc, #44]	; (800a89c <__libc_init_array+0x40>)
 800a86e:	4c0c      	ldr	r4, [pc, #48]	; (800a8a0 <__libc_init_array+0x44>)
 800a870:	f000 f92e 	bl	800aad0 <_init>
 800a874:	1b64      	subs	r4, r4, r5
 800a876:	10a4      	asrs	r4, r4, #2
 800a878:	2600      	movs	r6, #0
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	d105      	bne.n	800a88a <__libc_init_array+0x2e>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	f855 3b04 	ldr.w	r3, [r5], #4
 800a884:	4798      	blx	r3
 800a886:	3601      	adds	r6, #1
 800a888:	e7ee      	b.n	800a868 <__libc_init_array+0xc>
 800a88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88e:	4798      	blx	r3
 800a890:	3601      	adds	r6, #1
 800a892:	e7f2      	b.n	800a87a <__libc_init_array+0x1e>
 800a894:	0800ab48 	.word	0x0800ab48
 800a898:	0800ab48 	.word	0x0800ab48
 800a89c:	0800ab48 	.word	0x0800ab48
 800a8a0:	0800ab4c 	.word	0x0800ab4c

0800a8a4 <malloc>:
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <malloc+0xc>)
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	f000 b87f 	b.w	800a9ac <_malloc_r>
 800a8ae:	bf00      	nop
 800a8b0:	2000002c 	.word	0x2000002c

0800a8b4 <free>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	; (800a8c0 <free+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f000 b80b 	b.w	800a8d4 <_free_r>
 800a8be:	bf00      	nop
 800a8c0:	2000002c 	.word	0x2000002c

0800a8c4 <memset>:
 800a8c4:	4402      	add	r2, r0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d100      	bne.n	800a8ce <memset+0xa>
 800a8cc:	4770      	bx	lr
 800a8ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d2:	e7f9      	b.n	800a8c8 <memset+0x4>

0800a8d4 <_free_r>:
 800a8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	d044      	beq.n	800a964 <_free_r+0x90>
 800a8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8de:	9001      	str	r0, [sp, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a8e6:	bfb8      	it	lt
 800a8e8:	18e4      	addlt	r4, r4, r3
 800a8ea:	f000 f8e3 	bl	800aab4 <__malloc_lock>
 800a8ee:	4a1e      	ldr	r2, [pc, #120]	; (800a968 <_free_r+0x94>)
 800a8f0:	9801      	ldr	r0, [sp, #4]
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	b933      	cbnz	r3, 800a904 <_free_r+0x30>
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	6014      	str	r4, [r2, #0]
 800a8fa:	b003      	add	sp, #12
 800a8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a900:	f000 b8de 	b.w	800aac0 <__malloc_unlock>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d908      	bls.n	800a91a <_free_r+0x46>
 800a908:	6825      	ldr	r5, [r4, #0]
 800a90a:	1961      	adds	r1, r4, r5
 800a90c:	428b      	cmp	r3, r1
 800a90e:	bf01      	itttt	eq
 800a910:	6819      	ldreq	r1, [r3, #0]
 800a912:	685b      	ldreq	r3, [r3, #4]
 800a914:	1949      	addeq	r1, r1, r5
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	e7ed      	b.n	800a8f6 <_free_r+0x22>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x50>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x46>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1855      	adds	r5, r2, r1
 800a928:	42a5      	cmp	r5, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x70>
 800a92c:	6824      	ldr	r4, [r4, #0]
 800a92e:	4421      	add	r1, r4
 800a930:	1854      	adds	r4, r2, r1
 800a932:	42a3      	cmp	r3, r4
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	d1e0      	bne.n	800a8fa <_free_r+0x26>
 800a938:	681c      	ldr	r4, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	6053      	str	r3, [r2, #4]
 800a93e:	4421      	add	r1, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	e7da      	b.n	800a8fa <_free_r+0x26>
 800a944:	d902      	bls.n	800a94c <_free_r+0x78>
 800a946:	230c      	movs	r3, #12
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	e7d6      	b.n	800a8fa <_free_r+0x26>
 800a94c:	6825      	ldr	r5, [r4, #0]
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	428b      	cmp	r3, r1
 800a952:	bf04      	itt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	bf04      	itt	eq
 800a95c:	1949      	addeq	r1, r1, r5
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	6054      	str	r4, [r2, #4]
 800a962:	e7ca      	b.n	800a8fa <_free_r+0x26>
 800a964:	b003      	add	sp, #12
 800a966:	bd30      	pop	{r4, r5, pc}
 800a968:	200008e0 	.word	0x200008e0

0800a96c <sbrk_aligned>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4e0e      	ldr	r6, [pc, #56]	; (800a9a8 <sbrk_aligned+0x3c>)
 800a970:	460c      	mov	r4, r1
 800a972:	6831      	ldr	r1, [r6, #0]
 800a974:	4605      	mov	r5, r0
 800a976:	b911      	cbnz	r1, 800a97e <sbrk_aligned+0x12>
 800a978:	f000 f88c 	bl	800aa94 <_sbrk_r>
 800a97c:	6030      	str	r0, [r6, #0]
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f000 f887 	bl	800aa94 <_sbrk_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d00a      	beq.n	800a9a0 <sbrk_aligned+0x34>
 800a98a:	1cc4      	adds	r4, r0, #3
 800a98c:	f024 0403 	bic.w	r4, r4, #3
 800a990:	42a0      	cmp	r0, r4
 800a992:	d007      	beq.n	800a9a4 <sbrk_aligned+0x38>
 800a994:	1a21      	subs	r1, r4, r0
 800a996:	4628      	mov	r0, r5
 800a998:	f000 f87c 	bl	800aa94 <_sbrk_r>
 800a99c:	3001      	adds	r0, #1
 800a99e:	d101      	bne.n	800a9a4 <sbrk_aligned+0x38>
 800a9a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	200008e4 	.word	0x200008e4

0800a9ac <_malloc_r>:
 800a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b0:	1ccd      	adds	r5, r1, #3
 800a9b2:	f025 0503 	bic.w	r5, r5, #3
 800a9b6:	3508      	adds	r5, #8
 800a9b8:	2d0c      	cmp	r5, #12
 800a9ba:	bf38      	it	cc
 800a9bc:	250c      	movcc	r5, #12
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	db01      	blt.n	800a9c8 <_malloc_r+0x1c>
 800a9c4:	42a9      	cmp	r1, r5
 800a9c6:	d905      	bls.n	800a9d4 <_malloc_r+0x28>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	4e2e      	ldr	r6, [pc, #184]	; (800aa90 <_malloc_r+0xe4>)
 800a9d6:	f000 f86d 	bl	800aab4 <__malloc_lock>
 800a9da:	6833      	ldr	r3, [r6, #0]
 800a9dc:	461c      	mov	r4, r3
 800a9de:	bb34      	cbnz	r4, 800aa2e <_malloc_r+0x82>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f7ff ffc2 	bl	800a96c <sbrk_aligned>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	d14d      	bne.n	800aa8a <_malloc_r+0xde>
 800a9ee:	6834      	ldr	r4, [r6, #0]
 800a9f0:	4626      	mov	r6, r4
 800a9f2:	2e00      	cmp	r6, #0
 800a9f4:	d140      	bne.n	800aa78 <_malloc_r+0xcc>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	eb04 0803 	add.w	r8, r4, r3
 800aa00:	f000 f848 	bl	800aa94 <_sbrk_r>
 800aa04:	4580      	cmp	r8, r0
 800aa06:	d13a      	bne.n	800aa7e <_malloc_r+0xd2>
 800aa08:	6821      	ldr	r1, [r4, #0]
 800aa0a:	3503      	adds	r5, #3
 800aa0c:	1a6d      	subs	r5, r5, r1
 800aa0e:	f025 0503 	bic.w	r5, r5, #3
 800aa12:	3508      	adds	r5, #8
 800aa14:	2d0c      	cmp	r5, #12
 800aa16:	bf38      	it	cc
 800aa18:	250c      	movcc	r5, #12
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f7ff ffa5 	bl	800a96c <sbrk_aligned>
 800aa22:	3001      	adds	r0, #1
 800aa24:	d02b      	beq.n	800aa7e <_malloc_r+0xd2>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	442b      	add	r3, r5
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	e00e      	b.n	800aa4c <_malloc_r+0xa0>
 800aa2e:	6822      	ldr	r2, [r4, #0]
 800aa30:	1b52      	subs	r2, r2, r5
 800aa32:	d41e      	bmi.n	800aa72 <_malloc_r+0xc6>
 800aa34:	2a0b      	cmp	r2, #11
 800aa36:	d916      	bls.n	800aa66 <_malloc_r+0xba>
 800aa38:	1961      	adds	r1, r4, r5
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	6025      	str	r5, [r4, #0]
 800aa3e:	bf18      	it	ne
 800aa40:	6059      	strne	r1, [r3, #4]
 800aa42:	6863      	ldr	r3, [r4, #4]
 800aa44:	bf08      	it	eq
 800aa46:	6031      	streq	r1, [r6, #0]
 800aa48:	5162      	str	r2, [r4, r5]
 800aa4a:	604b      	str	r3, [r1, #4]
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f104 060b 	add.w	r6, r4, #11
 800aa52:	f000 f835 	bl	800aac0 <__malloc_unlock>
 800aa56:	f026 0607 	bic.w	r6, r6, #7
 800aa5a:	1d23      	adds	r3, r4, #4
 800aa5c:	1af2      	subs	r2, r6, r3
 800aa5e:	d0b6      	beq.n	800a9ce <_malloc_r+0x22>
 800aa60:	1b9b      	subs	r3, r3, r6
 800aa62:	50a3      	str	r3, [r4, r2]
 800aa64:	e7b3      	b.n	800a9ce <_malloc_r+0x22>
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	42a3      	cmp	r3, r4
 800aa6a:	bf0c      	ite	eq
 800aa6c:	6032      	streq	r2, [r6, #0]
 800aa6e:	605a      	strne	r2, [r3, #4]
 800aa70:	e7ec      	b.n	800aa4c <_malloc_r+0xa0>
 800aa72:	4623      	mov	r3, r4
 800aa74:	6864      	ldr	r4, [r4, #4]
 800aa76:	e7b2      	b.n	800a9de <_malloc_r+0x32>
 800aa78:	4634      	mov	r4, r6
 800aa7a:	6876      	ldr	r6, [r6, #4]
 800aa7c:	e7b9      	b.n	800a9f2 <_malloc_r+0x46>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	603b      	str	r3, [r7, #0]
 800aa82:	4638      	mov	r0, r7
 800aa84:	f000 f81c 	bl	800aac0 <__malloc_unlock>
 800aa88:	e7a1      	b.n	800a9ce <_malloc_r+0x22>
 800aa8a:	6025      	str	r5, [r4, #0]
 800aa8c:	e7de      	b.n	800aa4c <_malloc_r+0xa0>
 800aa8e:	bf00      	nop
 800aa90:	200008e0 	.word	0x200008e0

0800aa94 <_sbrk_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	; (800aab0 <_sbrk_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f6 f910 	bl	8000cc4 <_sbrk>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_sbrk_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_sbrk_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	200008e8 	.word	0x200008e8

0800aab4 <__malloc_lock>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__malloc_lock+0x8>)
 800aab6:	f000 b809 	b.w	800aacc <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	200008ec 	.word	0x200008ec

0800aac0 <__malloc_unlock>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__malloc_unlock+0x8>)
 800aac2:	f000 b804 	b.w	800aace <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	200008ec 	.word	0x200008ec

0800aacc <__retarget_lock_acquire_recursive>:
 800aacc:	4770      	bx	lr

0800aace <__retarget_lock_release_recursive>:
 800aace:	4770      	bx	lr

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
