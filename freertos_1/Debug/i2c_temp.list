
i2c_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000950c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b0  080096b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b8  080096b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080096c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017231  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec7  00000000  00000000  000372f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0003b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  0003c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240f5  00000000  00000000  0003d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5de  00000000  00000000  0006150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8f8  00000000  00000000  0007baeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001473e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b88  00000000  00000000  00147434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800967c 	.word	0x0800967c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800967c 	.word	0x0800967c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b72      	ldr	r3, [pc, #456]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a71      	ldr	r2, [pc, #452]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b6b      	ldr	r3, [pc, #428]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6a      	ldr	r2, [pc, #424]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b68      	ldr	r3, [pc, #416]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b64      	ldr	r3, [pc, #400]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a63      	ldr	r2, [pc, #396]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b5d      	ldr	r3, [pc, #372]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a5c      	ldr	r2, [pc, #368]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5a      	ldr	r3, [pc, #360]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b56      	ldr	r3, [pc, #344]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a55      	ldr	r2, [pc, #340]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	4849      	ldr	r0, [pc, #292]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 8000590:	f000 ff28 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 800059a:	f000 ff23 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	4845      	ldr	r0, [pc, #276]	; (80006bc <MX_GPIO_Init+0x1f0>)
 80005a6:	f000 ff1d 	bl	80013e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	483c      	ldr	r0, [pc, #240]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 80005c2:	f000 fd73 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 80005de:	f000 fd65 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	482e      	ldr	r0, [pc, #184]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 80005fe:	f000 fd55 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	482a      	ldr	r0, [pc, #168]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000618:	f000 fd48 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000630:	f000 fd3c 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000646:	2305      	movs	r3, #5
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	481c      	ldr	r0, [pc, #112]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000652:	f000 fd2b 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <MX_GPIO_Init+0x1f0>)
 8000670:	f000 fd1c 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000674:	2320      	movs	r3, #32
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_GPIO_Init+0x1f0>)
 8000688:	f000 fd10 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000690:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 80006a2:	f000 fd03 	bl	80010ac <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f002 fa91 	bl	8002c2c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f98e 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000ac 	.word	0x200000ac
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <HAL_I2C_MspInit+0xa4>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d13c      	bne.n	80007c0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000762:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <HAL_I2C_MspInit+0xac>)
 8000780:	f000 fc94 	bl	80010ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_I2C_MspInit+0xa8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	201f      	movs	r0, #31
 80007a6:	f000 fc1a 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007aa:	201f      	movs	r0, #31
 80007ac:	f000 fc33 	bl	8001016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2020      	movs	r0, #32
 80007b6:	f000 fc12 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007ba:	2020      	movs	r0, #32
 80007bc:	f000 fc2b 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40005400 	.word	0x40005400
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400

080007d4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f004 f82a 	bl	800486c <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 f907 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000100 	.word	0x20000100
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a31      	ldr	r2, [pc, #196]	; (8000924 <HAL_I2S_MspInit+0xf0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d15a      	bne.n	800091a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000868:	23c0      	movs	r3, #192	; 0xc0
 800086a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f005 f91d 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000880:	f000 f8d6 	bl	8000a30 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 800088e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <HAL_I2S_MspInit+0xf4>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d8:	2310      	movs	r3, #16
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e8:	2306      	movs	r3, #6
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <HAL_I2S_MspInit+0xf8>)
 80008f4:	f000 fbda 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008f8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090a:	2306      	movs	r3, #6
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <HAL_I2S_MspInit+0xfc>)
 8000916:	f000 fbc9 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3738      	adds	r7, #56	; 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40003c00 	.word	0x40003c00
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020800 	.word	0x40020800

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 f9e0 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f80e 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff fdc4 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000944:	f7ff fec0 	bl	80006c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000948:	f7ff ff44 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800094c:	f000 f876 	bl	8000a3c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000950:	f008 fa4c 	bl	8008dec <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000954:	f008 fa70 	bl	8008e38 <MX_USB_HOST_Process>
  {
 8000958:	e7fc      	b.n	8000954 <main+0x20>
	...

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f008 fd80 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <SystemClock_Config+0xcc>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <SystemClock_Config+0xd0>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009cc:	2308      	movs	r3, #8
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009da:	2307      	movs	r3, #7
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 fbe2 	bl	80051ac <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ee:	f000 f81f 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2105      	movs	r1, #5
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fe43 	bl	800569c <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 f808 	bl	8000a30 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3750      	adds	r7, #80	; 0x50
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <MX_SPI1_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_SPI1_Init+0x64>)
 8000a8e:	f005 f951 	bl	8005d34 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a98:	f7ff ffca 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000148 	.word	0x20000148
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_SPI_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_SPI_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b02:	23e0      	movs	r3, #224	; 0xe0
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_SPI_MspInit+0x8c>)
 8000b1e:	f000 fac5 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fa26 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8e4 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <I2C1_EV_IRQHandler+0x10>)
 8000be2:	f002 f967 	bl	8002eb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000ac 	.word	0x200000ac

08000bf0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <I2C1_ER_IRQHandler+0x10>)
 8000bf6:	f002 face 	bl	8003196 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000ac 	.word	0x200000ac

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f000 fe6f 	bl	80018ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000584 	.word	0x20000584

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f008 fbd8 	bl	80093fc <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200001a0 	.word	0x200001a0
 8000c80:	20000898 	.word	0x20000898

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f008 fb97 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fe2b 	bl	8000934 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cec:	080096c0 	.word	0x080096c0
  ldr r2, =_sbss
 8000cf0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cf4:	20000898 	.word	0x20000898

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff ff02 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001a4 	.word	0x200001a4

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001a4 	.word	0x200001a4

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d004      	beq.n	8001068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e00c      	b.n	8001082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2205      	movs	r2, #5
 800106c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109c:	b2db      	uxtb	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e16b      	b.n	80013a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 815a 	bne.w	800139a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80b4 	beq.w	800139a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <HAL_GPIO_Init+0x30c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a5f      	ldr	r2, [pc, #380]	; (80013b8 <HAL_GPIO_Init+0x30c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a5b      	ldr	r2, [pc, #364]	; (80013bc <HAL_GPIO_Init+0x310>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x21a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x216>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x328>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x212>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x32c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x330>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x20a>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00e      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012b6:	2308      	movs	r3, #8
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	; (80013bc <HAL_GPIO_Init+0x310>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_GPIO_Init+0x334>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_GPIO_Init+0x334>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae90 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40021c00 	.word	0x40021c00
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001418:	b08f      	sub	sp, #60	; 0x3c
 800141a:	af0a      	add	r7, sp, #40	; 0x28
 800141c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e054      	b.n	80014d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f007 fd30 	bl	8008ea8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fd5f 	bl	8005f2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	687e      	ldr	r6, [r7, #4]
 8001474:	466d      	mov	r5, sp
 8001476:	f106 0410 	add.w	r4, r6, #16
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001486:	e885 0003 	stmia.w	r5, {r0, r1}
 800148a:	1d33      	adds	r3, r6, #4
 800148c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f004 fcd9 	bl	8005e46 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fd56 	bl	8005f4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f004 fede 	bl	8006284 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b089      	sub	sp, #36	; 0x24
 80014de:	af04      	add	r7, sp, #16
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70bb      	strb	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_HCD_HC_Init+0x28>
 80014fe:	2302      	movs	r3, #2
 8001500:	e076      	b.n	80015f0 <HAL_HCD_HC_Init+0x116>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	333d      	adds	r3, #61	; 0x3d
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3338      	adds	r3, #56	; 0x38
 800152a:	787a      	ldrb	r2, [r7, #1]
 800152c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3340      	adds	r3, #64	; 0x40
 800153c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800153e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3339      	adds	r3, #57	; 0x39
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	333f      	adds	r3, #63	; 0x3f
 8001560:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	78ba      	ldrb	r2, [r7, #2]
 800156a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156e:	b2d0      	uxtb	r0, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	212c      	movs	r1, #44	; 0x2c
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4413      	add	r3, r2
 800157a:	333a      	adds	r3, #58	; 0x3a
 800157c:	4602      	mov	r2, r0
 800157e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da09      	bge.n	800159c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	333b      	adds	r3, #59	; 0x3b
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e008      	b.n	80015ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	333b      	adds	r3, #59	; 0x3b
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	333c      	adds	r3, #60	; 0x3c
 80015bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	787c      	ldrb	r4, [r7, #1]
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	78f9      	ldrb	r1, [r7, #3]
 80015cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4623      	mov	r3, r4
 80015de:	f004 ffd7 	bl	8006590 <USB_HC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_HCD_HC_Halt+0x1e>
 8001612:	2302      	movs	r3, #2
 8001614:	e00f      	b.n	8001636 <HAL_HCD_HC_Halt+0x3e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fa27 	bl	8006a7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	70bb      	strb	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	333b      	adds	r3, #59	; 0x3b
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	212c      	movs	r1, #44	; 0x2c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	333f      	adds	r3, #63	; 0x3f
 800167a:	787a      	ldrb	r2, [r7, #1]
 800167c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d112      	bne.n	80016aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3342      	adds	r3, #66	; 0x42
 8001692:	2203      	movs	r2, #3
 8001694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	333d      	adds	r3, #61	; 0x3d
 80016a4:	7f3a      	ldrb	r2, [r7, #28]
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e008      	b.n	80016bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	3342      	adds	r3, #66	; 0x42
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	f200 80c6 	bhi.w	8001850 <HAL_HCD_HC_SubmitRequest+0x210>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	0800183d 	.word	0x0800183d
 80016d4:	08001741 	.word	0x08001741
 80016d8:	080017bf 	.word	0x080017bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016dc:	7c3b      	ldrb	r3, [r7, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 80b8 	bne.w	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80b4 	bne.w	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016ec:	8b3b      	ldrh	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	3355      	adds	r3, #85	; 0x55
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	3355      	adds	r3, #85	; 0x55
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3342      	adds	r3, #66	; 0x42
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800172a:	e093      	b.n	8001854 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3342      	adds	r3, #66	; 0x42
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
      break;
 800173e:	e089      	b.n	8001854 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11d      	bne.n	8001782 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3355      	adds	r3, #85	; 0x55
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800176c:	e073      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3342      	adds	r3, #66	; 0x42
 800177c:	2202      	movs	r2, #2
 800177e:	701a      	strb	r2, [r3, #0]
      break;
 8001780:	e069      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	3354      	adds	r3, #84	; 0x54
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e055      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3342      	adds	r3, #66	; 0x42
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
      break;
 80017bc:	e04b      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11d      	bne.n	8001800 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3355      	adds	r3, #85	; 0x55
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ea:	e034      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3342      	adds	r3, #66	; 0x42
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e02a      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3354      	adds	r3, #84	; 0x54
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3342      	adds	r3, #66	; 0x42
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e016      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2202      	movs	r2, #2
 8001838:	701a      	strb	r2, [r3, #0]
      break;
 800183a:	e00c      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e002      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001854:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3344      	adds	r3, #68	; 0x44
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	8b3a      	ldrh	r2, [r7, #24]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	202c      	movs	r0, #44	; 0x2c
 8001870:	fb00 f303 	mul.w	r3, r0, r3
 8001874:	440b      	add	r3, r1
 8001876:	334c      	adds	r3, #76	; 0x4c
 8001878:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3350      	adds	r3, #80	; 0x50
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3339      	adds	r3, #57	; 0x39
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3361      	adds	r3, #97	; 0x61
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	222c      	movs	r2, #44	; 0x2c
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	3338      	adds	r3, #56	; 0x38
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	18d1      	adds	r1, r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	f004 ff7a 	bl	80067d4 <USB_HC_StartXfer>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fc7b 	bl	80061fe <USB_GetMode>
 8001908:	4603      	mov	r3, r0
 800190a:	2b01      	cmp	r3, #1
 800190c:	f040 80f6 	bne.w	8001afc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f004 fc5f 	bl	80061d8 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80ec 	beq.w	8001afa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fc56 	bl	80061d8 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001936:	d104      	bne.n	8001942 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001940:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fc46 	bl	80061d8 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001956:	d104      	bne.n	8001962 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001960:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f004 fc36 	bl	80061d8 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001976:	d104      	bne.n	8001982 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001980:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f004 fc26 	bl	80061d8 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d103      	bne.n	800199e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fc18 	bl	80061d8 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b2:	d11c      	bne.n	80019ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ce:	2110      	movs	r1, #16
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f004 fb07 	bl	8005fe4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	f004 fb38 	bl	800604c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 fd0e 	bl	8006404 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f007 fadb 	bl	8008fa4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 fbf0 	bl	80061d8 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a02:	d102      	bne.n	8001a0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 f89e 	bl	8002b46 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fbe2 	bl	80061d8 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d106      	bne.n	8001a2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f007 faa4 	bl	8008f6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fbd1 	bl	80061d8 <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b10      	cmp	r3, #16
 8001a3e:	d101      	bne.n	8001a44 <HAL_HCD_IRQHandler+0x158>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_HCD_IRQHandler+0x15a>
 8001a44:	2300      	movs	r3, #0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d012      	beq.n	8001a70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 ffa1 	bl	80029a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0210 	orr.w	r2, r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fbaf 	bl	80061d8 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a84:	d13a      	bne.n	8001afc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 ffe4 	bl	8006a58 <USB_HC_ReadInterrupt>
 8001a90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e025      	b.n	8001ae4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8ab 	bl	8001c26 <HCD_HC_IN_IRQHandler>
 8001ad0:	e005      	b.n	8001ade <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fbf9 	bl	80022d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3d4      	bcc.n	8001a98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	e000      	b.n	8001afc <HAL_HCD_IRQHandler+0x210>
      return;
 8001afa:	bf00      	nop
    }
  }
}
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_HCD_Start+0x16>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e013      	b.n	8001b40 <HAL_HCD_Start+0x3e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fcd0 	bl	80064cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f9e9 	bl	8005f08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_HCD_Stop+0x16>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00d      	b.n	8001b7a <HAL_HCD_Stop+0x32>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 f8be 	bl	8006cec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fc72 	bl	8006478 <USB_ResetPort>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	781b      	ldrb	r3, [r3, #0]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3350      	adds	r3, #80	; 0x50
 8001be0:	681b      	ldr	r3, [r3, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fcb6 	bl	800656c <USB_GetCurrentFrame>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fc91 	bl	800653e <USB_GetHostSpeed>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d11a      	bne.n	8001c8c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	461a      	mov	r2, r3
 8001c64:	2304      	movs	r3, #4
 8001c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3361      	adds	r3, #97	; 0x61
 8001c76:	2206      	movs	r2, #6
 8001c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fef8 	bl	8006a7a <USB_HC_Halt>
 8001c8a:	e0af      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca2:	d11b      	bne.n	8001cdc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015a      	lsls	r2, r3, #5
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3361      	adds	r3, #97	; 0x61
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 fed0 	bl	8006a7a <USB_HC_Halt>
 8001cda:	e087      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d109      	bne.n	8001d06 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2320      	movs	r3, #32
 8001d02:	6093      	str	r3, [r2, #8]
 8001d04:	e072      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d11a      	bne.n	8001d52 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3361      	adds	r3, #97	; 0x61
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fe95 	bl	8006a7a <USB_HC_Halt>
 8001d50:	e04c      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d11b      	bne.n	8001da2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3361      	adds	r3, #97	; 0x61
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fe6d 	bl	8006a7a <USB_HC_Halt>
 8001da0:	e024      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d119      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3361      	adds	r3, #97	; 0x61
 8001dd8:	2206      	movs	r2, #6
 8001dda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 fe47 	bl	8006a7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e02:	d112      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fe33 	bl	8006a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e28:	e24e      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	f040 80df 	bne.w	8002000 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3348      	adds	r3, #72	; 0x48
 8001e58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0159      	lsls	r1, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	202c      	movs	r0, #44	; 0x2c
 8001e74:	fb00 f303 	mul.w	r3, r0, r3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3350      	adds	r3, #80	; 0x50
 8001e7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3361      	adds	r3, #97	; 0x61
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	335c      	adds	r3, #92	; 0x5c
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	333f      	adds	r3, #63	; 0x3f
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d009      	beq.n	8001edc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	333f      	adds	r3, #63	; 0x3f
 8001ed6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d111      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fdc7 	bl	8006a7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2310      	movs	r3, #16
 8001efc:	6093      	str	r3, [r2, #8]
 8001efe:	e03a      	b.n	8001f76 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	333f      	adds	r3, #63	; 0x3f
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d009      	beq.n	8001f28 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d126      	bne.n	8001f76 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0151      	lsls	r1, r2, #5
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3360      	adds	r3, #96	; 0x60
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	b2d9      	uxtb	r1, r3
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	202c      	movs	r0, #44	; 0x2c
 8001f64:	fb00 f303 	mul.w	r3, r0, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3360      	adds	r3, #96	; 0x60
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f007 f825 	bl	8008fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d12b      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3348      	adds	r3, #72	; 0x48
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	202c      	movs	r0, #44	; 0x2c
 8001f94:	fb00 f202 	mul.w	r2, r0, r2
 8001f98:	440a      	add	r2, r1
 8001f9a:	3240      	adds	r2, #64	; 0x40
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 818e 	beq.w	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3354      	adds	r3, #84	; 0x54
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f083 0301 	eor.w	r3, r3, #1
 8001fc0:	b2d8      	uxtb	r0, r3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3354      	adds	r3, #84	; 0x54
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	701a      	strb	r2, [r3, #0]
}
 8001fd4:	e178      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3354      	adds	r3, #84	; 0x54
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2d8      	uxtb	r0, r3
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3354      	adds	r3, #84	; 0x54
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	701a      	strb	r2, [r3, #0]
}
 8001ffe:	e163      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b02      	cmp	r3, #2
 8002014:	f040 80f6 	bne.w	8002204 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3361      	adds	r3, #97	; 0x61
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d109      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	3360      	adds	r3, #96	; 0x60
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	e0c9      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3361      	adds	r3, #97	; 0x61
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d109      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3360      	adds	r3, #96	; 0x60
 8002062:	2205      	movs	r2, #5
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e0b5      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3361      	adds	r3, #97	; 0x61
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d009      	beq.n	8002090 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3361      	adds	r3, #97	; 0x61
 800208a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800208c:	2b08      	cmp	r3, #8
 800208e:	d150      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	335c      	adds	r3, #92	; 0x5c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	440b      	add	r3, r1
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	335c      	adds	r3, #92	; 0x5c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d912      	bls.n	80020ec <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	335c      	adds	r3, #92	; 0x5c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	2204      	movs	r2, #4
 80020e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020ea:	e073      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3360      	adds	r3, #96	; 0x60
 80020fa:	2202      	movs	r2, #2
 80020fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002114:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002130:	e050      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3361      	adds	r3, #97	; 0x61
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d122      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3360      	adds	r3, #96	; 0x60
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800216e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002176:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e023      	b.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3361      	adds	r3, #97	; 0x61
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b07      	cmp	r3, #7
 800219e:	d119      	bne.n	80021d4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	335c      	adds	r3, #92	; 0x5c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	202c      	movs	r0, #44	; 0x2c
 80021b8:	fb00 f303 	mul.w	r3, r0, r3
 80021bc:	440b      	add	r3, r1
 80021be:	335c      	adds	r3, #92	; 0x5c
 80021c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	2204      	movs	r2, #4
 80021d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	2302      	movs	r3, #2
 80021e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	b2d9      	uxtb	r1, r3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	202c      	movs	r0, #44	; 0x2c
 80021f0:	fb00 f303 	mul.w	r3, r0, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3360      	adds	r3, #96	; 0x60
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f006 fedf 	bl	8008fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002202:	e061      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b10      	cmp	r3, #16
 8002218:	d156      	bne.n	80022c8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d111      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fc15 	bl	8006a7a <USB_HC_Halt>
 8002250:	e031      	b.n	80022b6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	333f      	adds	r3, #63	; 0x3f
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	333f      	adds	r3, #63	; 0x3f
 8002274:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002276:	2b02      	cmp	r3, #2
 8002278:	d11d      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d110      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	2203      	movs	r2, #3
 80022a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 fbe2 	bl	8006a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2310      	movs	r3, #16
 80022c6:	6093      	str	r3, [r2, #8]
}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d11a      	bne.n	8002336 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	2304      	movs	r3, #4
 8002310:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3361      	adds	r3, #97	; 0x61
 8002320:	2206      	movs	r2, #6
 8002322:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fba3 	bl	8006a7a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002334:	e331      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b20      	cmp	r3, #32
 800234a:	d12e      	bne.n	80023aa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2320      	movs	r3, #32
 800235c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	333d      	adds	r3, #61	; 0x3d
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	f040 8313 	bne.w	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	333d      	adds	r3, #61	; 0x3d
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3360      	adds	r3, #96	; 0x60
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 fb69 	bl	8006a7a <USB_HC_Halt>
}
 80023a8:	e2f7      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d112      	bne.n	80023e8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fb4a 	bl	8006a7a <USB_HC_Halt>
}
 80023e6:	e2d8      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d140      	bne.n	8002480 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	335c      	adds	r3, #92	; 0x5c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d111      	bne.n	800244a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	333d      	adds	r3, #61	; 0x3d
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2301      	movs	r3, #1
 800245a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f004 fafe 	bl	8006a7a <USB_HC_Halt>
}
 800247e:	e28c      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d12c      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	2204      	movs	r2, #4
 80024a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	333d      	adds	r3, #61	; 0x3d
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	335c      	adds	r3, #92	; 0x5c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f004 facf 	bl	8006a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	6093      	str	r3, [r2, #8]
}
 80024ee:	e254      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b08      	cmp	r3, #8
 8002504:	d11a      	bne.n	800253c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	2308      	movs	r3, #8
 8002516:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	2205      	movs	r2, #5
 8002528:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f004 faa0 	bl	8006a7a <USB_HC_Halt>
}
 800253a:	e22e      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d140      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	2203      	movs	r2, #3
 8002574:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	333d      	adds	r3, #61	; 0x3d
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d112      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333c      	adds	r3, #60	; 0x3c
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	333d      	adds	r3, #61	; 0x3d
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fa5d 	bl	8006a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	461a      	mov	r2, r3
 80025ce:	2310      	movs	r3, #16
 80025d0:	6093      	str	r3, [r2, #8]
}
 80025d2:	e1e2      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d164      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3361      	adds	r3, #97	; 0x61
 8002600:	2206      	movs	r2, #6
 8002602:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fa33 	bl	8006a7a <USB_HC_Halt>
 8002614:	e044      	b.n	80026a0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	202c      	movs	r0, #44	; 0x2c
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	440b      	add	r3, r1
 8002634:	335c      	adds	r3, #92	; 0x5c
 8002636:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	335c      	adds	r3, #92	; 0x5c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d920      	bls.n	800268e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	335c      	adds	r3, #92	; 0x5c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3360      	adds	r3, #96	; 0x60
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	b2d9      	uxtb	r1, r3
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	202c      	movs	r0, #44	; 0x2c
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	4413      	add	r3, r2
 8002680:	3360      	adds	r3, #96	; 0x60
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f006 fc9a 	bl	8008fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800268c:	e008      	b.n	80026a0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	6093      	str	r3, [r2, #8]
}
 80026b2:	e172      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ca:	d11b      	bne.n	8002704 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3361      	adds	r3, #97	; 0x61
 80026da:	2208      	movs	r2, #8
 80026dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 f9c6 	bl	8006a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	461a      	mov	r2, r3
 80026fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002700:	6093      	str	r3, [r2, #8]
}
 8002702:	e14a      	b.n	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	f040 813f 	bne.w	800299a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d17d      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	333f      	adds	r3, #63	; 0x3f
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d00a      	beq.n	800276c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	333f      	adds	r3, #63	; 0x3f
 8002764:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	f040 8100 	bne.w	800296c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3355      	adds	r3, #85	; 0x55
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2d8      	uxtb	r0, r3
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3355      	adds	r3, #85	; 0x55
 8002798:	4602      	mov	r2, r0
 800279a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f040 80e3 	bne.w	800296c <HCD_HC_OUT_IRQHandler+0x69c>
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	334c      	adds	r3, #76	; 0x4c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80d8 	beq.w	800296c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	334c      	adds	r3, #76	; 0x4c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	202c      	movs	r0, #44	; 0x2c
 80027d2:	fb00 f202 	mul.w	r2, r0, r2
 80027d6:	440a      	add	r2, r1
 80027d8:	3240      	adds	r2, #64	; 0x40
 80027da:	8812      	ldrh	r2, [r2, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	3b01      	subs	r3, #1
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	202c      	movs	r0, #44	; 0x2c
 80027e6:	fb00 f202 	mul.w	r2, r0, r2
 80027ea:	440a      	add	r2, r1
 80027ec:	3240      	adds	r2, #64	; 0x40
 80027ee:	8812      	ldrh	r2, [r2, #0]
 80027f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80b5 	beq.w	800296c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3355      	adds	r3, #85	; 0x55
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2d8      	uxtb	r0, r3
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3355      	adds	r3, #85	; 0x55
 8002826:	4602      	mov	r2, r0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e09f      	b.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d109      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3360      	adds	r3, #96	; 0x60
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	e08b      	b.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d109      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e077      	b.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3361      	adds	r3, #97	; 0x61
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d109      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	2205      	movs	r2, #5
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e063      	b.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d009      	beq.n	80028cc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	; 0x61
 80028c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d14f      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	335c      	adds	r3, #92	; 0x5c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	202c      	movs	r0, #44	; 0x2c
 80028e4:	fb00 f303 	mul.w	r3, r0, r3
 80028e8:	440b      	add	r3, r1
 80028ea:	335c      	adds	r3, #92	; 0x5c
 80028ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d912      	bls.n	8002928 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e021      	b.n	800296c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2202      	movs	r2, #2
 8002938:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002950:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002958:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	2302      	movs	r3, #2
 800297c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	b2d9      	uxtb	r1, r3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	202c      	movs	r0, #44	; 0x2c
 8002988:	fb00 f303 	mul.w	r3, r0, r3
 800298c:	4413      	add	r3, r2
 800298e:	3360      	adds	r3, #96	; 0x60
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f006 fb13 	bl	8008fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b08a      	sub	sp, #40	; 0x28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	0c5b      	lsrs	r3, r3, #17
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d004      	beq.n	80029e8 <HCD_RXQLVL_IRQHandler+0x46>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	f000 80a9 	beq.w	8002b38 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029e6:	e0aa      	b.n	8002b3e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a6 	beq.w	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3344      	adds	r3, #68	; 0x44
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 809b 	beq.w	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3350      	adds	r3, #80	; 0x50
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	441a      	add	r2, r3
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	202c      	movs	r0, #44	; 0x2c
 8002a20:	fb00 f303 	mul.w	r3, r0, r3
 8002a24:	440b      	add	r3, r1
 8002a26:	334c      	adds	r3, #76	; 0x4c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d87a      	bhi.n	8002b24 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3344      	adds	r3, #68	; 0x44
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	b292      	uxth	r2, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f003 fb6e 	bl	8006128 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3344      	adds	r3, #68	; 0x44
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	441a      	add	r2, r3
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	202c      	movs	r0, #44	; 0x2c
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3344      	adds	r3, #68	; 0x44
 8002a6e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3350      	adds	r3, #80	; 0x50
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	441a      	add	r2, r3
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	202c      	movs	r0, #44	; 0x2c
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3350      	adds	r3, #80	; 0x50
 8002a92:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	0cdb      	lsrs	r3, r3, #19
 8002aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3340      	adds	r3, #64	; 0x40
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d13c      	bne.n	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d039      	beq.n	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ade:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3354      	adds	r3, #84	; 0x54
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3354      	adds	r3, #84	; 0x54
 8002b1e:	4602      	mov	r2, r0
 8002b20:	701a      	strb	r2, [r3, #0]
      break;
 8002b22:	e00b      	b.n	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	2204      	movs	r2, #4
 8002b34:	701a      	strb	r2, [r3, #0]
      break;
 8002b36:	e001      	b.n	8002b3c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b3c:	bf00      	nop
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b72:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d10b      	bne.n	8002b96 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f006 f9fd 	bl	8008f88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d132      	bne.n	8002c06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d126      	bne.n	8002c00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d113      	bne.n	8002be2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc4:	d106      	bne.n	8002bd4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 fc19 	bl	8006404 <USB_InitFSLSPClkSel>
 8002bd2:	e011      	b.n	8002bf8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fc12 	bl	8006404 <USB_InitFSLSPClkSel>
 8002be0:	e00a      	b.n	8002bf8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bf6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f006 f9ef 	bl	8008fdc <HAL_HCD_PortEnabled_Callback>
 8002bfe:	e002      	b.n	8002c06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f006 f9f9 	bl	8008ff8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d103      	bne.n	8002c18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f043 0320 	orr.w	r3, r3, #32
 8002c16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e12b      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd fd66 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c90:	f002 fefc 	bl	8005a8c <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d807      	bhi.n	8002cb0 <HAL_I2C_Init+0x84>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a80      	ldr	r2, [pc, #512]	; (8002ea4 <HAL_I2C_Init+0x278>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e006      	b.n	8002cbe <HAL_I2C_Init+0x92>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_I2C_Init+0x27c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0e7      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a78      	ldr	r2, [pc, #480]	; (8002eac <HAL_I2C_Init+0x280>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d802      	bhi.n	8002d00 <HAL_I2C_Init+0xd4>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	e009      	b.n	8002d14 <HAL_I2C_Init+0xe8>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a69      	ldr	r2, [pc, #420]	; (8002eb0 <HAL_I2C_Init+0x284>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	3301      	adds	r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d819      	bhi.n	8002d68 <HAL_I2C_Init+0x13c>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e59      	subs	r1, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d48:	400b      	ands	r3, r1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_I2C_Init+0x138>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e59      	subs	r1, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	e051      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e04f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_I2C_Init+0x168>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_I2C_Init+0x18e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x196>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_I2C_Init+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e58      	subs	r0, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	6809      	ldr	r1, [r1, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6911      	ldr	r1, [r2, #16]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	001e847f 	.word	0x001e847f
 8002ea8:	003d08ff 	.word	0x003d08ff
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	10624dd3 	.word	0x10624dd3

08002eb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d003      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x38>
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	f040 80c1 	bne.w	800306e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f0c:	d003      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x62>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_EV_IRQHandler+0x66>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_I2C_EV_IRQHandler+0x68>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	f000 8132 	beq.w	8003186 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_I2C_EV_IRQHandler+0x92>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 fc7b 	bl	8004834 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fd83 	bl	8003a4a <I2C_Master_SB>
 8002f44:	e092      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0xb2>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	0a5b      	lsrs	r3, r3, #9
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fdf9 	bl	8003b56 <I2C_Master_ADD10>
 8002f64:	e082      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fe13 	bl	8003baa <I2C_Master_ADDR>
 8002f84:	e072      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03b      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa0:	f000 80f3 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	09db      	lsrs	r3, r3, #7
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f9f3 	bl	80033b4 <I2C_MasterTransmit_TXE>
 8002fce:	e04d      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80d6 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	0a5b      	lsrs	r3, r3, #9
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80cf 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d103      	bne.n	8002ffa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa7a 	bl	80034ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff8:	e0c7      	b.n	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	f040 80c4 	bne.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fae8 	bl	80035d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003008:	e0bf      	b.n	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003018:	f000 80b7 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00f      	beq.n	8003048 <HAL_I2C_EV_IRQHandler+0x194>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	0a9b      	lsrs	r3, r3, #10
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_I2C_EV_IRQHandler+0x194>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fb5d 	bl	8003700 <I2C_MasterReceive_RXNE>
 8003046:	e011      	b.n	800306c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 809a 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a5b      	lsrs	r3, r3, #9
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8093 	beq.w	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fc06 	bl	8003876 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306a:	e08e      	b.n	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
 800306c:	e08d      	b.n	800318a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e007      	b.n	8003090 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d012      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030b8:	69b9      	ldr	r1, [r7, #24]
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 ffc4 	bl	8004048 <I2C_Slave_ADDR>
 80030c0:	e066      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	0a5b      	lsrs	r3, r3, #9
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fffe 	bl	80040dc <I2C_Slave_STOPF>
 80030e0:	e056      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030e2:	7bbb      	ldrb	r3, [r7, #14]
 80030e4:	2b21      	cmp	r3, #33	; 0x21
 80030e6:	d002      	beq.n	80030ee <HAL_I2C_EV_IRQHandler+0x23a>
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	2b29      	cmp	r3, #41	; 0x29
 80030ec:	d125      	bne.n	800313a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	09db      	lsrs	r3, r3, #7
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00f      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x266>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	0a9b      	lsrs	r3, r3, #10
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x266>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 feda 	bl	8003ecc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003118:	e039      	b.n	800318e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d033      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x2da>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	0a5b      	lsrs	r3, r3, #9
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02d      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 ff07 	bl	8003f46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003138:	e029      	b.n	800318e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	0a9b      	lsrs	r3, r3, #10
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 ff12 	bl	8003f88 <I2C_SlaveReceive_RXNE>
 8003164:	e014      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00e      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	0a5b      	lsrs	r3, r3, #9
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ff40 	bl	8004004 <I2C_SlaveReceive_BTF>
 8003184:	e004      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08a      	sub	sp, #40	; 0x28
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <HAL_I2C_ER_IRQHandler+0x78>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800320c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	0a9b      	lsrs	r3, r3, #10
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03f      	beq.n	800329a <HAL_I2C_ER_IRQHandler+0x104>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d039      	beq.n	800329a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003226:	7efb      	ldrb	r3, [r7, #27]
 8003228:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003240:	7ebb      	ldrb	r3, [r7, #26]
 8003242:	2b20      	cmp	r3, #32
 8003244:	d112      	bne.n	800326c <HAL_I2C_ER_IRQHandler+0xd6>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <HAL_I2C_ER_IRQHandler+0xd6>
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b21      	cmp	r3, #33	; 0x21
 8003250:	d008      	beq.n	8003264 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b29      	cmp	r3, #41	; 0x29
 8003256:	d005      	beq.n	8003264 <HAL_I2C_ER_IRQHandler+0xce>
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b28      	cmp	r3, #40	; 0x28
 800325c:	d106      	bne.n	800326c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b21      	cmp	r3, #33	; 0x21
 8003262:	d103      	bne.n	800326c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f001 f869 	bl	800433c <I2C_Slave_AF>
 800326a:	e016      	b.n	800329a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003274:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800327e:	7efb      	ldrb	r3, [r7, #27]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d002      	beq.n	800328a <HAL_I2C_ER_IRQHandler+0xf4>
 8003284:	7efb      	ldrb	r3, [r7, #27]
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d107      	bne.n	800329a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	0adb      	lsrs	r3, r3, #11
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 f8a0 	bl	800441c <I2C_ITError>
  }
}
 80032dc:	bf00      	nop
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
 8003340:	4613      	mov	r3, r2
 8003342:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d150      	bne.n	800347c <I2C_MasterTransmit_TXE+0xc8>
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d14d      	bne.n	800347c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d01d      	beq.n	8003422 <I2C_MasterTransmit_TXE+0x6e>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d01a      	beq.n	8003422 <I2C_MasterTransmit_TXE+0x6e>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f2:	d016      	beq.n	8003422 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003402:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2211      	movs	r2, #17
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff62 	bl	80032e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003420:	e060      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003430:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d107      	bne.n	800346c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff7d 	bl	8003364 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800346a:	e03b      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff35 	bl	80032e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800347a:	e033      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b21      	cmp	r3, #33	; 0x21
 8003480:	d005      	beq.n	800348e <I2C_MasterTransmit_TXE+0xda>
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d12d      	bne.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b22      	cmp	r3, #34	; 0x22
 800348c:	d12a      	bne.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034a8:	e01c      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d103      	bne.n	80034be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f88e 	bl	80035d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80034bc:	e012      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034e2:	e7ff      	b.n	80034e4 <I2C_MasterTransmit_TXE+0x130>
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d164      	bne.n	80035d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003534:	e04c      	b.n	80035d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d01d      	beq.n	8003578 <I2C_MasterTransmit_BTF+0x8c>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b20      	cmp	r3, #32
 8003540:	d01a      	beq.n	8003578 <I2C_MasterTransmit_BTF+0x8c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003548:	d016      	beq.n	8003578 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003558:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2211      	movs	r2, #17
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff feb7 	bl	80032e4 <HAL_I2C_MasterTxCpltCallback>
}
 8003576:	e02b      	b.n	80035d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003586:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d107      	bne.n	80035c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fed2 	bl	8003364 <HAL_I2C_MemTxCpltCallback>
}
 80035c0:	e006      	b.n	80035d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fe8a 	bl	80032e4 <HAL_I2C_MasterTxCpltCallback>
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11d      	bne.n	800362c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10b      	bne.n	8003610 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800360e:	e073      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	b29b      	uxth	r3, r3
 8003616:	121b      	asrs	r3, r3, #8
 8003618:	b2da      	uxtb	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
}
 800362a:	e065      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10b      	bne.n	800364c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	651a      	str	r2, [r3, #80]	; 0x50
}
 800364a:	e055      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	2b02      	cmp	r3, #2
 8003652:	d151      	bne.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b22      	cmp	r3, #34	; 0x22
 8003658:	d10d      	bne.n	8003676 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003674:	e040      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b21      	cmp	r3, #33	; 0x21
 8003684:	d112      	bne.n	80036ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	781a      	ldrb	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036aa:	e025      	b.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d120      	bne.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d11d      	bne.n	80036f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fe36 	bl	8003364 <HAL_I2C_MemTxCpltCallback>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b22      	cmp	r3, #34	; 0x22
 8003712:	f040 80ac 	bne.w	800386e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d921      	bls.n	8003768 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b03      	cmp	r3, #3
 8003752:	f040 808c 	bne.w	800386e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003766:	e082      	b.n	800386e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	2b02      	cmp	r3, #2
 800376e:	d075      	beq.n	800385c <I2C_MasterReceive_RXNE+0x15c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d002      	beq.n	800377c <I2C_MasterReceive_RXNE+0x7c>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d16f      	bne.n	800385c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 f827 	bl	80047d0 <I2C_WaitOnSTOPRequestThroughIT>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d142      	bne.n	800380e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d10a      	bne.n	80037f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fdc1 	bl	8003378 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037f6:	e03a      	b.n	800386e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2212      	movs	r2, #18
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fd76 	bl	80032f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800380c:	e02f      	b.n	800386e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fd99 	bl	800338c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800385a:	e008      	b.n	800386e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	605a      	str	r2, [r3, #4]
}
 800386c:	e7ff      	b.n	800386e <I2C_MasterReceive_RXNE+0x16e>
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d11b      	bne.n	80038c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038c4:	e0bd      	b.n	8003a42 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d129      	bne.n	8003924 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00a      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d007      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003922:	e08e      	b.n	8003a42 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d176      	bne.n	8003a1c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d002      	beq.n	800393a <I2C_MasterReceive_BTF+0xc4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b10      	cmp	r3, #16
 8003938:	d108      	bne.n	800394c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e019      	b.n	8003980 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d002      	beq.n	8003958 <I2C_MasterReceive_BTF+0xe2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d108      	bne.n	800396a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e00a      	b.n	8003980 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b10      	cmp	r3, #16
 800396e:	d007      	beq.n	8003980 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d10a      	bne.n	8003a06 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fcba 	bl	8003378 <HAL_I2C_MemRxCpltCallback>
}
 8003a04:	e01d      	b.n	8003a42 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2212      	movs	r2, #18
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fc6f 	bl	80032f8 <HAL_I2C_MasterRxCpltCallback>
}
 8003a1a:	e012      	b.n	8003a42 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d117      	bne.n	8003a8e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a76:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a78:	e067      	b.n	8003b4a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
}
 8003a8c:	e05d      	b.n	8003b4a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a96:	d133      	bne.n	8003b00 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b21      	cmp	r3, #33	; 0x21
 8003aa2:	d109      	bne.n	8003ab8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	e008      	b.n	8003aca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <I2C_Master_SB+0x92>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d032      	beq.n	8003b4a <I2C_Master_SB+0x100>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02d      	beq.n	8003b4a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afc:	605a      	str	r2, [r3, #4]
}
 8003afe:	e024      	b.n	8003b4a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10e      	bne.n	8003b26 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	11db      	asrs	r3, r3, #7
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0306 	and.w	r3, r3, #6
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f063 030f 	orn	r3, r3, #15
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]
}
 8003b24:	e011      	b.n	8003b4a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10d      	bne.n	8003b4a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	11db      	asrs	r3, r3, #7
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0306 	and.w	r3, r3, #6
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f063 030e 	orn	r3, r3, #14
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <I2C_Master_ADD10+0x26>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <I2C_Master_ADD10+0x48>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9c:	605a      	str	r2, [r3, #4]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b091      	sub	sp, #68	; 0x44
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b22      	cmp	r3, #34	; 0x22
 8003bd2:	f040 8169 	bne.w	8003ea8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <I2C_Master_ADDR+0x54>
 8003bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d10b      	bne.n	8003bfe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	e160      	b.n	8003ec0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11d      	bne.n	8003c42 <I2C_Master_ADDR+0x98>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c0e:	d118      	bne.n	8003c42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c40:	e13e      	b.n	8003ec0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e115      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f040 808a 	bne.w	8003d94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c86:	d137      	bne.n	8003cf8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca6:	d113      	bne.n	8003cd0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	e0e7      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e0d3      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d02e      	beq.n	8003d5c <I2C_Master_ADDR+0x1b2>
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d02b      	beq.n	8003d5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	2b12      	cmp	r3, #18
 8003d08:	d102      	bne.n	8003d10 <I2C_Master_ADDR+0x166>
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d125      	bne.n	8003d5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d00e      	beq.n	8003d34 <I2C_Master_ADDR+0x18a>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d00b      	beq.n	8003d34 <I2C_Master_ADDR+0x18a>
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d008      	beq.n	8003d34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e007      	b.n	8003d44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	e0a1      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e085      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d14d      	bne.n	8003e3a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d016      	beq.n	8003dd2 <I2C_Master_ADDR+0x228>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d013      	beq.n	8003dd2 <I2C_Master_ADDR+0x228>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d010      	beq.n	8003dd2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df0:	d117      	bne.n	8003e22 <I2C_Master_ADDR+0x278>
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df8:	d00b      	beq.n	8003e12 <I2C_Master_ADDR+0x268>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d008      	beq.n	8003e12 <I2C_Master_ADDR+0x268>
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d005      	beq.n	8003e12 <I2C_Master_ADDR+0x268>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d002      	beq.n	8003e12 <I2C_Master_ADDR+0x268>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d107      	bne.n	8003e22 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	e032      	b.n	8003ea0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e48:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e58:	d117      	bne.n	8003e8a <I2C_Master_ADDR+0x2e0>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d00b      	beq.n	8003e7a <I2C_Master_ADDR+0x2d0>
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d008      	beq.n	8003e7a <I2C_Master_ADDR+0x2d0>
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d005      	beq.n	8003e7a <I2C_Master_ADDR+0x2d0>
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d002      	beq.n	8003e7a <I2C_Master_ADDR+0x2d0>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d107      	bne.n	8003e8a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ea6:	e00b      	b.n	8003ec0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	e7ff      	b.n	8003ec0 <I2C_Master_ADDR+0x316>
 8003ec0:	bf00      	nop
 8003ec2:	3744      	adds	r7, #68	; 0x44
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02b      	beq.n	8003f3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d114      	bne.n	8003f3e <I2C_SlaveTransmit_TXE+0x72>
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b29      	cmp	r3, #41	; 0x29
 8003f18:	d111      	bne.n	8003f3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2228      	movs	r2, #40	; 0x28
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f9e7 	bl	800330c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02c      	beq.n	8003ffc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d114      	bne.n	8003ffc <I2C_SlaveReceive_RXNE+0x74>
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd6:	d111      	bne.n	8003ffc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2222      	movs	r2, #34	; 0x22
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2228      	movs	r2, #40	; 0x28
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff f992 	bl	8003320 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004062:	2b28      	cmp	r3, #40	; 0x28
 8004064:	d127      	bne.n	80040b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	09db      	lsrs	r3, r3, #7
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	81bb      	strh	r3, [r7, #12]
 8004098:	e002      	b.n	80040a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040a8:	89ba      	ldrh	r2, [r7, #12]
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff f940 	bl	8003334 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040b4:	e00e      	b.n	80040d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004138:	d172      	bne.n	8004220 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b22      	cmp	r3, #34	; 0x22
 800413e:	d002      	beq.n	8004146 <I2C_Slave_STOPF+0x6a>
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b2a      	cmp	r3, #42	; 0x2a
 8004144:	d135      	bne.n	80041b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004178:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc ff85 	bl	800108e <HAL_DMA_GetState>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d049      	beq.n	800421e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	4a69      	ldr	r2, [pc, #420]	; (8004334 <I2C_Slave_STOPF+0x258>)
 8004190:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc ff57 	bl	800104a <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03d      	beq.n	800421e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b0:	e035      	b.n	800421e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc ff4f 	bl	800108e <HAL_DMA_GetState>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d014      	beq.n	8004220 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	4a4e      	ldr	r2, [pc, #312]	; (8004334 <I2C_Slave_STOPF+0x258>)
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc ff21 	bl	800104a <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
 800421c:	e000      	b.n	8004220 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800421e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03e      	beq.n	80042a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d112      	bne.n	800425e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d112      	bne.n	8004292 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8b3 	bl	800441c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042b6:	e039      	b.n	800432c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b2a      	cmp	r3, #42	; 0x2a
 80042bc:	d109      	bne.n	80042d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2228      	movs	r2, #40	; 0x28
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff f827 	bl	8003320 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b28      	cmp	r3, #40	; 0x28
 80042dc:	d111      	bne.n	8004302 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <I2C_Slave_STOPF+0x25c>)
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f828 	bl	8003350 <HAL_I2C_ListenCpltCallback>
}
 8004300:	e014      	b.n	800432c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	d002      	beq.n	8004310 <I2C_Slave_STOPF+0x234>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b22      	cmp	r3, #34	; 0x22
 800430e:	d10d      	bne.n	800432c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fffa 	bl	8003320 <HAL_I2C_SlaveRxCpltCallback>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	08004681 	.word	0x08004681
 8004338:	ffff0000 	.word	0xffff0000

0800433c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d002      	beq.n	800435e <I2C_Slave_AF+0x22>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b20      	cmp	r3, #32
 800435c:	d129      	bne.n	80043b2 <I2C_Slave_AF+0x76>
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b28      	cmp	r3, #40	; 0x28
 8004362:	d126      	bne.n	80043b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <I2C_Slave_AF+0xdc>)
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004378:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004382:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe ffd0 	bl	8003350 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043b0:	e02e      	b.n	8004410 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b21      	cmp	r3, #33	; 0x21
 80043b6:	d126      	bne.n	8004406 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <I2C_Slave_AF+0xdc>)
 80043bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2221      	movs	r2, #33	; 0x21
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fe ff84 	bl	800330c <HAL_I2C_SlaveTxCpltCallback>
}
 8004404:	e004      	b.n	8004410 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800440e:	615a      	str	r2, [r3, #20]
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	ffff0000 	.word	0xffff0000

0800441c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004432:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004434:	7bbb      	ldrb	r3, [r7, #14]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d002      	beq.n	8004440 <I2C_ITError+0x24>
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d10a      	bne.n	8004456 <I2C_ITError+0x3a>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b22      	cmp	r3, #34	; 0x22
 8004444:	d107      	bne.n	8004456 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004454:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800445c:	2b28      	cmp	r3, #40	; 0x28
 800445e:	d107      	bne.n	8004470 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2228      	movs	r2, #40	; 0x28
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800446e:	e015      	b.n	800449c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447e:	d00a      	beq.n	8004496 <I2C_ITError+0x7a>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b60      	cmp	r3, #96	; 0x60
 8004484:	d007      	beq.n	8004496 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d162      	bne.n	8004572 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d020      	beq.n	800450c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	4a6a      	ldr	r2, [pc, #424]	; (8004678 <I2C_ITError+0x25c>)
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fdb7 	bl	800104a <HAL_DMA_Abort_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8089 	beq.w	80045f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004506:	4610      	mov	r0, r2
 8004508:	4798      	blx	r3
 800450a:	e074      	b.n	80045f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	4a59      	ldr	r2, [pc, #356]	; (8004678 <I2C_ITError+0x25c>)
 8004512:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fd96 	bl	800104a <HAL_DMA_Abort_IT>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d068      	beq.n	80045f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d10b      	bne.n	800454a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800456c:	4610      	mov	r0, r2
 800456e:	4798      	blx	r3
 8004570:	e041      	b.n	80045f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b60      	cmp	r3, #96	; 0x60
 800457c:	d125      	bne.n	80045ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d10b      	bne.n	80045b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fe feec 	bl	80033a0 <HAL_I2C_AbortCpltCallback>
 80045c8:	e015      	b.n	80045f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d10b      	bne.n	80045f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fe fecb 	bl	800338c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004632:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d113      	bne.n	8004670 <I2C_ITError+0x254>
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b28      	cmp	r3, #40	; 0x28
 800464c:	d110      	bne.n	8004670 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <I2C_ITError+0x260>)
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fe fe70 	bl	8003350 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08004681 	.word	0x08004681
 800467c:	ffff0000 	.word	0xffff0000

08004680 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800469a:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <I2C_DMAAbort+0x148>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	08db      	lsrs	r3, r3, #3
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <I2C_DMAAbort+0x14c>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	0a1a      	lsrs	r2, r3, #8
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00da      	lsls	r2, r3, #3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80046c6:	e00a      	b.n	80046de <I2C_DMAAbort+0x5e>
    }
    count--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d0ea      	beq.n	80046b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	2200      	movs	r2, #0
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	2200      	movs	r2, #0
 8004722:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	2200      	movs	r2, #0
 8004732:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d10e      	bne.n	800476e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f7fe fe1a 	bl	80033a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800476c:	e027      	b.n	80047be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004774:	2b28      	cmp	r3, #40	; 0x28
 8004776:	d117      	bne.n	80047a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004796:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2228      	movs	r2, #40	; 0x28
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047a6:	e007      	b.n	80047b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047b8:	6978      	ldr	r0, [r7, #20]
 80047ba:	f7fe fde7 	bl	800338c <HAL_I2C_ErrorCallback>
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000000 	.word	0x20000000
 80047cc:	14f8b589 	.word	0x14f8b589

080047d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	0a1a      	lsrs	r2, r3, #8
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e008      	b.n	8004820 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d0e9      	beq.n	80047f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000000 	.word	0x20000000
 8004830:	14f8b589 	.word	0x14f8b589

08004834 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004844:	d103      	bne.n	800484e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800484c:	e007      	b.n	800485e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004856:	d102      	bne.n	800485e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2208      	movs	r2, #8
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e128      	b.n	8004ad0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a90      	ldr	r2, [pc, #576]	; (8004ad8 <HAL_I2S_Init+0x26c>)
 8004896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fb ffcb 	bl	8000834 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048b4:	f023 030f 	bic.w	r3, r3, #15
 80048b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2202      	movs	r2, #2
 80048c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d060      	beq.n	800498c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048d2:	2310      	movs	r3, #16
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e001      	b.n	80048dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048d8:	2320      	movs	r3, #32
 80048da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d802      	bhi.n	80048ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80048ea:	2001      	movs	r0, #1
 80048ec:	f001 f9c4 	bl	8005c78 <HAL_RCCEx_GetPeriphCLKFreq>
 80048f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fa:	d125      	bne.n	8004948 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	fbb2 f2f3 	udiv	r2, r2, r3
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	3305      	adds	r3, #5
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e01f      	b.n	8004966 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	3305      	adds	r3, #5
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e00e      	b.n	8004966 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	3305      	adds	r3, #5
 8004964:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a5c      	ldr	r2, [pc, #368]	; (8004adc <HAL_I2S_Init+0x270>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e003      	b.n	8004994 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800498c:	2302      	movs	r3, #2
 800498e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d902      	bls.n	80049a0 <HAL_I2S_Init+0x134>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2bff      	cmp	r3, #255	; 0xff
 800499e:	d907      	bls.n	80049b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f043 0210 	orr.w	r2, r3, #16
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e08f      	b.n	8004ad0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	ea42 0103 	orr.w	r1, r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049ce:	f023 030f 	bic.w	r3, r3, #15
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6851      	ldr	r1, [r2, #4]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6892      	ldr	r2, [r2, #8]
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68d2      	ldr	r2, [r2, #12]
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6992      	ldr	r2, [r2, #24]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d161      	bne.n	8004ac0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_I2S_Init+0x274>)
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a37      	ldr	r2, [pc, #220]	; (8004ae4 <HAL_I2S_Init+0x278>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_I2S_Init+0x1a4>
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <HAL_I2S_Init+0x27c>)
 8004a0e:	e001      	b.n	8004a14 <HAL_I2S_Init+0x1a8>
 8004a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4932      	ldr	r1, [pc, #200]	; (8004ae4 <HAL_I2S_Init+0x278>)
 8004a1c:	428a      	cmp	r2, r1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2S_Init+0x1b8>
 8004a20:	4a31      	ldr	r2, [pc, #196]	; (8004ae8 <HAL_I2S_Init+0x27c>)
 8004a22:	e001      	b.n	8004a28 <HAL_I2S_Init+0x1bc>
 8004a24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a2c:	f023 030f 	bic.w	r3, r3, #15
 8004a30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2b      	ldr	r2, [pc, #172]	; (8004ae4 <HAL_I2S_Init+0x278>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2S_Init+0x1d4>
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_I2S_Init+0x27c>)
 8004a3e:	e001      	b.n	8004a44 <HAL_I2S_Init+0x1d8>
 8004a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a44:	2202      	movs	r2, #2
 8004a46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <HAL_I2S_Init+0x278>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_I2S_Init+0x1ea>
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_I2S_Init+0x27c>)
 8004a54:	e001      	b.n	8004a5a <HAL_I2S_Init+0x1ee>
 8004a56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a66:	d003      	beq.n	8004a70 <HAL_I2S_Init+0x204>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	e001      	b.n	8004a7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a90:	4313      	orrs	r3, r2
 8004a92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	897b      	ldrh	r3, [r7, #10]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aa8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_I2S_Init+0x278>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2S_Init+0x24c>
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_I2S_Init+0x27c>)
 8004ab6:	e001      	b.n	8004abc <HAL_I2S_Init+0x250>
 8004ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004abc:	897a      	ldrh	r2, [r7, #10]
 8004abe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	08004be3 	.word	0x08004be3
 8004adc:	cccccccd 	.word	0xcccccccd
 8004ae0:	08004cf9 	.word	0x08004cf9
 8004ae4:	40003800 	.word	0x40003800
 8004ae8:	40003400 	.word	0x40003400

08004aec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10e      	bne.n	8004b7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffb8 	bl	8004aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	b292      	uxth	r2, r2
 8004b98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10e      	bne.n	8004bda <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff93 	bl	8004b00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d13a      	bne.n	8004c74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d109      	bne.n	8004c1c <I2S_IRQHandler+0x3a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d102      	bne.n	8004c1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffb4 	bl	8004b84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d126      	bne.n	8004c74 <I2S_IRQHandler+0x92>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d11f      	bne.n	8004c74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f043 0202 	orr.w	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff50 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d136      	bne.n	8004cee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d109      	bne.n	8004c9e <I2S_IRQHandler+0xbc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d102      	bne.n	8004c9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff45 	bl	8004b28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d122      	bne.n	8004cee <I2S_IRQHandler+0x10c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d11b      	bne.n	8004cee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff13 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a92      	ldr	r2, [pc, #584]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d12:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d14:	e001      	b.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a8b      	ldr	r2, [pc, #556]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d30:	4b8a      	ldr	r3, [pc, #552]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d32:	e001      	b.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d44:	d004      	beq.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 8099 	bne.w	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d107      	bne.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f925 	bl	8004fb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9c8 	bl	8005114 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d13a      	bne.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d035      	beq.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a6e      	ldr	r2, [pc, #440]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004da2:	4b6e      	ldr	r3, [pc, #440]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004da4:	e001      	b.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4969      	ldr	r1, [pc, #420]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004db2:	428b      	cmp	r3, r1
 8004db4:	d101      	bne.n	8004dba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004db6:	4b69      	ldr	r3, [pc, #420]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004db8:	e001      	b.n	8004dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f043 0202 	orr.w	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe88 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	f040 80c3 	bne.w	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80bd 	beq.w	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a49      	ldr	r2, [pc, #292]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e36:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e38:	e001      	b.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4944      	ldr	r1, [pc, #272]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e46:	428b      	cmp	r3, r1
 8004e48:	d101      	bne.n	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e4a:	4b44      	ldr	r3, [pc, #272]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e4c:	e001      	b.n	8004e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe4a 	bl	8004b14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e80:	e089      	b.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d107      	bne.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8be 	bl	8005018 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8fd 	bl	80050b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d12f      	bne.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02a      	beq.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ee6:	e001      	b.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4919      	ldr	r1, [pc, #100]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	d101      	bne.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004efa:	e001      	b.n	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fdfa 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d136      	bne.n	8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d031      	beq.n	8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f40:	e001      	b.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4902      	ldr	r1, [pc, #8]	; (8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d106      	bne.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004f52:	4b02      	ldr	r3, [pc, #8]	; (8004f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f54:	e006      	b.n	8004f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004f56:	bf00      	nop
 8004f58:	40003800 	.word	0x40003800
 8004f5c:	40003400 	.word	0x40003400
 8004f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0204 	orr.w	r2, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fdc0 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	e000      	b.n	8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f96:	bf00      	nop
}
 8004f98:	bf00      	nop
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c99      	adds	r1, r3, #2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ffc9 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c99      	adds	r1, r3, #2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6251      	str	r1, [r2, #36]	; 0x24
 800502a:	8819      	ldrh	r1, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <I2SEx_TxISR_I2SExt+0x22>
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 8005038:	e001      	b.n	800503e <I2SEx_TxISR_I2SExt+0x26>
 800503a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800503e:	460a      	mov	r2, r1
 8005040:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <I2SEx_TxISR_I2SExt+0x50>
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 8005066:	e001      	b.n	800506c <I2SEx_TxISR_I2SExt+0x54>
 8005068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005074:	428b      	cmp	r3, r1
 8005076:	d101      	bne.n	800507c <I2SEx_TxISR_I2SExt+0x64>
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 800507a:	e001      	b.n	8005080 <I2SEx_TxISR_I2SExt+0x68>
 800507c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005084:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff81 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40003800 	.word	0x40003800
 80050ac:	40003400 	.word	0x40003400

080050b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68d8      	ldr	r0, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	1c99      	adds	r1, r3, #2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050c8:	b282      	uxth	r2, r0
 80050ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff4a 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <I2SEx_RxISR_I2SExt+0x16>
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005128:	e001      	b.n	800512e <I2SEx_RxISR_I2SExt+0x1a>
 800512a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800512e:	68d8      	ldr	r0, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	1c99      	adds	r1, r3, #2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	62d1      	str	r1, [r2, #44]	; 0x2c
 800513a:	b282      	uxth	r2, r0
 800513c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d121      	bne.n	800519a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <I2SEx_RxISR_I2SExt+0x50>
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005162:	e001      	b.n	8005168 <I2SEx_RxISR_I2SExt+0x54>
 8005164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	490d      	ldr	r1, [pc, #52]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005170:	428b      	cmp	r3, r1
 8005172:	d101      	bne.n	8005178 <I2SEx_RxISR_I2SExt+0x64>
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005176:	e001      	b.n	800517c <I2SEx_RxISR_I2SExt+0x68>
 8005178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005180:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff03 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40003800 	.word	0x40003800
 80051a8:	40003400 	.word	0x40003400

080051ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e267      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d075      	beq.n	80052b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ca:	4b88      	ldr	r3, [pc, #544]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d00c      	beq.n	80051f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d6:	4b85      	ldr	r3, [pc, #532]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d112      	bne.n	8005208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e2:	4b82      	ldr	r3, [pc, #520]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ee:	d10b      	bne.n	8005208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	4b7e      	ldr	r3, [pc, #504]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05b      	beq.n	80052b4 <HAL_RCC_OscConfig+0x108>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d157      	bne.n	80052b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e242      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d106      	bne.n	8005220 <HAL_RCC_OscConfig+0x74>
 8005212:	4b76      	ldr	r3, [pc, #472]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a75      	ldr	r2, [pc, #468]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e01d      	b.n	800525c <HAL_RCC_OscConfig+0xb0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x98>
 800522a:	4b70      	ldr	r3, [pc, #448]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a6f      	ldr	r2, [pc, #444]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b6d      	ldr	r3, [pc, #436]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6c      	ldr	r2, [pc, #432]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0xb0>
 8005244:	4b69      	ldr	r3, [pc, #420]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a68      	ldr	r2, [pc, #416]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b66      	ldr	r3, [pc, #408]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a65      	ldr	r2, [pc, #404]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fb fdb0 	bl	8000dc8 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800526c:	f7fb fdac 	bl	8000dc8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e207      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	4b5b      	ldr	r3, [pc, #364]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0xc0>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fb fd9c 	bl	8000dc8 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005294:	f7fb fd98 	bl	8000dc8 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1f3      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a6:	4b51      	ldr	r3, [pc, #324]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0xe8>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d063      	beq.n	800538a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c2:	4b4a      	ldr	r3, [pc, #296]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d11c      	bne.n	8005314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052da:	4b44      	ldr	r3, [pc, #272]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_RCC_OscConfig+0x152>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e1c7      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fe:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4937      	ldr	r1, [pc, #220]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005312:	e03a      	b.n	800538a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <HAL_RCC_OscConfig+0x244>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fb fd51 	bl	8000dc8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532a:	f7fb fd4d 	bl	8000dc8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e1a8      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005348:	4b28      	ldr	r3, [pc, #160]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4925      	ldr	r1, [pc, #148]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005358:	4313      	orrs	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
 800535c:	e015      	b.n	800538a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCC_OscConfig+0x244>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fb fd30 	bl	8000dc8 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800536c:	f7fb fd2c 	bl	8000dc8 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e187      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d036      	beq.n	8005404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <HAL_RCC_OscConfig+0x248>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fb fd10 	bl	8000dc8 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ac:	f7fb fd0c 	bl	8000dc8 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e167      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_OscConfig+0x240>)
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x200>
 80053ca:	e01b      	b.n	8005404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCC_OscConfig+0x248>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d2:	f7fb fcf9 	bl	8000dc8 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	e00e      	b.n	80053f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053da:	f7fb fcf5 	bl	8000dc8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d907      	bls.n	80053f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e150      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
 80053ec:	40023800 	.word	0x40023800
 80053f0:	42470000 	.word	0x42470000
 80053f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f8:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ea      	bne.n	80053da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8097 	beq.w	8005540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005416:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10f      	bne.n	8005442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	4b7d      	ldr	r3, [pc, #500]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a7c      	ldr	r2, [pc, #496]	; (800561c <HAL_RCC_OscConfig+0x470>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40
 8005432:	4b7a      	ldr	r3, [pc, #488]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005442:	4b77      	ldr	r3, [pc, #476]	; (8005620 <HAL_RCC_OscConfig+0x474>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d118      	bne.n	8005480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544e:	4b74      	ldr	r3, [pc, #464]	; (8005620 <HAL_RCC_OscConfig+0x474>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a73      	ldr	r2, [pc, #460]	; (8005620 <HAL_RCC_OscConfig+0x474>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545a:	f7fb fcb5 	bl	8000dc8 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005462:	f7fb fcb1 	bl	8000dc8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e10c      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	4b6a      	ldr	r3, [pc, #424]	; (8005620 <HAL_RCC_OscConfig+0x474>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x2ea>
 8005488:	4b64      	ldr	r3, [pc, #400]	; (800561c <HAL_RCC_OscConfig+0x470>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	4a63      	ldr	r2, [pc, #396]	; (800561c <HAL_RCC_OscConfig+0x470>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6713      	str	r3, [r2, #112]	; 0x70
 8005494:	e01c      	b.n	80054d0 <HAL_RCC_OscConfig+0x324>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b05      	cmp	r3, #5
 800549c:	d10c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x30c>
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a5e      	ldr	r2, [pc, #376]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054a4:	f043 0304 	orr.w	r3, r3, #4
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70
 80054aa:	4b5c      	ldr	r3, [pc, #368]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a5b      	ldr	r2, [pc, #364]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
 80054b6:	e00b      	b.n	80054d0 <HAL_RCC_OscConfig+0x324>
 80054b8:	4b58      	ldr	r3, [pc, #352]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a57      	ldr	r2, [pc, #348]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	4b55      	ldr	r3, [pc, #340]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a54      	ldr	r2, [pc, #336]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054ca:	f023 0304 	bic.w	r3, r3, #4
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fb fc76 	bl	8000dc8 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fb fc72 	bl	8000dc8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0cb      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ee      	beq.n	80054e0 <HAL_RCC_OscConfig+0x334>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005504:	f7fb fc60 	bl	8000dc8 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fb fc5c 	bl	8000dc8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e0b5      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005522:	4b3e      	ldr	r3, [pc, #248]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ee      	bne.n	800550c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d105      	bne.n	8005540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005534:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	4a38      	ldr	r2, [pc, #224]	; (800561c <HAL_RCC_OscConfig+0x470>)
 800553a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a1 	beq.w	800568c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800554a:	4b34      	ldr	r3, [pc, #208]	; (800561c <HAL_RCC_OscConfig+0x470>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b08      	cmp	r3, #8
 8005554:	d05c      	beq.n	8005610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d141      	bne.n	80055e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <HAL_RCC_OscConfig+0x478>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fb fc30 	bl	8000dc8 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800556c:	f7fb fc2c 	bl	8000dc8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e087      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	4b27      	ldr	r3, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	3b01      	subs	r3, #1
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	491b      	ldr	r1, [pc, #108]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <HAL_RCC_OscConfig+0x478>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ba:	f7fb fc05 	bl	8000dc8 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c2:	f7fb fc01 	bl	8000dc8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e05c      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <HAL_RCC_OscConfig+0x470>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x416>
 80055e0:	e054      	b.n	800568c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e2:	4b10      	ldr	r3, [pc, #64]	; (8005624 <HAL_RCC_OscConfig+0x478>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7fb fbee 	bl	8000dc8 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fb fbea 	bl	8000dc8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e045      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_RCC_OscConfig+0x470>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x444>
 800560e:	e03d      	b.n	800568c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d107      	bne.n	8005628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e038      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
 800561c:	40023800 	.word	0x40023800
 8005620:	40007000 	.word	0x40007000
 8005624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005628:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_RCC_OscConfig+0x4ec>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d028      	beq.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d121      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d11a      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800565e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	4293      	cmp	r3, r2
 8005662:	d111      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	3b01      	subs	r3, #1
 8005672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d107      	bne.n	8005688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800

0800569c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0cc      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b0:	4b68      	ldr	r3, [pc, #416]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d90c      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b63      	ldr	r3, [pc, #396]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0b8      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f0:	4b59      	ldr	r3, [pc, #356]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4a58      	ldr	r2, [pc, #352]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005708:	4b53      	ldr	r3, [pc, #332]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a52      	ldr	r2, [pc, #328]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005714:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	494d      	ldr	r1, [pc, #308]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d044      	beq.n	80057bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573a:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d119      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e07f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d003      	beq.n	800575a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005756:	2b03      	cmp	r3, #3
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800575a:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e06f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576a:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e067      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577a:	4b37      	ldr	r3, [pc, #220]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 0203 	bic.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4934      	ldr	r1, [pc, #208]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800578c:	f7fb fb1c 	bl	8000dc8 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005792:	e00a      	b.n	80057aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005794:	f7fb fb18 	bl	8000dc8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e04f      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057aa:	4b2b      	ldr	r3, [pc, #172]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 020c 	and.w	r2, r3, #12
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d1eb      	bne.n	8005794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057bc:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d20c      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e032      	b.n	800584a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f0:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4916      	ldr	r1, [pc, #88]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	490e      	ldr	r1, [pc, #56]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005822:	f000 f821 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005826:	4602      	mov	r2, r0
 8005828:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	490a      	ldr	r1, [pc, #40]	; (800585c <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	5ccb      	ldrb	r3, [r1, r3]
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	4a09      	ldr	r2, [pc, #36]	; (8005860 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_ClockConfig+0x1c8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fb fa7c 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023c00 	.word	0x40023c00
 8005858:	40023800 	.word	0x40023800
 800585c:	08009698 	.word	0x08009698
 8005860:	20000000 	.word	0x20000000
 8005864:	20000004 	.word	0x20000004

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800586c:	b094      	sub	sp, #80	; 0x50
 800586e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
 8005874:	2300      	movs	r3, #0
 8005876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005878:	2300      	movs	r3, #0
 800587a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005880:	4b79      	ldr	r3, [pc, #484]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b08      	cmp	r3, #8
 800588a:	d00d      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x40>
 800588c:	2b08      	cmp	r3, #8
 800588e:	f200 80e1 	bhi.w	8005a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800589a:	e0db      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800589c:	4b73      	ldr	r3, [pc, #460]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058a0:	e0db      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a2:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80058a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058a6:	e0d8      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a8:	4b6f      	ldr	r3, [pc, #444]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b2:	4b6d      	ldr	r3, [pc, #436]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d063      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058be:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	2200      	movs	r2, #0
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
 80058d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058da:	4622      	mov	r2, r4
 80058dc:	462b      	mov	r3, r5
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	0159      	lsls	r1, r3, #5
 80058e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ec:	0150      	lsls	r0, r2, #5
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4621      	mov	r1, r4
 80058f4:	1a51      	subs	r1, r2, r1
 80058f6:	6139      	str	r1, [r7, #16]
 80058f8:	4629      	mov	r1, r5
 80058fa:	eb63 0301 	sbc.w	r3, r3, r1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800590c:	4659      	mov	r1, fp
 800590e:	018b      	lsls	r3, r1, #6
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005916:	4651      	mov	r1, sl
 8005918:	018a      	lsls	r2, r1, #6
 800591a:	4651      	mov	r1, sl
 800591c:	ebb2 0801 	subs.w	r8, r2, r1
 8005920:	4659      	mov	r1, fp
 8005922:	eb63 0901 	sbc.w	r9, r3, r1
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593a:	4690      	mov	r8, r2
 800593c:	4699      	mov	r9, r3
 800593e:	4623      	mov	r3, r4
 8005940:	eb18 0303 	adds.w	r3, r8, r3
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	462b      	mov	r3, r5
 8005948:	eb49 0303 	adc.w	r3, r9, r3
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800595a:	4629      	mov	r1, r5
 800595c:	024b      	lsls	r3, r1, #9
 800595e:	4621      	mov	r1, r4
 8005960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005964:	4621      	mov	r1, r4
 8005966:	024a      	lsls	r2, r1, #9
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	2200      	movs	r2, #0
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
 8005972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005978:	f7fa fc26 	bl	80001c8 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4613      	mov	r3, r2
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005984:	e058      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005986:	4b38      	ldr	r3, [pc, #224]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	099b      	lsrs	r3, r3, #6
 800598c:	2200      	movs	r2, #0
 800598e:	4618      	mov	r0, r3
 8005990:	4611      	mov	r1, r2
 8005992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	2300      	movs	r3, #0
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
 800599c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	0159      	lsls	r1, r3, #5
 80059ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b2:	0150      	lsls	r0, r2, #5
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4641      	mov	r1, r8
 80059ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80059be:	4649      	mov	r1, r9
 80059c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059d8:	ebb2 040a 	subs.w	r4, r2, sl
 80059dc:	eb63 050b 	sbc.w	r5, r3, fp
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	00eb      	lsls	r3, r5, #3
 80059ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ee:	00e2      	lsls	r2, r4, #3
 80059f0:	4614      	mov	r4, r2
 80059f2:	461d      	mov	r5, r3
 80059f4:	4643      	mov	r3, r8
 80059f6:	18e3      	adds	r3, r4, r3
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb45 0303 	adc.w	r3, r5, r3
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a0e:	4629      	mov	r1, r5
 8005a10:	028b      	lsls	r3, r1, #10
 8005a12:	4621      	mov	r1, r4
 8005a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a18:	4621      	mov	r1, r4
 8005a1a:	028a      	lsls	r2, r1, #10
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a22:	2200      	movs	r2, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	61fa      	str	r2, [r7, #28]
 8005a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2c:	f7fa fbcc 	bl	80001c8 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4613      	mov	r3, r2
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	3301      	adds	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a52:	e002      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3750      	adds	r7, #80	; 0x50
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	007a1200 	.word	0x007a1200

08005a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000000 	.word	0x20000000

08005a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a90:	f7ff fff0 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0a9b      	lsrs	r3, r3, #10
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	080096a8 	.word	0x080096a8

08005ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d035      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005adc:	4b62      	ldr	r3, [pc, #392]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fb f971 	bl	8000dc8 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aea:	f7fb f96d 	bl	8000dc8 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0b0      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005afc:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	019a      	lsls	r2, r3, #6
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	071b      	lsls	r3, r3, #28
 8005b14:	4955      	ldr	r1, [pc, #340]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b1c:	4b52      	ldr	r3, [pc, #328]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b22:	f7fb f951 	bl	8000dc8 <HAL_GetTick>
 8005b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b2a:	f7fb f94d 	bl	8000dc8 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e090      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b3c:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8083 	beq.w	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4b44      	ldr	r3, [pc, #272]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	4a43      	ldr	r2, [pc, #268]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6413      	str	r3, [r2, #64]	; 0x40
 8005b66:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b72:	4b3f      	ldr	r3, [pc, #252]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a3e      	ldr	r2, [pc, #248]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b7e:	f7fb f923 	bl	8000dc8 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b86:	f7fb f91f 	bl	8000dc8 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e062      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b98:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ba4:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02f      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d028      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bc2:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd2:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bde:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d114      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005bea:	f7fb f8ed 	bl	8000dc8 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf2:	f7fb f8e9 	bl	8000dc8 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e02a      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0ee      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c20:	d10d      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c36:	490d      	ldr	r1, [pc, #52]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	608b      	str	r3, [r1, #8]
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c48:	6093      	str	r3, [r2, #8]
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c56:	4905      	ldr	r1, [pc, #20]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	42470068 	.word	0x42470068
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	40007000 	.word	0x40007000
 8005c74:	42470e40 	.word	0x42470e40

08005c78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d13e      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d12f      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cae:	617b      	str	r3, [r7, #20]
          break;
 8005cb0:	e02f      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cb2:	4b1c      	ldr	r3, [pc, #112]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cbe:	d108      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc8:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	e007      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cda:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce8:	099b      	lsrs	r3, r3, #6
 8005cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	0f1b      	lsrs	r3, r3, #28
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
          break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
          break;
 8005d10:	bf00      	nop
        }
      }
      break;
 8005d12:	bf00      	nop
    }
  }
  return frequency;
 8005d14:	697b      	ldr	r3, [r7, #20]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00bb8000 	.word	0x00bb8000
 8005d2c:	007a1200 	.word	0x007a1200
 8005d30:	00f42400 	.word	0x00f42400

08005d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07b      	b.n	8005e3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d56:	d009      	beq.n	8005d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	61da      	str	r2, [r3, #28]
 8005d5e:	e005      	b.n	8005d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fa fe8e 	bl	8000aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	ea42 0103 	orr.w	r1, r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	f003 0104 	and.w	r1, r3, #4
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	f003 0210 	and.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e46:	b084      	sub	sp, #16
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	f107 001c 	add.w	r0, r7, #28
 8005e54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d122      	bne.n	8005ea4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d105      	bne.n	8005e98 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f9bf 	bl	800621c <USB_CoreReset>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	e01a      	b.n	8005eda <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9b3 	bl	800621c <USB_CoreReset>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
 8005ecc:	e005      	b.n	8005eda <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10b      	bne.n	8005ef8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f043 0206 	orr.w	r2, r3, #6
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f043 0220 	orr.w	r2, r3, #32
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f04:	b004      	add	sp, #16
 8005f06:	4770      	bx	lr

08005f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d115      	bne.n	8005f9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fa ff30 	bl	8000de0 <HAL_Delay>
      ms++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f939 	bl	80061fe <USB_GetMode>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d01e      	beq.n	8005fd0 <USB_SetCurrentMode+0x84>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b31      	cmp	r3, #49	; 0x31
 8005f96:	d9f0      	bls.n	8005f7a <USB_SetCurrentMode+0x2e>
 8005f98:	e01a      	b.n	8005fd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d115      	bne.n	8005fcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7fa ff17 	bl	8000de0 <HAL_Delay>
      ms++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f920 	bl	80061fe <USB_GetMode>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <USB_SetCurrentMode+0x84>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b31      	cmp	r3, #49	; 0x31
 8005fc8:	d9f0      	bls.n	8005fac <USB_SetCurrentMode+0x60>
 8005fca:	e001      	b.n	8005fd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e005      	b.n	8005fdc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b32      	cmp	r3, #50	; 0x32
 8005fd4:	d101      	bne.n	8005fda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a13      	ldr	r2, [pc, #76]	; (8006048 <USB_FlushTxFifo+0x64>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d901      	bls.n	8006004 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e01b      	b.n	800603c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	daf2      	bge.n	8005ff2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	019b      	lsls	r3, r3, #6
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a08      	ldr	r2, [pc, #32]	; (8006048 <USB_FlushTxFifo+0x64>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e006      	b.n	800603c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b20      	cmp	r3, #32
 8006038:	d0f0      	beq.n	800601c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	00030d40 	.word	0x00030d40

0800604c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a11      	ldr	r2, [pc, #68]	; (80060a8 <USB_FlushRxFifo+0x5c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e018      	b.n	800609c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	daf2      	bge.n	8006058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2210      	movs	r2, #16
 800607a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <USB_FlushRxFifo+0x5c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e006      	b.n	800609c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b10      	cmp	r3, #16
 8006098:	d0f0      	beq.n	800607c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	00030d40 	.word	0x00030d40

080060ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	460b      	mov	r3, r1
 80060bc:	71fb      	strb	r3, [r7, #7]
 80060be:	4613      	mov	r3, r2
 80060c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d123      	bne.n	800611a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060d2:	88bb      	ldrh	r3, [r7, #4]
 80060d4:	3303      	adds	r3, #3
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e018      	b.n	8006112 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	031a      	lsls	r2, r3, #12
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	461a      	mov	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3301      	adds	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3301      	adds	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3e2      	bcc.n	80060e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006128:	b480      	push	{r7}
 800612a:	b08b      	sub	sp, #44	; 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	b29b      	uxth	r3, r3
 8006144:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	e014      	b.n	800617e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	3301      	adds	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	3301      	adds	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	3301      	adds	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	3301      	adds	r3, #1
 800617c:	623b      	str	r3, [r7, #32]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3e6      	bcc.n	8006154 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006186:	8bfb      	ldrh	r3, [r7, #30]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01e      	beq.n	80061ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006196:	461a      	mov	r2, r3
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	701a      	strb	r2, [r3, #0]
      i++;
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	3301      	adds	r3, #1
 80061b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	3301      	adds	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061be:	8bfb      	ldrh	r3, [r7, #30]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061c4:	8bfb      	ldrh	r3, [r7, #30]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1ea      	bne.n	80061a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	372c      	adds	r7, #44	; 0x2c
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0301 	and.w	r3, r3, #1
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3301      	adds	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <USB_CoreReset+0x64>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e01b      	b.n	8006272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	daf2      	bge.n	8006228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f043 0201 	orr.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <USB_CoreReset+0x64>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d901      	bls.n	8006264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d0f0      	beq.n	8006252 <USB_CoreReset+0x36>

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	00030d40 	.word	0x00030d40

08006284 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006284:	b084      	sub	sp, #16
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10a      	bne.n	80062f6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ee:	f043 0304 	orr.w	r3, r3, #4
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e014      	b.n	8006320 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006304:	f023 0304 	bic.w	r3, r3, #4
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e009      	b.n	8006320 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800631a:	f023 0304 	bic.w	r3, r3, #4
 800631e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006320:	2110      	movs	r1, #16
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fe5e 	bl	8005fe4 <USB_FlushTxFifo>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fe8a 	bl	800604c <USB_FlushRxFifo>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e015      	b.n	8006374 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006354:	461a      	mov	r2, r3
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	3301      	adds	r3, #1
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	429a      	cmp	r2, r3
 800637a:	d3e5      	bcc.n	8006348 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <USB_HostInit+0x16c>)
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <USB_HostInit+0x170>)
 80063a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80063ac:	e009      	b.n	80063c2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2280      	movs	r2, #128	; 0x80
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a10      	ldr	r2, [pc, #64]	; (80063f8 <USB_HostInit+0x174>)
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a0f      	ldr	r2, [pc, #60]	; (80063fc <USB_HostInit+0x178>)
 80063be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f043 0210 	orr.w	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <USB_HostInit+0x17c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr
 80063f0:	01000200 	.word	0x01000200
 80063f4:	00e00300 	.word	0x00e00300
 80063f8:	00600080 	.word	0x00600080
 80063fc:	004000e0 	.word	0x004000e0
 8006400:	a3200008 	.word	0xa3200008

08006404 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800643c:	4313      	orrs	r3, r2
 800643e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d107      	bne.n	8006456 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644c:	461a      	mov	r2, r3
 800644e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e009      	b.n	800646a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d106      	bne.n	800646a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006462:	461a      	mov	r2, r3
 8006464:	f241 7370 	movw	r3, #6000	; 0x1770
 8006468:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006498:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80064a8:	2064      	movs	r0, #100	; 0x64
 80064aa:	f7fa fc99 	bl	8000de0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80064b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80064bc:	200a      	movs	r0, #10
 80064be:	f7fa fc8f 	bl	8000de0 <HAL_Delay>

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <USB_DriveVbus+0x44>
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d106      	bne.n	8006510 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800650a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800650e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d109      	bne.n	8006530 <USB_DriveVbus+0x64>
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800652a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800652e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	0c5b      	lsrs	r3, r3, #17
 800655c:	f003 0303 	and.w	r3, r3, #3
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	b29b      	uxth	r3, r3
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	4603      	mov	r3, r0
 80065a0:	70fb      	strb	r3, [r7, #3]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70bb      	strb	r3, [r7, #2]
 80065a6:	4613      	mov	r3, r2
 80065a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	461a      	mov	r2, r3
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295
 80065c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80065c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d87e      	bhi.n	80066cc <USB_HC_Init+0x13c>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <USB_HC_Init+0x44>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	0800668f 	.word	0x0800668f
 80065dc:	080065e5 	.word	0x080065e5
 80065e0:	08006651 	.word	0x08006651
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	461a      	mov	r2, r3
 80065f2:	f240 439d 	movw	r3, #1181	; 0x49d
 80065f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80065f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	da10      	bge.n	8006622 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	440a      	add	r2, r1
 8006616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006620:	e057      	b.n	80066d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d051      	beq.n	80066d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	440a      	add	r2, r1
 8006644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800664c:	60d3      	str	r3, [r2, #12]
      break;
 800664e:	e040      	b.n	80066d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	461a      	mov	r2, r3
 800665e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	da34      	bge.n	80066d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	440a      	add	r2, r1
 8006682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800668c:	e023      	b.n	80066d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	461a      	mov	r2, r3
 800669c:	f240 2325 	movw	r3, #549	; 0x225
 80066a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da17      	bge.n	80066da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80066c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80066ca:	e006      	b.n	80066da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
      break;
 80066d0:	e004      	b.n	80066dc <USB_HC_Init+0x14c>
      break;
 80066d2:	bf00      	nop
 80066d4:	e002      	b.n	80066dc <USB_HC_Init+0x14c>
      break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <USB_HC_Init+0x14c>
      break;
 80066da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f6:	f043 0302 	orr.w	r3, r3, #2
 80066fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	2101      	movs	r1, #1
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	6939      	ldr	r1, [r7, #16]
 8006712:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006716:	4313      	orrs	r3, r2
 8006718:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	da03      	bge.n	8006736 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e001      	b.n	800673a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff feff 	bl	800653e <USB_GetHostSpeed>
 8006740:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006746:	2b02      	cmp	r3, #2
 8006748:	d106      	bne.n	8006758 <USB_HC_Init+0x1c8>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d003      	beq.n	8006758 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e001      	b.n	800675c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800675c:	787b      	ldrb	r3, [r7, #1]
 800675e:	059b      	lsls	r3, r3, #22
 8006760:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006764:	78bb      	ldrb	r3, [r7, #2]
 8006766:	02db      	lsls	r3, r3, #11
 8006768:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800676c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800676e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006772:	049b      	lsls	r3, r3, #18
 8006774:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006778:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800677a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800677c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006780:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	0159      	lsls	r1, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	440b      	add	r3, r1
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006798:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800679a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d003      	beq.n	80067aa <USB_HC_Init+0x21a>
 80067a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10f      	bne.n	80067ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	78fa      	ldrb	r2, [r7, #3]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80067ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	; 0x30
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80067ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02d      	beq.n	800685a <USB_HC_StartXfer+0x86>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	791b      	ldrb	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d129      	bne.n	800685a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d117      	bne.n	800683c <USB_HC_StartXfer+0x68>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	79db      	ldrb	r3, [r3, #7]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <USB_HC_StartXfer+0x48>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	79db      	ldrb	r3, [r3, #7]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d10f      	bne.n	800683c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <USB_HC_StartXfer+0x86>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	795b      	ldrb	r3, [r3, #5]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d107      	bne.n	800685a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	4619      	mov	r1, r3
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fa0f 	bl	8006c74 <USB_DoPing>
      return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e0f8      	b.n	8006a4c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	8912      	ldrh	r2, [r2, #8]
 800686a:	4413      	add	r3, r2
 800686c:	3b01      	subs	r3, #1
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	8912      	ldrh	r2, [r2, #8]
 8006872:	fbb3 f3f2 	udiv	r3, r3, r2
 8006876:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006878:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800687a:	8b7b      	ldrh	r3, [r7, #26]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90b      	bls.n	8006898 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006880:	8b7b      	ldrh	r3, [r7, #26]
 8006882:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	8912      	ldrh	r2, [r2, #8]
 800688a:	fb03 f202 	mul.w	r2, r3, r2
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	e001      	b.n	8006898 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006894:	2301      	movs	r3, #1
 8006896:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	8912      	ldrh	r2, [r2, #8]
 80068a6:	fb03 f202 	mul.w	r2, r3, r2
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	611a      	str	r2, [r3, #16]
 80068ae:	e003      	b.n	80068b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068c2:	04d9      	lsls	r1, r3, #19
 80068c4:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <USB_HC_StartXfer+0x280>)
 80068c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	7a9b      	ldrb	r3, [r3, #10]
 80068ce:	075b      	lsls	r3, r3, #29
 80068d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068d4:	69f9      	ldr	r1, [r7, #28]
 80068d6:	0148      	lsls	r0, r1, #5
 80068d8:	6a39      	ldr	r1, [r7, #32]
 80068da:	4401      	add	r1, r0
 80068dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80068e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	68d9      	ldr	r1, [r3, #12]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	460a      	mov	r2, r1
 80068fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	6a3a      	ldr	r2, [r7, #32]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006930:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006934:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	7e7b      	ldrb	r3, [r7, #25]
 8006946:	075b      	lsls	r3, r3, #29
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	0148      	lsls	r0, r1, #5
 800694c:	6a39      	ldr	r1, [r7, #32]
 800694e:	4401      	add	r1, r0
 8006950:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800696e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	e003      	b.n	800698a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006988:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006990:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e04e      	b.n	8006a4c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d149      	bne.n	8006a4a <USB_HC_StartXfer+0x276>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d045      	beq.n	8006a4a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	79db      	ldrb	r3, [r3, #7]
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d830      	bhi.n	8006a28 <USB_HC_StartXfer+0x254>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <USB_HC_StartXfer+0x1f8>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	08006a01 	.word	0x08006a01
 80069d4:	080069dd 	.word	0x080069dd
 80069d8:	08006a01 	.word	0x08006a01
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	3303      	adds	r3, #3
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069e6:	8afa      	ldrh	r2, [r7, #22]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d91c      	bls.n	8006a2c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80069fe:	e015      	b.n	8006a2c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	3303      	adds	r3, #3
 8006a06:	089b      	lsrs	r3, r3, #2
 8006a08:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a0a:	8afa      	ldrh	r2, [r7, #22]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d90a      	bls.n	8006a30 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a26:	e003      	b.n	8006a30 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <USB_HC_StartXfer+0x25e>
        break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <USB_HC_StartXfer+0x25e>
        break;
 8006a30:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	68d9      	ldr	r1, [r3, #12]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	785a      	ldrb	r2, [r3, #1]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2000      	movs	r0, #0
 8006a42:	9000      	str	r0, [sp, #0]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fb31 	bl	80060ac <USB_WritePacket>
  }

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3728      	adds	r7, #40	; 0x28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	1ff80000 	.word	0x1ff80000

08006a58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	b29b      	uxth	r3, r3
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b089      	sub	sp, #36	; 0x24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	0c9b      	lsrs	r3, r3, #18
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	0fdb      	lsrs	r3, r3, #31
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d104      	bne.n	8006ad4 <USB_HC_Halt+0x5a>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e0c8      	b.n	8006c66 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USB_HC_Halt+0x66>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d163      	bne.n	8006ba8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	0151      	lsls	r1, r2, #5
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	440a      	add	r2, r1
 8006af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006afe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 80ab 	bne.w	8006c64 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d133      	bne.n	8006b82 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b66:	d81d      	bhi.n	8006ba4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7e:	d0ec      	beq.n	8006b5a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b80:	e070      	b.n	8006c64 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ba2:	e05f      	b.n	8006c64 <USB_HC_Halt+0x1ea>
            break;
 8006ba4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ba6:	e05d      	b.n	8006c64 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d133      	bne.n	8006c40 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c24:	d81d      	bhi.n	8006c62 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3c:	d0ec      	beq.n	8006c18 <USB_HC_Halt+0x19e>
 8006c3e:	e011      	b.n	8006c64 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e000      	b.n	8006c64 <USB_HC_Halt+0x1ea>
          break;
 8006c62:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	; 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	04da      	lsls	r2, r3, #19
 8006c90:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <USB_DoPing+0x74>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	1ff80000 	.word	0x1ff80000

08006cec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff f912 	bl	8005f2a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d06:	2110      	movs	r1, #16
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff f96b 	bl	8005fe4 <USB_FlushTxFifo>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f997 	bl	800604c <USB_FlushRxFifo>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e01f      	b.n	8006d6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	461a      	mov	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b0f      	cmp	r3, #15
 8006d72:	d9dc      	bls.n	8006d2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e034      	b.n	8006de4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006da0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	461a      	mov	r2, r3
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc0:	d80c      	bhi.n	8006ddc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd8:	d0ec      	beq.n	8006db4 <USB_StopHost+0xc8>
 8006dda:	e000      	b.n	8006dde <USB_StopHost+0xf2>
        break;
 8006ddc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b0f      	cmp	r3, #15
 8006de8:	d9c7      	bls.n	8006d7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df0:	461a      	mov	r2, r3
 8006df2:	f04f 33ff 	mov.w	r3, #4294967295
 8006df6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff f881 	bl	8005f08 <USB_EnableGlobalInt>

  return ret;
 8006e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b089      	sub	sp, #36	; 0x24
 8006e14:	af04      	add	r7, sp, #16
 8006e16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e18:	2301      	movs	r3, #1
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fc66 	bl	80076f0 <USBH_FindInterface>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2bff      	cmp	r3, #255	; 0xff
 8006e2c:	d002      	beq.n	8006e34 <USBH_CDC_InterfaceInit+0x24>
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d901      	bls.n	8006e38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e34:	2302      	movs	r3, #2
 8006e36:	e13d      	b.n	80070b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc3b 	bl	80076b8 <USBH_SelectInterface>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e131      	b.n	80070b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006e56:	2050      	movs	r0, #80	; 0x50
 8006e58:	f002 fafa 	bl	8009450 <malloc>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006e70:	2302      	movs	r3, #2
 8006e72:	e11f      	b.n	80070b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006e74:	2250      	movs	r2, #80	; 0x50
 8006e76:	2100      	movs	r1, #0
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f002 faf9 	bl	8009470 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	211a      	movs	r1, #26
 8006e84:	fb01 f303 	mul.w	r3, r1, r3
 8006e88:	4413      	add	r3, r2
 8006e8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da15      	bge.n	8006ec2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	211a      	movs	r1, #26
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ea6:	781a      	ldrb	r2, [r3, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	211a      	movs	r1, #26
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 ff2c 	bl	8008d26 <USBH_AllocPipe>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	7858      	ldrb	r0, [r3, #1]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	8952      	ldrh	r2, [r2, #10]
 8006eee:	9202      	str	r2, [sp, #8]
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fee4 	bl	8008cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2200      	movs	r2, #0
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f002 f9f3 	bl	80092f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2200      	movs	r2, #0
 8006f12:	210a      	movs	r1, #10
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fbeb 	bl	80076f0 <USBH_FindInterface>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2bff      	cmp	r3, #255	; 0xff
 8006f22:	d002      	beq.n	8006f2a <USBH_CDC_InterfaceInit+0x11a>
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d901      	bls.n	8006f2e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e0c2      	b.n	80070b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	211a      	movs	r1, #26
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	da16      	bge.n	8006f74 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	211a      	movs	r1, #26
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	211a      	movs	r1, #26
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	835a      	strh	r2, [r3, #26]
 8006f72:	e015      	b.n	8006fa0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	211a      	movs	r1, #26
 8006f7a:	fb01 f303 	mul.w	r3, r1, r3
 8006f7e:	4413      	add	r3, r2
 8006f80:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f84:	781a      	ldrb	r2, [r3, #0]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	211a      	movs	r1, #26
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f9a:	881a      	ldrh	r2, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	211a      	movs	r1, #26
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	4413      	add	r3, r2
 8006fac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da16      	bge.n	8006fe6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	211a      	movs	r1, #26
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	211a      	movs	r1, #26
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006fde:	881a      	ldrh	r2, [r3, #0]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	835a      	strh	r2, [r3, #26]
 8006fe4:	e015      	b.n	8007012 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	211a      	movs	r1, #26
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	211a      	movs	r1, #26
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	7b9b      	ldrb	r3, [r3, #14]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fe84 	bl	8008d26 <USBH_AllocPipe>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	7bdb      	ldrb	r3, [r3, #15]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fe7a 	bl	8008d26 <USBH_AllocPipe>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	7b59      	ldrb	r1, [r3, #13]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	7b98      	ldrb	r0, [r3, #14]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	8b12      	ldrh	r2, [r2, #24]
 8007052:	9202      	str	r2, [sp, #8]
 8007054:	2202      	movs	r2, #2
 8007056:	9201      	str	r2, [sp, #4]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4623      	mov	r3, r4
 800705c:	4602      	mov	r2, r0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fe32 	bl	8008cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	7b19      	ldrb	r1, [r3, #12]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	7bd8      	ldrb	r0, [r3, #15]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	8b52      	ldrh	r2, [r2, #26]
 800707c:	9202      	str	r2, [sp, #8]
 800707e:	2202      	movs	r2, #2
 8007080:	9201      	str	r2, [sp, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4623      	mov	r3, r4
 8007086:	4602      	mov	r2, r0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fe1d 	bl	8008cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	7b5b      	ldrb	r3, [r3, #13]
 800709a:	2200      	movs	r2, #0
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f002 f928 	bl	80092f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	7b1b      	ldrb	r3, [r3, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f002 f921 	bl	80092f4 <USBH_LL_SetToggle>

  return USBH_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd90      	pop	{r4, r7, pc}

080070bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fe12 	bl	8008d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fe3d 	bl	8008d68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	7b1b      	ldrb	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00e      	beq.n	800711a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	7b1b      	ldrb	r3, [r3, #12]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fdff 	bl	8008d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	7b1b      	ldrb	r3, [r3, #12]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fe2a 	bl	8008d68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	7b5b      	ldrb	r3, [r3, #13]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	7b5b      	ldrb	r3, [r3, #13]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fdec 	bl	8008d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	7b5b      	ldrb	r3, [r3, #13]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fe17 	bl	8008d68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	4618      	mov	r0, r3
 8007156:	f002 f983 	bl	8009460 <free>
    phost->pActiveClass->pData = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007160:	2200      	movs	r2, #0
 8007162:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3340      	adds	r3, #64	; 0x40
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8b1 	bl	80072ee <GetLineCoding>
 800718c:	4603      	mov	r3, r0
 800718e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800719c:	2102      	movs	r1, #2
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071a2:	7afb      	ldrb	r3, [r7, #11]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d877      	bhi.n	80072c0 <USBH_CDC_Process+0x114>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <USBH_CDC_Process+0x2c>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071ed 	.word	0x080071ed
 80071dc:	080071f3 	.word	0x080071f3
 80071e0:	08007223 	.word	0x08007223
 80071e4:	08007297 	.word	0x08007297
 80071e8:	080072a5 	.word	0x080072a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e06d      	b.n	80072ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f897 	bl	800732c <SetLineCoding>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007210:	e058      	b.n	80072c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d055      	beq.n	80072c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2204      	movs	r2, #4
 800721c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007220:	e050      	b.n	80072c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3340      	adds	r3, #64	; 0x40
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f860 	bl	80072ee <GetLineCoding>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d126      	bne.n	8007286 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724a:	791b      	ldrb	r3, [r3, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d13b      	bne.n	80072c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800725c:	429a      	cmp	r2, r3
 800725e:	d133      	bne.n	80072c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800726c:	429a      	cmp	r2, r3
 800726e:	d12b      	bne.n	80072c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800727a:	429a      	cmp	r2, r3
 800727c:	d124      	bne.n	80072c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f958 	bl	8007534 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007284:	e020      	b.n	80072c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d01d      	beq.n	80072c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2204      	movs	r2, #4
 8007290:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007294:	e018      	b.n	80072c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f867 	bl	800736a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8da 	bl	8007456 <CDC_ProcessReception>
      break;
 80072a2:	e014      	b.n	80072ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 ffef 	bl	800828a <USBH_ClrFeature>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80072be:	e005      	b.n	80072cc <USBH_CDC_Process+0x120>

    default:
      break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <USBH_CDC_Process+0x122>
      break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <USBH_CDC_Process+0x122>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <USBH_CDC_Process+0x122>
      break;
 80072cc:	bf00      	nop

  }

  return status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	22a1      	movs	r2, #161	; 0xa1
 80072fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2207      	movs	r2, #7
 8007314:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2207      	movs	r2, #7
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fa81 	bl	8008824 <USBH_CtlReq>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2221      	movs	r2, #33	; 0x21
 800733a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2207      	movs	r2, #7
 8007352:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2207      	movs	r2, #7
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fa62 	bl	8008824 <USBH_CtlReq>
 8007360:	4603      	mov	r3, r0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b086      	sub	sp, #24
 800736e:	af02      	add	r7, sp, #8
 8007370:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800737c:	2300      	movs	r3, #0
 800737e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007386:	2b01      	cmp	r3, #1
 8007388:	d002      	beq.n	8007390 <CDC_ProcessTransmission+0x26>
 800738a:	2b02      	cmp	r3, #2
 800738c:	d023      	beq.n	80073d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800738e:	e05e      	b.n	800744e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	8b12      	ldrh	r2, [r2, #24]
 8007398:	4293      	cmp	r3, r2
 800739a:	d90b      	bls.n	80073b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	69d9      	ldr	r1, [r3, #28]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8b1a      	ldrh	r2, [r3, #24]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	7b5b      	ldrb	r3, [r3, #13]
 80073a8:	2001      	movs	r0, #1
 80073aa:	9000      	str	r0, [sp, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fc48 	bl	8008c42 <USBH_BulkSendData>
 80073b2:	e00b      	b.n	80073cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	7b5b      	ldrb	r3, [r3, #13]
 80073c2:	2001      	movs	r0, #1
 80073c4:	9000      	str	r0, [sp, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fc3b 	bl	8008c42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073d4:	e03b      	b.n	800744e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	7b5b      	ldrb	r3, [r3, #13]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 ff5f 	bl	80092a0 <USBH_LL_GetURBState>
 80073e2:	4603      	mov	r3, r0
 80073e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d128      	bne.n	800743e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	8b12      	ldrh	r2, [r2, #24]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d90e      	bls.n	8007416 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	8b12      	ldrh	r2, [r2, #24]
 8007400:	1a9a      	subs	r2, r3, r2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	8b12      	ldrh	r2, [r2, #24]
 800740e:	441a      	add	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	61da      	str	r2, [r3, #28]
 8007414:	e002      	b.n	800741c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800742c:	e00e      	b.n	800744c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f868 	bl	800750c <USBH_CDC_TransmitCallback>
      break;
 800743c:	e006      	b.n	800744c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d103      	bne.n	800744c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800744c:	bf00      	nop
  }
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007468:	2300      	movs	r3, #0
 800746a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007472:	2b03      	cmp	r3, #3
 8007474:	d002      	beq.n	800747c <CDC_ProcessReception+0x26>
 8007476:	2b04      	cmp	r3, #4
 8007478:	d00e      	beq.n	8007498 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800747a:	e043      	b.n	8007504 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	6a19      	ldr	r1, [r3, #32]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	8b5a      	ldrh	r2, [r3, #26]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	7b1b      	ldrb	r3, [r3, #12]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fbff 	bl	8008c8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2204      	movs	r2, #4
 8007492:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007496:	e035      	b.n	8007504 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	7b1b      	ldrb	r3, [r3, #12]
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fefe 	bl	80092a0 <USBH_LL_GetURBState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d129      	bne.n	8007502 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	7b1b      	ldrb	r3, [r3, #12]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fe61 	bl	800917c <USBH_LL_GetLastXferSize>
 80074ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d016      	beq.n	80074f4 <CDC_ProcessReception+0x9e>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	8b5b      	ldrh	r3, [r3, #26]
 80074ca:	461a      	mov	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d910      	bls.n	80074f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1ad2      	subs	r2, r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	441a      	add	r2, r3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2203      	movs	r2, #3
 80074ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80074f2:	e006      	b.n	8007502 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f80f 	bl	8007520 <USBH_CDC_ReceiveCallback>
      break;
 8007502:	bf00      	nop
  }
}
 8007504:	bf00      	nop
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800755c:	2302      	movs	r3, #2
 800755e:	e029      	b.n	80075b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	79fa      	ldrb	r2, [r7, #7]
 8007564:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f81f 	bl	80075bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fd31 	bl	8009014 <USBH_LL_Init>

  return USBH_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e009      	b.n	80075e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	33e0      	adds	r3, #224	; 0xe0
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b0f      	cmp	r3, #15
 80075e6:	d9f2      	bls.n	80075ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e009      	b.n	8007602 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d3f1      	bcc.n	80075ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2240      	movs	r2, #64	; 0x40
 800762e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10e      	bne.n	80076a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	33de      	adds	r3, #222	; 0xde
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e004      	b.n	80076aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076a0:	2302      	movs	r3, #2
 80076a2:	73fb      	strb	r3, [r7, #15]
 80076a4:	e001      	b.n	80076aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80076a6:	2302      	movs	r3, #2
 80076a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d204      	bcs.n	80076de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80076dc:	e001      	b.n	80076e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80076de:	2302      	movs	r3, #2
 80076e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	70fb      	strb	r3, [r7, #3]
 8007702:	460b      	mov	r3, r1
 8007704:	70bb      	strb	r3, [r7, #2]
 8007706:	4613      	mov	r3, r2
 8007708:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007718:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800771a:	e025      	b.n	8007768 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	221a      	movs	r2, #26
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	3308      	adds	r3, #8
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	3302      	adds	r3, #2
 800772c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	795b      	ldrb	r3, [r3, #5]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	429a      	cmp	r2, r3
 8007736:	d002      	beq.n	800773e <USBH_FindInterface+0x4e>
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	2bff      	cmp	r3, #255	; 0xff
 800773c:	d111      	bne.n	8007762 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007742:	78ba      	ldrb	r2, [r7, #2]
 8007744:	429a      	cmp	r2, r3
 8007746:	d002      	beq.n	800774e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007748:	78bb      	ldrb	r3, [r7, #2]
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d109      	bne.n	8007762 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007752:	787a      	ldrb	r2, [r7, #1]
 8007754:	429a      	cmp	r2, r3
 8007756:	d002      	beq.n	800775e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007758:	787b      	ldrb	r3, [r7, #1]
 800775a:	2bff      	cmp	r3, #255	; 0xff
 800775c:	d101      	bne.n	8007762 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	e006      	b.n	8007770 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	3301      	adds	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d9d6      	bls.n	800771c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800776e:	23ff      	movs	r3, #255	; 0xff
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fc81 	bl	800908c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fd9a 	bl	80092c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af04      	add	r7, sp, #16
 80077a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80077a4:	2302      	movs	r3, #2
 80077a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d102      	bne.n	80077be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2203      	movs	r2, #3
 80077bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b0b      	cmp	r3, #11
 80077c6:	f200 81be 	bhi.w	8007b46 <USBH_Process+0x3aa>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBH_Process+0x34>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007801 	.word	0x08007801
 80077d4:	08007833 	.word	0x08007833
 80077d8:	0800789b 	.word	0x0800789b
 80077dc:	08007ae1 	.word	0x08007ae1
 80077e0:	08007b47 	.word	0x08007b47
 80077e4:	0800793f 	.word	0x0800793f
 80077e8:	08007a87 	.word	0x08007a87
 80077ec:	08007975 	.word	0x08007975
 80077f0:	08007995 	.word	0x08007995
 80077f4:	080079b5 	.word	0x080079b5
 80077f8:	080079f9 	.word	0x080079f9
 80077fc:	08007ac9 	.word	0x08007ac9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 819e 	beq.w	8007b4a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007814:	20c8      	movs	r0, #200	; 0xc8
 8007816:	f001 fd9d 	bl	8009354 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fc93 	bl	8009146 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007830:	e18b      	b.n	8007b4a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007838:	2b01      	cmp	r3, #1
 800783a:	d107      	bne.n	800784c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800784a:	e18d      	b.n	8007b68 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007856:	d914      	bls.n	8007882 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800785e:	3301      	adds	r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800786e:	2b03      	cmp	r3, #3
 8007870:	d903      	bls.n	800787a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220d      	movs	r2, #13
 8007876:	701a      	strb	r2, [r3, #0]
      break;
 8007878:	e176      	b.n	8007b68 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
      break;
 8007880:	e172      	b.n	8007b68 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007888:	f103 020a 	add.w	r2, r3, #10
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007892:	200a      	movs	r0, #10
 8007894:	f001 fd5e 	bl	8009354 <USBH_Delay>
      break;
 8007898:	e166      	b.n	8007b68 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078aa:	2104      	movs	r1, #4
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80078b0:	2064      	movs	r0, #100	; 0x64
 80078b2:	f001 fd4f 	bl	8009354 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fc1e 	bl	80090f8 <USBH_LL_GetSpeed>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2205      	movs	r2, #5
 80078ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 fa29 	bl	8008d26 <USBH_AllocPipe>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fa21 	bl	8008d26 <USBH_AllocPipe>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	7919      	ldrb	r1, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007900:	b292      	uxth	r2, r2
 8007902:	9202      	str	r2, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	9201      	str	r2, [sp, #4]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4603      	mov	r3, r0
 800790c:	2280      	movs	r2, #128	; 0x80
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 f9da 	bl	8008cc8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7959      	ldrb	r1, [r3, #5]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007928:	b292      	uxth	r2, r2
 800792a:	9202      	str	r2, [sp, #8]
 800792c:	2200      	movs	r2, #0
 800792e:	9201      	str	r2, [sp, #4]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4603      	mov	r3, r0
 8007934:	2200      	movs	r2, #0
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f9c6 	bl	8008cc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800793c:	e114      	b.n	8007b68 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f918 	bl	8007b74 <USBH_HandleEnum>
 8007944:	4603      	mov	r3, r0
 8007946:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 80fe 	bne.w	8007b4e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007960:	2b01      	cmp	r3, #1
 8007962:	d103      	bne.n	800796c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2208      	movs	r2, #8
 8007968:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800796a:	e0f0      	b.n	8007b4e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2207      	movs	r2, #7
 8007970:	701a      	strb	r2, [r3, #0]
      break;
 8007972:	e0ec      	b.n	8007b4e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80e9 	beq.w	8007b52 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007986:	2101      	movs	r1, #1
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2208      	movs	r2, #8
 8007990:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007992:	e0de      	b.n	8007b52 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fc2c 	bl	80081fc <USBH_SetCfg>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 80d5 	bne.w	8007b56 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2209      	movs	r2, #9
 80079b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079b2:	e0d0      	b.n	8007b56 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d016      	beq.n	80079f0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80079c2:	2101      	movs	r1, #1
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc3c 	bl	8008242 <USBH_SetFeature>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	220a      	movs	r2, #10
 80079da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079dc:	e0bd      	b.n	8007b5a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	f040 80b9 	bne.w	8007b5a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	220a      	movs	r2, #10
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e0b4      	b.n	8007b5a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	220a      	movs	r2, #10
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e0b0      	b.n	8007b5a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80ad 	beq.w	8007b5e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	e016      	b.n	8007a40 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a12:	7bfa      	ldrb	r2, [r7, #15]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	32de      	adds	r2, #222	; 0xde
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	791a      	ldrb	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d108      	bne.n	8007a3a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a28:	7bfa      	ldrb	r2, [r7, #15]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32de      	adds	r2, #222	; 0xde
 8007a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007a38:	e005      	b.n	8007a46 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0e5      	beq.n	8007a12 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d016      	beq.n	8007a7e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2206      	movs	r2, #6
 8007a66:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a6e:	2103      	movs	r1, #3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a74:	e073      	b.n	8007b5e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	220d      	movs	r2, #13
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e06f      	b.n	8007b5e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	220d      	movs	r2, #13
 8007a82:	701a      	strb	r2, [r3, #0]
      break;
 8007a84:	e06b      	b.n	8007b5e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d017      	beq.n	8007ac0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	220b      	movs	r2, #11
 8007aac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007aae:	e058      	b.n	8007b62 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d154      	bne.n	8007b62 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220d      	movs	r2, #13
 8007abc:	701a      	strb	r2, [r3, #0]
      break;
 8007abe:	e050      	b.n	8007b62 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	220d      	movs	r2, #13
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e04c      	b.n	8007b62 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d049      	beq.n	8007b66 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      }
      break;
 8007ade:	e042      	b.n	8007b66 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fd67 	bl	80075bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b1c:	2105      	movs	r1, #5
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d107      	bne.n	8007b3e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fe20 	bl	800777c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b3c:	e014      	b.n	8007b68 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 faa4 	bl	800908c <USBH_LL_Start>
      break;
 8007b44:	e010      	b.n	8007b68 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b46:	bf00      	nop
 8007b48:	e00e      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e00c      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e00a      	b.n	8007b68 <USBH_Process+0x3cc>
    break;
 8007b52:	bf00      	nop
 8007b54:	e008      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b56:	bf00      	nop
 8007b58:	e006      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b5a:	bf00      	nop
 8007b5c:	e004      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <USBH_Process+0x3cc>
      break;
 8007b66:	bf00      	nop
  }
  return USBH_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af04      	add	r7, sp, #16
 8007b7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b80:	2301      	movs	r3, #1
 8007b82:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b07      	cmp	r3, #7
 8007b8a:	f200 81c1 	bhi.w	8007f10 <USBH_HandleEnum+0x39c>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <USBH_HandleEnum+0x20>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bb5 	.word	0x08007bb5
 8007b98:	08007c73 	.word	0x08007c73
 8007b9c:	08007cdd 	.word	0x08007cdd
 8007ba0:	08007d6b 	.word	0x08007d6b
 8007ba4:	08007dd5 	.word	0x08007dd5
 8007ba8:	08007e45 	.word	0x08007e45
 8007bac:	08007e8b 	.word	0x08007e8b
 8007bb0:	08007ed1 	.word	0x08007ed1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007bb4:	2108      	movs	r1, #8
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa50 	bl	800805c <USBH_Get_DevDesc>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d130      	bne.n	8007c28 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7919      	ldrb	r1, [r3, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bea:	b292      	uxth	r2, r2
 8007bec:	9202      	str	r2, [sp, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	9201      	str	r2, [sp, #4]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f865 	bl	8008cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7959      	ldrb	r1, [r3, #5]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c12:	b292      	uxth	r2, r2
 8007c14:	9202      	str	r2, [sp, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2200      	movs	r2, #0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f851 	bl	8008cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c26:	e175      	b.n	8007f14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	f040 8172 	bne.w	8007f14 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c36:	3301      	adds	r3, #1
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d903      	bls.n	8007c52 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	220d      	movs	r2, #13
 8007c4e:	701a      	strb	r2, [r3, #0]
      break;
 8007c50:	e160      	b.n	8007f14 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	795b      	ldrb	r3, [r3, #5]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 f885 	bl	8008d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 f87f 	bl	8008d68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
      break;
 8007c70:	e150      	b.n	8007f14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c72:	2112      	movs	r1, #18
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9f1 	bl	800805c <USBH_Get_DevDesc>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c8a:	e145      	b.n	8007f18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	f040 8142 	bne.w	8007f18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d903      	bls.n	8007cb6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220d      	movs	r2, #13
 8007cb2:	701a      	strb	r2, [r3, #0]
      break;
 8007cb4:	e130      	b.n	8007f18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f853 	bl	8008d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	791b      	ldrb	r3, [r3, #4]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f84d 	bl	8008d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
      break;
 8007cda:	e11d      	b.n	8007f18 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa68 	bl	80081b4 <USBH_SetAddress>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d132      	bne.n	8007d54 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f001 fb30 	bl	8009354 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2203      	movs	r2, #3
 8007d00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7919      	ldrb	r1, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d16:	b292      	uxth	r2, r2
 8007d18:	9202      	str	r2, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	9201      	str	r2, [sp, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	2280      	movs	r2, #128	; 0x80
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 ffcf 	bl	8008cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7959      	ldrb	r1, [r3, #5]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d3e:	b292      	uxth	r2, r2
 8007d40:	9202      	str	r2, [sp, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	9201      	str	r2, [sp, #4]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ffbb 	bl	8008cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d52:	e0e3      	b.n	8007f1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	f040 80e0 	bne.w	8007f1c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220d      	movs	r2, #13
 8007d60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	705a      	strb	r2, [r3, #1]
      break;
 8007d68:	e0d8      	b.n	8007f1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d6a:	2109      	movs	r1, #9
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f99d 	bl	80080ac <USBH_Get_CfgDesc>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d82:	e0cd      	b.n	8007f20 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	f040 80ca 	bne.w	8007f20 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d92:	3301      	adds	r3, #1
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d903      	bls.n	8007dae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	220d      	movs	r2, #13
 8007daa:	701a      	strb	r2, [r3, #0]
      break;
 8007dac:	e0b8      	b.n	8007f20 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 ffd7 	bl	8008d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 ffd1 	bl	8008d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
      break;
 8007dd2:	e0a5      	b.n	8007f20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f965 	bl	80080ac <USBH_Get_CfgDesc>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2205      	movs	r2, #5
 8007df0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007df2:	e097      	b.n	8007f24 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	f040 8094 	bne.w	8007f24 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e02:	3301      	adds	r3, #1
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d903      	bls.n	8007e1e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	220d      	movs	r2, #13
 8007e1a:	701a      	strb	r2, [r3, #0]
      break;
 8007e1c:	e082      	b.n	8007f24 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	795b      	ldrb	r3, [r3, #5]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 ff9f 	bl	8008d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	791b      	ldrb	r3, [r3, #4]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 ff99 	bl	8008d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
      break;
 8007e42:	e06f      	b.n	8007f24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d019      	beq.n	8007e82 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e5a:	23ff      	movs	r3, #255	; 0xff
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f949 	bl	80080f4 <USBH_Get_StringDesc>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2206      	movs	r2, #6
 8007e70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e72:	e059      	b.n	8007f28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d156      	bne.n	8007f28 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2206      	movs	r2, #6
 8007e7e:	705a      	strb	r2, [r3, #1]
      break;
 8007e80:	e052      	b.n	8007f28 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2206      	movs	r2, #6
 8007e86:	705a      	strb	r2, [r3, #1]
      break;
 8007e88:	e04e      	b.n	8007f28 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d019      	beq.n	8007ec8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ea0:	23ff      	movs	r3, #255	; 0xff
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f926 	bl	80080f4 <USBH_Get_StringDesc>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2207      	movs	r2, #7
 8007eb6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007eb8:	e038      	b.n	8007f2c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d135      	bne.n	8007f2c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2207      	movs	r2, #7
 8007ec4:	705a      	strb	r2, [r3, #1]
      break;
 8007ec6:	e031      	b.n	8007f2c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2207      	movs	r2, #7
 8007ecc:	705a      	strb	r2, [r3, #1]
      break;
 8007ece:	e02d      	b.n	8007f2c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d017      	beq.n	8007f0a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ee6:	23ff      	movs	r3, #255	; 0xff
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f903 	bl	80080f4 <USBH_Get_StringDesc>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007efc:	e018      	b.n	8007f30 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d115      	bne.n	8007f30 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
      break;
 8007f08:	e012      	b.n	8007f30 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0e:	e00f      	b.n	8007f30 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007f10:	bf00      	nop
 8007f12:	e00e      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f14:	bf00      	nop
 8007f16:	e00c      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f18:	bf00      	nop
 8007f1a:	e00a      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e008      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f20:	bf00      	nop
 8007f22:	e006      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f24:	bf00      	nop
 8007f26:	e004      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <USBH_HandleEnum+0x3be>
      break;
 8007f30:	bf00      	nop
  }
  return Status;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f804 	bl	8007f7e <USBH_HandleSof>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b0b      	cmp	r3, #11
 8007f8e:	d10a      	bne.n	8007fa6 <USBH_HandleSof+0x28>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007fbe:	bf00      	nop
}
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007fda:	bf00      	nop
}
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f844 	bl	80090c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	791b      	ldrb	r3, [r3, #4]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fe91 	bl	8008d68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	795b      	ldrb	r3, [r3, #5]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fe8b 	bl	8008d68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	b29b      	uxth	r3, r3
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800807a:	2100      	movs	r1, #0
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f864 	bl	800814a <USBH_GetDescriptor>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	b292      	uxth	r2, r2
 800809c:	4619      	mov	r1, r3
 800809e:	f000 f918 	bl	80082d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	331c      	adds	r3, #28
 80080bc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80080be:	887b      	ldrh	r3, [r7, #2]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f83d 	bl	800814a <USBH_GetDescriptor>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d107      	bne.n	80080ea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80080da:	887b      	ldrh	r3, [r7, #2]
 80080dc:	461a      	mov	r2, r3
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f987 	bl	80083f4 <USBH_ParseCfgDesc>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	461a      	mov	r2, r3
 8008100:	460b      	mov	r3, r1
 8008102:	72fb      	strb	r3, [r7, #11]
 8008104:	4613      	mov	r3, r2
 8008106:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008110:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008118:	893b      	ldrh	r3, [r7, #8]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	460b      	mov	r3, r1
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f812 	bl	800814a <USBH_GetDescriptor>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008136:	893a      	ldrh	r2, [r7, #8]
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fb24 	bl	8008788 <USBH_ParseStringDesc>
  }

  return status;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	72fb      	strb	r3, [r7, #11]
 8008158:	4613      	mov	r3, r2
 800815a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	789b      	ldrb	r3, [r3, #2]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d11c      	bne.n	800819e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800816a:	b2da      	uxtb	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2206      	movs	r2, #6
 8008174:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	893a      	ldrh	r2, [r7, #8]
 800817a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800817c:	893b      	ldrh	r3, [r7, #8]
 800817e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008186:	d104      	bne.n	8008192 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f240 4209 	movw	r2, #1033	; 0x409
 800818e:	829a      	strh	r2, [r3, #20]
 8008190:	e002      	b.n	8008198 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8b3a      	ldrh	r2, [r7, #24]
 800819c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800819e:	8b3b      	ldrh	r3, [r7, #24]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fb3d 	bl	8008824 <USBH_CtlReq>
 80081aa:	4603      	mov	r3, r0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10f      	bne.n	80081e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2205      	movs	r2, #5
 80081d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb19 	bl	8008824 <USBH_CtlReq>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10e      	bne.n	800822e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2209      	movs	r2, #9
 800821a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	887a      	ldrh	r2, [r7, #2]
 8008220:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 faf6 	bl	8008824 <USBH_CtlReq>
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	789b      	ldrb	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10f      	bne.n	8008276 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2203      	movs	r2, #3
 8008260:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fad2 	bl	8008824 <USBH_CtlReq>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	789b      	ldrb	r3, [r3, #2]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10f      	bne.n	80082be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80082be:	2200      	movs	r2, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 faae 	bl	8008824 <USBH_CtlReq>
 80082c8:	4603      	mov	r3, r0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	785a      	ldrb	r2, [r3, #1]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	3302      	adds	r3, #2
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	3303      	adds	r3, #3
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	b29b      	uxth	r3, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	791a      	ldrb	r2, [r3, #4]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	795a      	ldrb	r2, [r3, #5]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	799a      	ldrb	r2, [r3, #6]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	79da      	ldrb	r2, [r3, #7]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	79db      	ldrb	r3, [r3, #7]
 8008330:	2b20      	cmp	r3, #32
 8008332:	dc11      	bgt.n	8008358 <USBH_ParseDevDesc+0x86>
 8008334:	2b08      	cmp	r3, #8
 8008336:	db16      	blt.n	8008366 <USBH_ParseDevDesc+0x94>
 8008338:	3b08      	subs	r3, #8
 800833a:	2201      	movs	r2, #1
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <USBH_ParseDevDesc+0x8a>
 8008356:	e006      	b.n	8008366 <USBH_ParseDevDesc+0x94>
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d104      	bne.n	8008366 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	79da      	ldrb	r2, [r3, #7]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	71da      	strb	r2, [r3, #7]
      break;
 8008364:	e003      	b.n	800836e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	71da      	strb	r2, [r3, #7]
      break;
 800836c:	bf00      	nop
  }

  if (length > 8U)
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d939      	bls.n	80083e8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3308      	adds	r3, #8
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3309      	adds	r3, #9
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	330a      	adds	r3, #10
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b29a      	uxth	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	330b      	adds	r3, #11
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	330c      	adds	r3, #12
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	330d      	adds	r3, #13
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	7b9a      	ldrb	r2, [r3, #14]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	7bda      	ldrb	r2, [r3, #15]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	7c1a      	ldrb	r2, [r3, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	7c5a      	ldrb	r2, [r3, #17]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	745a      	strb	r2, [r3, #17]
  }
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008408:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	781a      	ldrb	r2, [r3, #0]
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	785a      	ldrb	r2, [r3, #1]
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3302      	adds	r3, #2
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b29a      	uxth	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3303      	adds	r3, #3
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	b29b      	uxth	r3, r3
 8008448:	4313      	orrs	r3, r2
 800844a:	b29b      	uxth	r3, r3
 800844c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008450:	bf28      	it	cs
 8008452:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008456:	b29a      	uxth	r2, r3
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	791a      	ldrb	r2, [r3, #4]
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	795a      	ldrb	r2, [r3, #5]
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	799a      	ldrb	r2, [r3, #6]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	79da      	ldrb	r2, [r3, #7]
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	7a1a      	ldrb	r2, [r3, #8]
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b09      	cmp	r3, #9
 800848a:	d002      	beq.n	8008492 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	2209      	movs	r2, #9
 8008490:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	2b09      	cmp	r3, #9
 8008496:	f240 809d 	bls.w	80085d4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800849a:	2309      	movs	r3, #9
 800849c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084a2:	e081      	b.n	80085a8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084a4:	f107 0316 	add.w	r3, r7, #22
 80084a8:	4619      	mov	r1, r3
 80084aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ac:	f000 f99f 	bl	80087ee <USBH_GetNextDesc>
 80084b0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d176      	bne.n	80085a8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d002      	beq.n	80084c8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	2209      	movs	r2, #9
 80084c6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084cc:	221a      	movs	r2, #26
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	3308      	adds	r3, #8
 80084d4:	6a3a      	ldr	r2, [r7, #32]
 80084d6:	4413      	add	r3, r2
 80084d8:	3302      	adds	r3, #2
 80084da:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	f000 f87e 	bl	80085e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084ee:	e043      	b.n	8008578 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084f0:	f107 0316 	add.w	r3, r7, #22
 80084f4:	4619      	mov	r1, r3
 80084f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f8:	f000 f979 	bl	80087ee <USBH_GetNextDesc>
 80084fc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b05      	cmp	r3, #5
 8008504:	d138      	bne.n	8008578 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	795b      	ldrb	r3, [r3, #5]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10f      	bne.n	800852e <USBH_ParseCfgDesc+0x13a>
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	799b      	ldrb	r3, [r3, #6]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d10b      	bne.n	800852e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	79db      	ldrb	r3, [r3, #7]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10f      	bne.n	800853e <USBH_ParseCfgDesc+0x14a>
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b09      	cmp	r3, #9
 8008524:	d00b      	beq.n	800853e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	2209      	movs	r2, #9
 800852a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800852c:	e007      	b.n	800853e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b07      	cmp	r3, #7
 8008534:	d004      	beq.n	8008540 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	2207      	movs	r2, #7
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e000      	b.n	8008540 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800853e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008544:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008548:	3201      	adds	r2, #1
 800854a:	00d2      	lsls	r2, r2, #3
 800854c:	211a      	movs	r1, #26
 800854e:	fb01 f303 	mul.w	r3, r1, r3
 8008552:	4413      	add	r3, r2
 8008554:	3308      	adds	r3, #8
 8008556:	6a3a      	ldr	r2, [r7, #32]
 8008558:	4413      	add	r3, r2
 800855a:	3304      	adds	r3, #4
 800855c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800855e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008560:	69b9      	ldr	r1, [r7, #24]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f86b 	bl	800863e <USBH_ParseEPDesc>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800856e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008572:	3301      	adds	r3, #1
 8008574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	791b      	ldrb	r3, [r3, #4]
 800857c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008580:	429a      	cmp	r2, r3
 8008582:	d204      	bcs.n	800858e <USBH_ParseCfgDesc+0x19a>
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	885a      	ldrh	r2, [r3, #2]
 8008588:	8afb      	ldrh	r3, [r7, #22]
 800858a:	429a      	cmp	r2, r3
 800858c:	d8b0      	bhi.n	80084f0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008596:	429a      	cmp	r2, r3
 8008598:	d201      	bcs.n	800859e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800859a:	2303      	movs	r3, #3
 800859c:	e01c      	b.n	80085d8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800859e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a2:	3301      	adds	r3, #1
 80085a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d805      	bhi.n	80085bc <USBH_ParseCfgDesc+0x1c8>
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	885a      	ldrh	r2, [r3, #2]
 80085b4:	8afb      	ldrh	r3, [r7, #22]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	f63f af74 	bhi.w	80084a4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	bf28      	it	cs
 80085c4:	2302      	movcs	r3, #2
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d201      	bcs.n	80085d4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e001      	b.n	80085d8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80085d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3730      	adds	r7, #48	; 0x30
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	785a      	ldrb	r2, [r3, #1]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	789a      	ldrb	r2, [r3, #2]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	78da      	ldrb	r2, [r3, #3]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	791a      	ldrb	r2, [r3, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	795a      	ldrb	r2, [r3, #5]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	799a      	ldrb	r2, [r3, #6]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	79da      	ldrb	r2, [r3, #7]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	7a1a      	ldrb	r2, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	721a      	strb	r2, [r3, #8]
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800863e:	b480      	push	{r7}
 8008640:	b087      	sub	sp, #28
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	785a      	ldrb	r2, [r3, #1]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	789a      	ldrb	r2, [r3, #2]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	78da      	ldrb	r2, [r3, #3]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	b29a      	uxth	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3305      	adds	r3, #5
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	b29b      	uxth	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	799a      	ldrb	r2, [r3, #6]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	889b      	ldrh	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800869a:	2303      	movs	r3, #3
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e033      	b.n	8008708 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	889b      	ldrh	r3, [r3, #4]
 80086a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086a8:	f023 0307 	bic.w	r3, r3, #7
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	889b      	ldrh	r3, [r3, #4]
 80086b6:	b21a      	sxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	b299      	uxth	r1, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3305      	adds	r3, #5
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	430b      	orrs	r3, r1
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d110      	bne.n	80086fa <USBH_ParseEPDesc+0xbc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b299      	uxth	r1, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3305      	adds	r3, #5
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	430b      	orrs	r3, r1
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	b21b      	sxth	r3, r3
 80086f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	e001      	b.n	80086fe <USBH_ParseEPDesc+0xc0>
 80086fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fe:	4313      	orrs	r3, r2
 8008700:	b21b      	sxth	r3, r3
 8008702:	b29a      	uxth	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800870e:	2b00      	cmp	r3, #0
 8008710:	d116      	bne.n	8008740 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d005      	beq.n	800872a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	78db      	ldrb	r3, [r3, #3]
 8008722:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008726:	2b03      	cmp	r3, #3
 8008728:	d127      	bne.n	800877a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	799b      	ldrb	r3, [r3, #6]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <USBH_ParseEPDesc+0xfc>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	799b      	ldrb	r3, [r3, #6]
 8008736:	2b10      	cmp	r3, #16
 8008738:	d91f      	bls.n	800877a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800873a:	2303      	movs	r3, #3
 800873c:	75fb      	strb	r3, [r7, #23]
 800873e:	e01c      	b.n	800877a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	78db      	ldrb	r3, [r3, #3]
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10a      	bne.n	8008762 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	799b      	ldrb	r3, [r3, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <USBH_ParseEPDesc+0x11e>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	799b      	ldrb	r3, [r3, #6]
 8008758:	2b10      	cmp	r3, #16
 800875a:	d90e      	bls.n	800877a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
 8008760:	e00b      	b.n	800877a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	78db      	ldrb	r3, [r3, #3]
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	2b03      	cmp	r3, #3
 800876c:	d105      	bne.n	800877a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	799b      	ldrb	r3, [r3, #6]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008776:	2303      	movs	r3, #3
 8008778:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
}
 800877c:	4618      	mov	r0, r3
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b03      	cmp	r3, #3
 800879e:	d120      	bne.n	80087e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	1e9a      	subs	r2, r3, #2
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bf28      	it	cs
 80087ac:	4613      	movcs	r3, r2
 80087ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3302      	adds	r3, #2
 80087b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087b6:	2300      	movs	r3, #0
 80087b8:	82fb      	strh	r3, [r7, #22]
 80087ba:	e00b      	b.n	80087d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087bc:	8afb      	ldrh	r3, [r7, #22]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087ce:	8afb      	ldrh	r3, [r7, #22]
 80087d0:	3302      	adds	r3, #2
 80087d2:	82fb      	strh	r3, [r7, #22]
 80087d4:	8afa      	ldrh	r2, [r7, #22]
 80087d6:	8abb      	ldrh	r3, [r7, #20]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d3ef      	bcc.n	80087bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
  }
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	4613      	mov	r3, r2
 8008830:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008832:	2301      	movs	r3, #1
 8008834:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	789b      	ldrb	r3, [r3, #2]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d002      	beq.n	8008844 <USBH_CtlReq+0x20>
 800883e:	2b02      	cmp	r3, #2
 8008840:	d00f      	beq.n	8008862 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008842:	e027      	b.n	8008894 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	88fa      	ldrh	r2, [r7, #6]
 800884e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2202      	movs	r2, #2
 800885a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
      break;
 8008860:	e018      	b.n	8008894 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f81c 	bl	80088a0 <USBH_HandleControl>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <USBH_CtlReq+0x54>
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d106      	bne.n	8008886 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	761a      	strb	r2, [r3, #24]
      break;
 8008884:	e005      	b.n	8008892 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d102      	bne.n	8008892 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	709a      	strb	r2, [r3, #2]
      break;
 8008892:	bf00      	nop
  }
  return status;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7e1b      	ldrb	r3, [r3, #24]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	2b0a      	cmp	r3, #10
 80088b8:	f200 8156 	bhi.w	8008b68 <USBH_HandleControl+0x2c8>
 80088bc:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <USBH_HandleControl+0x24>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	0800890b 	.word	0x0800890b
 80088cc:	08008975 	.word	0x08008975
 80088d0:	0800899b 	.word	0x0800899b
 80088d4:	080089d3 	.word	0x080089d3
 80088d8:	080089fd 	.word	0x080089fd
 80088dc:	08008a4f 	.word	0x08008a4f
 80088e0:	08008a71 	.word	0x08008a71
 80088e4:	08008aad 	.word	0x08008aad
 80088e8:	08008ad3 	.word	0x08008ad3
 80088ec:	08008b11 	.word	0x08008b11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f103 0110 	add.w	r1, r3, #16
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	795b      	ldrb	r3, [r3, #5]
 80088fa:	461a      	mov	r2, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f943 	bl	8008b88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2202      	movs	r2, #2
 8008906:	761a      	strb	r2, [r3, #24]
      break;
 8008908:	e139      	b.n	8008b7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	795b      	ldrb	r3, [r3, #5]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fcc5 	bl	80092a0 <USBH_LL_GetURBState>
 8008916:	4603      	mov	r3, r0
 8008918:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d11e      	bne.n	800895e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7c1b      	ldrb	r3, [r3, #16]
 8008924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008928:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	8adb      	ldrh	r3, [r3, #22]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008932:	7b7b      	ldrb	r3, [r7, #13]
 8008934:	2b80      	cmp	r3, #128	; 0x80
 8008936:	d103      	bne.n	8008940 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2203      	movs	r2, #3
 800893c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800893e:	e115      	b.n	8008b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2205      	movs	r2, #5
 8008944:	761a      	strb	r2, [r3, #24]
      break;
 8008946:	e111      	b.n	8008b6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008948:	7b7b      	ldrb	r3, [r7, #13]
 800894a:	2b80      	cmp	r3, #128	; 0x80
 800894c:	d103      	bne.n	8008956 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2209      	movs	r2, #9
 8008952:	761a      	strb	r2, [r3, #24]
      break;
 8008954:	e10a      	b.n	8008b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2207      	movs	r2, #7
 800895a:	761a      	strb	r2, [r3, #24]
      break;
 800895c:	e106      	b.n	8008b6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d003      	beq.n	800896c <USBH_HandleControl+0xcc>
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	2b02      	cmp	r3, #2
 8008968:	f040 8100 	bne.w	8008b6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	220b      	movs	r2, #11
 8008970:	761a      	strb	r2, [r3, #24]
      break;
 8008972:	e0fb      	b.n	8008b6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6899      	ldr	r1, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	899a      	ldrh	r2, [r3, #12]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	791b      	ldrb	r3, [r3, #4]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f93a 	bl	8008c06 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2204      	movs	r2, #4
 8008996:	761a      	strb	r2, [r3, #24]
      break;
 8008998:	e0f1      	b.n	8008b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	791b      	ldrb	r3, [r3, #4]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc7d 	bl	80092a0 <USBH_LL_GetURBState>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d102      	bne.n	80089b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2209      	movs	r2, #9
 80089b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d102      	bne.n	80089c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089bc:	2303      	movs	r3, #3
 80089be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089c0:	e0d6      	b.n	8008b70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	f040 80d3 	bne.w	8008b70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220b      	movs	r2, #11
 80089ce:	761a      	strb	r2, [r3, #24]
      break;
 80089d0:	e0ce      	b.n	8008b70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	899a      	ldrh	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	795b      	ldrb	r3, [r3, #5]
 80089de:	2001      	movs	r0, #1
 80089e0:	9000      	str	r0, [sp, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f8ea 	bl	8008bbc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2206      	movs	r2, #6
 80089f8:	761a      	strb	r2, [r3, #24]
      break;
 80089fa:	e0c0      	b.n	8008b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	795b      	ldrb	r3, [r3, #5]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fc4c 	bl	80092a0 <USBH_LL_GetURBState>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d103      	bne.n	8008a1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2207      	movs	r2, #7
 8008a16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a18:	e0ac      	b.n	8008b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b05      	cmp	r3, #5
 8008a1e:	d105      	bne.n	8008a2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	220c      	movs	r2, #12
 8008a24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a26:	2303      	movs	r3, #3
 8008a28:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2a:	e0a3      	b.n	8008b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d103      	bne.n	8008a3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2205      	movs	r2, #5
 8008a36:	761a      	strb	r2, [r3, #24]
      break;
 8008a38:	e09c      	b.n	8008b74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	f040 8099 	bne.w	8008b74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220b      	movs	r2, #11
 8008a46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4c:	e092      	b.n	8008b74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	791b      	ldrb	r3, [r3, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8d5 	bl	8008c06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	761a      	strb	r2, [r3, #24]

      break;
 8008a6e:	e086      	b.n	8008b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fc12 	bl	80092a0 <USBH_LL_GetURBState>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d105      	bne.n	8008a92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	220d      	movs	r2, #13
 8008a8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a90:	e072      	b.n	8008b78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d103      	bne.n	8008aa0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	220b      	movs	r2, #11
 8008a9c:	761a      	strb	r2, [r3, #24]
      break;
 8008a9e:	e06b      	b.n	8008b78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d168      	bne.n	8008b78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aaa:	e065      	b.n	8008b78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	795b      	ldrb	r3, [r3, #5]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	9200      	str	r2, [sp, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f87f 	bl	8008bbc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	220a      	movs	r2, #10
 8008ace:	761a      	strb	r2, [r3, #24]
      break;
 8008ad0:	e055      	b.n	8008b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	795b      	ldrb	r3, [r3, #5]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fbe1 	bl	80092a0 <USBH_LL_GetURBState>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d105      	bne.n	8008af4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	220d      	movs	r2, #13
 8008af0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008af2:	e043      	b.n	8008b7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d103      	bne.n	8008b02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2209      	movs	r2, #9
 8008afe:	761a      	strb	r2, [r3, #24]
      break;
 8008b00:	e03c      	b.n	8008b7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d139      	bne.n	8008b7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	220b      	movs	r2, #11
 8008b0c:	761a      	strb	r2, [r3, #24]
      break;
 8008b0e:	e035      	b.n	8008b7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	7e5b      	ldrb	r3, [r3, #25]
 8008b14:	3301      	adds	r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	765a      	strb	r2, [r3, #25]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7e5b      	ldrb	r3, [r3, #25]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d806      	bhi.n	8008b32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b30:	e025      	b.n	8008b7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b38:	2106      	movs	r1, #6
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	795b      	ldrb	r3, [r3, #5]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f90c 	bl	8008d68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f906 	bl	8008d68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]
      break;
 8008b66:	e00a      	b.n	8008b7e <USBH_HandleControl+0x2de>

    default:
      break;
 8008b68:	bf00      	nop
 8008b6a:	e008      	b.n	8008b7e <USBH_HandleControl+0x2de>
      break;
 8008b6c:	bf00      	nop
 8008b6e:	e006      	b.n	8008b7e <USBH_HandleControl+0x2de>
      break;
 8008b70:	bf00      	nop
 8008b72:	e004      	b.n	8008b7e <USBH_HandleControl+0x2de>
      break;
 8008b74:	bf00      	nop
 8008b76:	e002      	b.n	8008b7e <USBH_HandleControl+0x2de>
      break;
 8008b78:	bf00      	nop
 8008b7a:	e000      	b.n	8008b7e <USBH_HandleControl+0x2de>
      break;
 8008b7c:	bf00      	nop
  }

  return status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af04      	add	r7, sp, #16
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b96:	79f9      	ldrb	r1, [r7, #7]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2200      	movs	r2, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 fb46 	bl	800923e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af04      	add	r7, sp, #16
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	460b      	mov	r3, r1
 8008bcc:	80fb      	strh	r3, [r7, #6]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008be0:	7979      	ldrb	r1, [r7, #5]
 8008be2:	7e3b      	ldrb	r3, [r7, #24]
 8008be4:	9303      	str	r3, [sp, #12]
 8008be6:	88fb      	ldrh	r3, [r7, #6]
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fb21 	bl	800923e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b088      	sub	sp, #32
 8008c0a:	af04      	add	r7, sp, #16
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	4611      	mov	r1, r2
 8008c12:	461a      	mov	r2, r3
 8008c14:	460b      	mov	r3, r1
 8008c16:	80fb      	strh	r3, [r7, #6]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c1c:	7979      	ldrb	r1, [r7, #5]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2201      	movs	r2, #1
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fb03 	bl	800923e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c38:	2300      	movs	r3, #0

}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af04      	add	r7, sp, #16
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	461a      	mov	r2, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	80fb      	strh	r3, [r7, #6]
 8008c54:	4613      	mov	r3, r2
 8008c56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c66:	7979      	ldrb	r1, [r7, #5]
 8008c68:	7e3b      	ldrb	r3, [r7, #24]
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	9302      	str	r3, [sp, #8]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	2301      	movs	r3, #1
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	2302      	movs	r3, #2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fade 	bl	800923e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af04      	add	r7, sp, #16
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	80fb      	strh	r3, [r7, #6]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ca2:	7979      	ldrb	r1, [r7, #5]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9303      	str	r3, [sp, #12]
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	9302      	str	r3, [sp, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fac0 	bl	800923e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af04      	add	r7, sp, #16
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	70fb      	strb	r3, [r7, #3]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70bb      	strb	r3, [r7, #2]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ce2:	7878      	ldrb	r0, [r7, #1]
 8008ce4:	78ba      	ldrb	r2, [r7, #2]
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	8b3b      	ldrh	r3, [r7, #24]
 8008cea:	9302      	str	r3, [sp, #8]
 8008cec:	7d3b      	ldrb	r3, [r7, #20]
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	7c3b      	ldrb	r3, [r7, #16]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa53 	bl	80091a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa72 	bl	8009200 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f836 	bl	8008da4 <USBH_GetFreePipe>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00a      	beq.n	8008d5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	33e0      	adds	r3, #224	; 0xe0
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d5c:	89fb      	ldrh	r3, [r7, #14]
 8008d5e:	b2db      	uxtb	r3, r3
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d80d      	bhi.n	8008d96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	33e0      	adds	r3, #224	; 0xe0
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	33e0      	adds	r3, #224	; 0xe0
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	e00f      	b.n	8008dd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	33e0      	adds	r3, #224	; 0xe0
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	e007      	b.n	8008de0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	2b0f      	cmp	r3, #15
 8008dda:	d9ec      	bls.n	8008db6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008df0:	2201      	movs	r2, #1
 8008df2:	490e      	ldr	r1, [pc, #56]	; (8008e2c <MX_USB_HOST_Init+0x40>)
 8008df4:	480e      	ldr	r0, [pc, #56]	; (8008e30 <MX_USB_HOST_Init+0x44>)
 8008df6:	f7fe fba7 	bl	8007548 <USBH_Init>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e00:	f7f7 fe16 	bl	8000a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e04:	490b      	ldr	r1, [pc, #44]	; (8008e34 <MX_USB_HOST_Init+0x48>)
 8008e06:	480a      	ldr	r0, [pc, #40]	; (8008e30 <MX_USB_HOST_Init+0x44>)
 8008e08:	f7fe fc2c 	bl	8007664 <USBH_RegisterClass>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e12:	f7f7 fe0d 	bl	8000a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e16:	4806      	ldr	r0, [pc, #24]	; (8008e30 <MX_USB_HOST_Init+0x44>)
 8008e18:	f7fe fcb0 	bl	800777c <USBH_Start>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e22:	f7f7 fe05 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e26:	bf00      	nop
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08008e4d 	.word	0x08008e4d
 8008e30:	200001a8 	.word	0x200001a8
 8008e34:	2000000c 	.word	0x2000000c

08008e38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e3c:	4802      	ldr	r0, [pc, #8]	; (8008e48 <MX_USB_HOST_Process+0x10>)
 8008e3e:	f7fe fcad 	bl	800779c <USBH_Process>
}
 8008e42:	bf00      	nop
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200001a8 	.word	0x200001a8

08008e4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d819      	bhi.n	8008e94 <USBH_UserProcess+0x48>
 8008e60:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <USBH_UserProcess+0x1c>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008e95 	.word	0x08008e95
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008e95 	.word	0x08008e95
 8008e74:	08008e8d 	.word	0x08008e8d
 8008e78:	08008e7d 	.word	0x08008e7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <USBH_UserProcess+0x58>)
 8008e7e:	2203      	movs	r2, #3
 8008e80:	701a      	strb	r2, [r3, #0]
  break;
 8008e82:	e008      	b.n	8008e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <USBH_UserProcess+0x58>)
 8008e86:	2202      	movs	r2, #2
 8008e88:	701a      	strb	r2, [r3, #0]
  break;
 8008e8a:	e004      	b.n	8008e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <USBH_UserProcess+0x58>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	701a      	strb	r2, [r3, #0]
  break;
 8008e92:	e000      	b.n	8008e96 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000580 	.word	0x20000580

08008ea8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec8:	d147      	bne.n	8008f5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	4a24      	ldr	r2, [pc, #144]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008ed4:	f043 0301 	orr.w	r3, r3, #1
 8008ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8008eda:	4b22      	ldr	r3, [pc, #136]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	4619      	mov	r1, r3
 8008efa:	481b      	ldr	r0, [pc, #108]	; (8008f68 <HAL_HCD_MspInit+0xc0>)
 8008efc:	f7f8 f8d6 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f06:	2302      	movs	r3, #2
 8008f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f12:	230a      	movs	r3, #10
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f16:	f107 0314 	add.w	r3, r7, #20
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4812      	ldr	r0, [pc, #72]	; (8008f68 <HAL_HCD_MspInit+0xc0>)
 8008f1e:	f7f8 f8c5 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	4a0f      	ldr	r2, [pc, #60]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2c:	6353      	str	r3, [r2, #52]	; 0x34
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f36:	4a0b      	ldr	r2, [pc, #44]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <HAL_HCD_MspInit+0xbc>)
 8008f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	2043      	movs	r0, #67	; 0x43
 8008f50:	f7f8 f845 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f54:	2043      	movs	r0, #67	; 0x43
 8008f56:	f7f8 f85e 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	3728      	adds	r7, #40	; 0x28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800
 8008f68:	40020000 	.word	0x40020000

08008f6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe ffed 	bl	8007f5a <USBH_LL_IncTimer>
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff f825 	bl	8007fe6 <USBH_LL_Connect>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff f82e 	bl	8008014 <USBH_LL_Disconnect>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe ffdf 	bl	8007fae <USBH_LL_PortEnabled>
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe ffdf 	bl	8007fca <USBH_LL_PortDisabled>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009022:	2b01      	cmp	r3, #1
 8009024:	d12a      	bne.n	800907c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009026:	4a18      	ldr	r2, [pc, #96]	; (8009088 <USBH_LL_Init+0x74>)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a15      	ldr	r2, [pc, #84]	; (8009088 <USBH_LL_Init+0x74>)
 8009032:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <USBH_LL_Init+0x74>)
 8009038:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800903c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800903e:	4b12      	ldr	r3, [pc, #72]	; (8009088 <USBH_LL_Init+0x74>)
 8009040:	2208      	movs	r2, #8
 8009042:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009044:	4b10      	ldr	r3, [pc, #64]	; (8009088 <USBH_LL_Init+0x74>)
 8009046:	2201      	movs	r2, #1
 8009048:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800904a:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <USBH_LL_Init+0x74>)
 800904c:	2200      	movs	r2, #0
 800904e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009050:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <USBH_LL_Init+0x74>)
 8009052:	2202      	movs	r2, #2
 8009054:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <USBH_LL_Init+0x74>)
 8009058:	2200      	movs	r2, #0
 800905a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800905c:	480a      	ldr	r0, [pc, #40]	; (8009088 <USBH_LL_Init+0x74>)
 800905e:	f7f8 f9da 	bl	8001416 <HAL_HCD_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009068:	f7f7 fce2 	bl	8000a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800906c:	4806      	ldr	r0, [pc, #24]	; (8009088 <USBH_LL_Init+0x74>)
 800906e:	f7f8 fdbe 	bl	8001bee <HAL_HCD_GetCurrentFrame>
 8009072:	4603      	mov	r3, r0
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fe ff60 	bl	8007f3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000584 	.word	0x20000584

0800908c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7f8 fd2d 	bl	8001b02 <HAL_HCD_Start>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 f95c 	bl	800936c <USBH_Get_USB_Status>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090d8:	4618      	mov	r0, r3
 80090da:	f7f8 fd35 	bl	8001b48 <HAL_HCD_Stop>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f941 	bl	800936c <USBH_Get_USB_Status>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800910a:	4618      	mov	r0, r3
 800910c:	f7f8 fd7d 	bl	8001c0a <HAL_HCD_GetCurrentSpeed>
 8009110:	4603      	mov	r3, r0
 8009112:	2b02      	cmp	r3, #2
 8009114:	d00c      	beq.n	8009130 <USBH_LL_GetSpeed+0x38>
 8009116:	2b02      	cmp	r3, #2
 8009118:	d80d      	bhi.n	8009136 <USBH_LL_GetSpeed+0x3e>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <USBH_LL_GetSpeed+0x2c>
 800911e:	2b01      	cmp	r3, #1
 8009120:	d003      	beq.n	800912a <USBH_LL_GetSpeed+0x32>
 8009122:	e008      	b.n	8009136 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
    break;
 8009128:	e008      	b.n	800913c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800912a:	2301      	movs	r3, #1
 800912c:	73fb      	strb	r3, [r7, #15]
    break;
 800912e:	e005      	b.n	800913c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009130:	2302      	movs	r3, #2
 8009132:	73fb      	strb	r3, [r7, #15]
    break;
 8009134:	e002      	b.n	800913c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009136:	2301      	movs	r3, #1
 8009138:	73fb      	strb	r3, [r7, #15]
    break;
 800913a:	bf00      	nop
  }
  return  speed;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800915c:	4618      	mov	r0, r3
 800915e:	f7f8 fd10 	bl	8001b82 <HAL_HCD_ResetPort>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f8ff 	bl	800936c <USBH_Get_USB_Status>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009172:	7bbb      	ldrb	r3, [r7, #14]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7f8 fd17 	bl	8001bc6 <HAL_HCD_HC_GetXferCount>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091a2:	b590      	push	{r4, r7, lr}
 80091a4:	b089      	sub	sp, #36	; 0x24
 80091a6:	af04      	add	r7, sp, #16
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	4608      	mov	r0, r1
 80091ac:	4611      	mov	r1, r2
 80091ae:	461a      	mov	r2, r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	70fb      	strb	r3, [r7, #3]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70bb      	strb	r3, [r7, #2]
 80091b8:	4613      	mov	r3, r2
 80091ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091ca:	787c      	ldrb	r4, [r7, #1]
 80091cc:	78ba      	ldrb	r2, [r7, #2]
 80091ce:	78f9      	ldrb	r1, [r7, #3]
 80091d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091d2:	9302      	str	r3, [sp, #8]
 80091d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4623      	mov	r3, r4
 80091e2:	f7f8 f97a 	bl	80014da <HAL_HCD_HC_Init>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 f8bd 	bl	800936c <USBH_Get_USB_Status>
 80091f2:	4603      	mov	r3, r0
 80091f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd90      	pop	{r4, r7, pc}

08009200 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f7f8 f9ea 	bl	80015f8 <HAL_HCD_HC_Halt>
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f89e 	bl	800936c <USBH_Get_USB_Status>
 8009230:	4603      	mov	r3, r0
 8009232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009234:	7bbb      	ldrb	r3, [r7, #14]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800923e:	b590      	push	{r4, r7, lr}
 8009240:	b089      	sub	sp, #36	; 0x24
 8009242:	af04      	add	r7, sp, #16
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	461a      	mov	r2, r3
 800924c:	4603      	mov	r3, r0
 800924e:	70fb      	strb	r3, [r7, #3]
 8009250:	460b      	mov	r3, r1
 8009252:	70bb      	strb	r3, [r7, #2]
 8009254:	4613      	mov	r3, r2
 8009256:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009266:	787c      	ldrb	r4, [r7, #1]
 8009268:	78ba      	ldrb	r2, [r7, #2]
 800926a:	78f9      	ldrb	r1, [r7, #3]
 800926c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009270:	9303      	str	r3, [sp, #12]
 8009272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4623      	mov	r3, r4
 8009282:	f7f8 f9dd 	bl	8001640 <HAL_HCD_HC_SubmitRequest>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f86d 	bl	800936c <USBH_Get_USB_Status>
 8009292:	4603      	mov	r3, r0
 8009294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009296:	7bbb      	ldrb	r3, [r7, #14]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f8 fc71 	bl	8001b9e <HAL_HCD_HC_GetURBState>
 80092bc:	4603      	mov	r3, r0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d103      	bne.n	80092e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f870 	bl	80093c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80092e4:	20c8      	movs	r0, #200	; 0xc8
 80092e6:	f7f7 fd7b 	bl	8000de0 <HAL_Delay>
  return USBH_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
 8009300:	4613      	mov	r3, r2
 8009302:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800930a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	212c      	movs	r1, #44	; 0x2c
 8009312:	fb01 f303 	mul.w	r3, r1, r3
 8009316:	4413      	add	r3, r2
 8009318:	333b      	adds	r3, #59	; 0x3b
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	212c      	movs	r1, #44	; 0x2c
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	4413      	add	r3, r2
 800932c:	3354      	adds	r3, #84	; 0x54
 800932e:	78ba      	ldrb	r2, [r7, #2]
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e008      	b.n	8009346 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	212c      	movs	r1, #44	; 0x2c
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	3355      	adds	r3, #85	; 0x55
 8009342:	78ba      	ldrb	r2, [r7, #2]
 8009344:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7f7 fd3f 	bl	8000de0 <HAL_Delay>
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d817      	bhi.n	80093b0 <USBH_Get_USB_Status+0x44>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USBH_Get_USB_Status+0x1c>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	08009399 	.word	0x08009399
 800938c:	0800939f 	.word	0x0800939f
 8009390:	080093a5 	.word	0x080093a5
 8009394:	080093ab 	.word	0x080093ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e00b      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800939e:	2302      	movs	r3, #2
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e008      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	e005      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093aa:	2302      	movs	r3, #2
 80093ac:	73fb      	strb	r3, [r7, #15]
    break;
 80093ae:	e002      	b.n	80093b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	bf00      	nop
  }
  return usb_status;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
 80093dc:	e001      	b.n	80093e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80093de:	2301      	movs	r3, #1
 80093e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	461a      	mov	r2, r3
 80093e6:	2101      	movs	r1, #1
 80093e8:	4803      	ldr	r0, [pc, #12]	; (80093f8 <MX_DriverVbusFS+0x34>)
 80093ea:	f7f7 fffb 	bl	80013e4 <HAL_GPIO_WritePin>
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	40020800 	.word	0x40020800

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	; (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	2000002c 	.word	0x2000002c

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4d0d      	ldr	r5, [pc, #52]	; (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	; (8009444 <__libc_init_array+0x3c>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2600      	movs	r6, #0
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4d0b      	ldr	r5, [pc, #44]	; (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	; (800944c <__libc_init_array+0x44>)
 800941c:	f000 f92e 	bl	800967c <_init>
 8009420:	1b64      	subs	r4, r4, r5
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2600      	movs	r6, #0
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f855 3b04 	ldr.w	r3, [r5], #4
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	080096b8 	.word	0x080096b8
 8009444:	080096b8 	.word	0x080096b8
 8009448:	080096b8 	.word	0x080096b8
 800944c:	080096bc 	.word	0x080096bc

08009450 <malloc>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <malloc+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f000 b87f 	b.w	8009558 <_malloc_r>
 800945a:	bf00      	nop
 800945c:	2000002c 	.word	0x2000002c

08009460 <free>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <free+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f000 b80b 	b.w	8009480 <_free_r>
 800946a:	bf00      	nop
 800946c:	2000002c 	.word	0x2000002c

08009470 <memset>:
 8009470:	4402      	add	r2, r0
 8009472:	4603      	mov	r3, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <_free_r>:
 8009480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009482:	2900      	cmp	r1, #0
 8009484:	d044      	beq.n	8009510 <_free_r+0x90>
 8009486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948a:	9001      	str	r0, [sp, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f1a1 0404 	sub.w	r4, r1, #4
 8009492:	bfb8      	it	lt
 8009494:	18e4      	addlt	r4, r4, r3
 8009496:	f000 f8e3 	bl	8009660 <__malloc_lock>
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <_free_r+0x94>)
 800949c:	9801      	ldr	r0, [sp, #4]
 800949e:	6813      	ldr	r3, [r2, #0]
 80094a0:	b933      	cbnz	r3, 80094b0 <_free_r+0x30>
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	6014      	str	r4, [r2, #0]
 80094a6:	b003      	add	sp, #12
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	f000 b8de 	b.w	800966c <__malloc_unlock>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d908      	bls.n	80094c6 <_free_r+0x46>
 80094b4:	6825      	ldr	r5, [r4, #0]
 80094b6:	1961      	adds	r1, r4, r5
 80094b8:	428b      	cmp	r3, r1
 80094ba:	bf01      	itttt	eq
 80094bc:	6819      	ldreq	r1, [r3, #0]
 80094be:	685b      	ldreq	r3, [r3, #4]
 80094c0:	1949      	addeq	r1, r1, r5
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	e7ed      	b.n	80094a2 <_free_r+0x22>
 80094c6:	461a      	mov	r2, r3
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	b10b      	cbz	r3, 80094d0 <_free_r+0x50>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x46>
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	1855      	adds	r5, r2, r1
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x70>
 80094d8:	6824      	ldr	r4, [r4, #0]
 80094da:	4421      	add	r1, r4
 80094dc:	1854      	adds	r4, r2, r1
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	d1e0      	bne.n	80094a6 <_free_r+0x26>
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6053      	str	r3, [r2, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7da      	b.n	80094a6 <_free_r+0x26>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x78>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	e7d6      	b.n	80094a6 <_free_r+0x26>
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf04      	itt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6054      	str	r4, [r2, #4]
 800950e:	e7ca      	b.n	80094a6 <_free_r+0x26>
 8009510:	b003      	add	sp, #12
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	20000888 	.word	0x20000888

08009518 <sbrk_aligned>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4e0e      	ldr	r6, [pc, #56]	; (8009554 <sbrk_aligned+0x3c>)
 800951c:	460c      	mov	r4, r1
 800951e:	6831      	ldr	r1, [r6, #0]
 8009520:	4605      	mov	r5, r0
 8009522:	b911      	cbnz	r1, 800952a <sbrk_aligned+0x12>
 8009524:	f000 f88c 	bl	8009640 <_sbrk_r>
 8009528:	6030      	str	r0, [r6, #0]
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f000 f887 	bl	8009640 <_sbrk_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d00a      	beq.n	800954c <sbrk_aligned+0x34>
 8009536:	1cc4      	adds	r4, r0, #3
 8009538:	f024 0403 	bic.w	r4, r4, #3
 800953c:	42a0      	cmp	r0, r4
 800953e:	d007      	beq.n	8009550 <sbrk_aligned+0x38>
 8009540:	1a21      	subs	r1, r4, r0
 8009542:	4628      	mov	r0, r5
 8009544:	f000 f87c 	bl	8009640 <_sbrk_r>
 8009548:	3001      	adds	r0, #1
 800954a:	d101      	bne.n	8009550 <sbrk_aligned+0x38>
 800954c:	f04f 34ff 	mov.w	r4, #4294967295
 8009550:	4620      	mov	r0, r4
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	2000088c 	.word	0x2000088c

08009558 <_malloc_r>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	1ccd      	adds	r5, r1, #3
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	2d00      	cmp	r5, #0
 800956c:	4607      	mov	r7, r0
 800956e:	db01      	blt.n	8009574 <_malloc_r+0x1c>
 8009570:	42a9      	cmp	r1, r5
 8009572:	d905      	bls.n	8009580 <_malloc_r+0x28>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	2600      	movs	r6, #0
 800957a:	4630      	mov	r0, r6
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	4e2e      	ldr	r6, [pc, #184]	; (800963c <_malloc_r+0xe4>)
 8009582:	f000 f86d 	bl	8009660 <__malloc_lock>
 8009586:	6833      	ldr	r3, [r6, #0]
 8009588:	461c      	mov	r4, r3
 800958a:	bb34      	cbnz	r4, 80095da <_malloc_r+0x82>
 800958c:	4629      	mov	r1, r5
 800958e:	4638      	mov	r0, r7
 8009590:	f7ff ffc2 	bl	8009518 <sbrk_aligned>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	4604      	mov	r4, r0
 8009598:	d14d      	bne.n	8009636 <_malloc_r+0xde>
 800959a:	6834      	ldr	r4, [r6, #0]
 800959c:	4626      	mov	r6, r4
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d140      	bne.n	8009624 <_malloc_r+0xcc>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4631      	mov	r1, r6
 80095a6:	4638      	mov	r0, r7
 80095a8:	eb04 0803 	add.w	r8, r4, r3
 80095ac:	f000 f848 	bl	8009640 <_sbrk_r>
 80095b0:	4580      	cmp	r8, r0
 80095b2:	d13a      	bne.n	800962a <_malloc_r+0xd2>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	3503      	adds	r5, #3
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	f025 0503 	bic.w	r5, r5, #3
 80095be:	3508      	adds	r5, #8
 80095c0:	2d0c      	cmp	r5, #12
 80095c2:	bf38      	it	cc
 80095c4:	250c      	movcc	r5, #12
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ffa5 	bl	8009518 <sbrk_aligned>
 80095ce:	3001      	adds	r0, #1
 80095d0:	d02b      	beq.n	800962a <_malloc_r+0xd2>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	442b      	add	r3, r5
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	e00e      	b.n	80095f8 <_malloc_r+0xa0>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	d41e      	bmi.n	800961e <_malloc_r+0xc6>
 80095e0:	2a0b      	cmp	r2, #11
 80095e2:	d916      	bls.n	8009612 <_malloc_r+0xba>
 80095e4:	1961      	adds	r1, r4, r5
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	6025      	str	r5, [r4, #0]
 80095ea:	bf18      	it	ne
 80095ec:	6059      	strne	r1, [r3, #4]
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	bf08      	it	eq
 80095f2:	6031      	streq	r1, [r6, #0]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4638      	mov	r0, r7
 80095fa:	f104 060b 	add.w	r6, r4, #11
 80095fe:	f000 f835 	bl	800966c <__malloc_unlock>
 8009602:	f026 0607 	bic.w	r6, r6, #7
 8009606:	1d23      	adds	r3, r4, #4
 8009608:	1af2      	subs	r2, r6, r3
 800960a:	d0b6      	beq.n	800957a <_malloc_r+0x22>
 800960c:	1b9b      	subs	r3, r3, r6
 800960e:	50a3      	str	r3, [r4, r2]
 8009610:	e7b3      	b.n	800957a <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	6032      	streq	r2, [r6, #0]
 800961a:	605a      	strne	r2, [r3, #4]
 800961c:	e7ec      	b.n	80095f8 <_malloc_r+0xa0>
 800961e:	4623      	mov	r3, r4
 8009620:	6864      	ldr	r4, [r4, #4]
 8009622:	e7b2      	b.n	800958a <_malloc_r+0x32>
 8009624:	4634      	mov	r4, r6
 8009626:	6876      	ldr	r6, [r6, #4]
 8009628:	e7b9      	b.n	800959e <_malloc_r+0x46>
 800962a:	230c      	movs	r3, #12
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4638      	mov	r0, r7
 8009630:	f000 f81c 	bl	800966c <__malloc_unlock>
 8009634:	e7a1      	b.n	800957a <_malloc_r+0x22>
 8009636:	6025      	str	r5, [r4, #0]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa0>
 800963a:	bf00      	nop
 800963c:	20000888 	.word	0x20000888

08009640 <_sbrk_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d06      	ldr	r5, [pc, #24]	; (800965c <_sbrk_r+0x1c>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7f7 fae4 	bl	8000c18 <_sbrk>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_sbrk_r+0x1a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_sbrk_r+0x1a>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20000890 	.word	0x20000890

08009660 <__malloc_lock>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__malloc_lock+0x8>)
 8009662:	f000 b809 	b.w	8009678 <__retarget_lock_acquire_recursive>
 8009666:	bf00      	nop
 8009668:	20000894 	.word	0x20000894

0800966c <__malloc_unlock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_unlock+0x8>)
 800966e:	f000 b804 	b.w	800967a <__retarget_lock_release_recursive>
 8009672:	bf00      	nop
 8009674:	20000894 	.word	0x20000894

08009678 <__retarget_lock_acquire_recursive>:
 8009678:	4770      	bx	lr

0800967a <__retarget_lock_release_recursive>:
 800967a:	4770      	bx	lr

0800967c <_init>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	bf00      	nop
 8009680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009682:	bc08      	pop	{r3}
 8009684:	469e      	mov	lr, r3
 8009686:	4770      	bx	lr

08009688 <_fini>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr
